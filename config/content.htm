<h1>簡介</h1>
<h4>以 Python 與 PyQt5 為主</h4>
<p>這裡是國立虎尾科技大學機械設計工程系計算機程式課程教材, 主要從 Python 程式語言的學習切入, 並教導如何利用 <a href="https://pypi.org/project/PyQt5/">PyQt5</a> 圖形介面程式庫建立視窗程式, 由於目前的機械設計相關產品, 除了機構元件設計外, 還牽涉部分電子電機與資訊元件的網際協同整合, 因此本系列課程 (<a href="http://mde.tw/cp2018/content/">計算機程式</a>、網際內容管理、<a href="http://mde.tw/cadp2018/content/">電腦輔助設計實習</a>、協同產品設計實習) 在視窗程式中還加入可執行遠端伺服器運算之模組.</p>
<h4>納入網際伺服運算模組</h4>
<p>由於部分機械設計工程分析運算流程, 需要較長運算時間, 因此除了近端單機視窗程式開發外, 本課程採 <a href="http://flask.pocoo.org/">Flask</a> 網際框架, 並輔以 <a href="https://brython.info/">Brython</a> 與 <a href="https://github.com/fengari-lua/fengari-web">Fengari-web</a> 等網際 Python 與 Lua 程式語法. 建立所需的機械設計運算叢集伺服器, 使用者可以從近端電腦中, 以批次上傳方式, 將運算要求送至遠端伺服器, 待階段運算任務完成後, 以電子郵件通知使用者檢視結果.</p>
<h4>引用機電整合模擬與 3D 零組件列印</h4>
<p>機械設計工程系的電腦軟體應用, 在培育具有編寫近端單機 <a href="https://pypi.org/project/PyQt5/">PyQt5</a> 程式套件能力, 並且利用多執行緒啟動網際伺服功能, 讓其他參與協同產品設計者, 能夠利用單機視窗程式客戶端或瀏覽器, 與遠端伺服器互換資料, 並且由近端或遠端套件中的模組, 送出致動指令, 驅動 <a href="http://www.coppeliarobotics.com/">V-rep</a> 上的各種機電整合系統模型. 一旦相關機電資產品的動態控制與模擬完成後, 再藉由各式 3D 列印機製作組合出系統原型.</p>
<h4>結合 C/C++ 提升運算速度</h4>
<p>計算機程式課程以 Python 程式語言導入的目的, 在於能讓初學者快速建立用於電腦輔助機械設計流程相關的程式, 而當 Python 程式需要與 C/C++ 程式庫結合時, 則建議利用 <a href="http://www.swig.org/">SWIG</a> (<a href="/downloads/swig_cpp_python.pdf">ref.pdf</a>) 將現成 C/C++ 程式編寫為能讓 Python 直接呼叫執行的動態連結庫.</p>
<p>註: 目前能自動編譯 C++ 程式為 Python 可呼叫的動態程式庫技術為:</p>
<p><a href="/downloads/AutoWIG%20-%20automatic%20generation%20of%20python%20bindings%20for%20Cpp%20libraries.pdf">AutoWIG - automatic generation of python bindings for Cpp libraries.pdf</a></p>
<h4>學習用於 V-rep 的 Lua</h4>
<p>本課程提及 Lua 程式語言的原因, 在於隨後課程所使用的 <a href="http://www.coppeliarobotics.com/">V-rep</a> 嵌入程式採用 <a href="http://www.coppeliarobotics.com/helpFiles/en/scripts.htm">Lua</a> 程式與 C++ 結合, 因使用 <a href="https://github.com/fengari-lua/fengari-web">Fengari-web</a>, 使用者可以直接在<a href="http://mde.tw/vecp2018/lua/SchoolProject/">網際 Lua 平台</a>練習基本程式語法.</p>
<p>至於以 Python 語言編寫的某些數值分析程式, 為了提高執行效率, 也提及可以使用 <a href="http://cython.org/">Cython</a> 將這些 Python 程式庫轉為 C 之後, 再編譯為能與主 Python 程式結合的動態連結庫.</p>
<h4>機電資協同整合設計目標</h4>
<p>機械設計工程系的電腦輔助機械設計相關課程, 除了本<a href="https://mdecourse.github.io/cp2018/">計算機程式</a>外, 還包含網際內容管理, <a href="https://mdecourse.github.io/cadp2018/">電腦輔助設計實習</a>與協同產品設計實習, 希望能夠在課程結束後, 各學員能以團隊整合的模式開發電腦程式, 有效解決電腦輔助機械設計相關問題.</p>
<p>課程倉儲: <a href="https://github.com/mdecourse/cp2018">https://github.com/mdecourse/cp2018</a></p>
<p>課程目標:</p>
<p>本計算機程式課程在導引如何利用電腦輔助方法進行機械設計, 開發有實用價值的程式.</p>
<p>需要自學技術:</p>
<ol>
<li><a href="http://indiatyping.com/index.php/typing-tutor/english-typing-tutor">電腦英文輸入</a></li>
<li>電腦中文輸入: 注音輸入, <a href="https://www.pinyinjoe.com/windows-10/windows-10-pinyin-setup.htm">漢語拼音</a></li>
<li>Windows 10 基本操作: <a href="/downloads/win10_manual.pdf">win10_manual.pdf</a></li>
<li><a href="/downloads/MSDOS.pdf">命令列基本指令操作</a></li>
<li><a href="/downloads/computer_hardware.pdf">個人電腦硬體基本認識</a> : <a href="/downloads/com_tutorial.pdf">computer fundamental tutorial.pdf</a></li>
<li><a href="/downloads/foundamental_ict.pdf">Fundamentals of ICT.pdf</a></li>
</ol>
<p>程式語言:</p>
<ol>
<li>C/C++: 含 Qt5 圖形介面程式開發</li>
<li>Python: 含 PyQt5 圖形介面程式開發</li>
<li>Lua: 以能與 C/C++ 結合, 並在 <a href="http://www.coppeliarobotics.com/">V-rep</a> 環境中使用為目標.</li>
<li>Javascript: 含 <a href="https://brython.info/">Brython</a> 與 <a href="https://github.com/fengari-lua/fengari-web">Fengari-web</a> 網際環境導入.</li>
</ol>
<h4>學習計算機程式訣竅</h4>
<p>要堅持不懈</p>
<p>計算機程式是學習如何與電腦溝通, 如同英文或其他外國語言的學習, 是一輩子的任務, 只有開始, 沒有結束.</p>
<p>要養成每天都寫程式碼的習慣, 每一個學習或編寫程式碼的時段不用太久, 半小時或 45 分鐘都不算短, 碰到瓶頸, 可以起身走動, 隨思意想, 養足精神後, 再繼續工作.</p>
<p>儘早選定主題</p>
<p>電腦程式已經從輔助角色, 逐步發展成能夠獨立自主運作的人工智慧, 用來解決各領域問題的範圍包羅萬象, 計算機程式學習者, 必須儘早選定主題, 集中火力, 在每一個學習階段, 都能透過計算機程式能力, 擴增自我競爭力與協同能力.</p>
<p>參與協同設計</p>
<p>正因為電腦軟硬體能夠勝任的工作越來越多, 各種工具套件與模組的更新速度越來越快, 儘早選定主題之後, 在計算機學習進展過程中, 必得設法參與全球化的協同設計生態系, 貢獻自我價值, 將自己已經理解且熟練的內容, 拍成教學影片, 寫進網誌, 配置成網際簡報, 設法教會周遭與網路上的潛在協同者, 不斷推升個人與團隊的競爭力.</p><h2>課程規劃</h2>
<p>課程目標:</p>
<p>為了讓機械設計工程師了解, 該如何利用電腦與網路進行機械設計. 總共安排了四門課程:</p>
<p>計算機程式 - 內容分為 C, Python, Lua, Html5, CSS, Javascript 等,  利用可攜系統, Git, Fossil SCM, Windows 10 電腦, Ubuntu 電腦與網路的技術, 進行各種問題的解決.</p>
<p>最佳化設計問題: <a href="https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html">https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html</a> </p>
<p>網際內容管理 - 在 Windows 10 與 Ubuntu 電腦, 建立 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 與 <a href="https://github.com/chiamingyen/pygrouf">Pygrouf</a> 環境.</p>
<p>電腦輔助設計實習 - 加入電腦輔助機械設計零組件繪製與機器人模擬與製作技術研習.</p>
<p>協同產品設計實習 - 全面利用近端與雲端資源的整合, 進行機電資系統開發.</p>
<p><a href="https://coggle.it/diagram/WzOQWjCAbuRWow6A/t/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A8%8B%E5%BC%8F/544030eebbbe4f0d10aff84c8ee2e10a8c36faa1270808c275dc189d98cfcc3e">2018 Fall 計算機程式課程規劃心智圖</a> (under scrum1 At mde)</p>
<p>計算機程式課程:</p>
<ol>
<li>所有教材都以數位形式存在, 包括<a href="https://github.com/mdecourse/cp2018">網站</a>與教學影片 (<a href="https://www.youtube.com/channel/UCJ0Ye3mhMApH0yxAcwCXs5g/videos">Youtube</a> 與 <a href="https://vimeo.com/user24079973">Vimeo</a>).</li>
<li>要求學員編寫紙本筆記: 訓練手到學習, 目的是希望學員上課寫紙本筆記時, 手可以暫時離開手機:-)</li>
<li>採用版次管理系統: 能夠保存各階段的版本, 完成呈現事件的歷程資料, 採用 <a href="https://github.com/">Github</a> 與 <a href="https://www.fossil-scm.org">Fossil SCM</a>.</li>
<li>透過網路協同: 多人可同步或非同步執行專案, 突破時間與空間的限制. (採用 <a href="https://github.com/">Github</a> 倉儲)</li>
<li>實作前模擬: 將機械與電子電機相關整合系統, 以資訊科技模擬呈現.</li>
<li>人工智慧應用: 車牌辨識、專家系統與創新設計, 計算機程式經歷輔助式 (Assistant)、導引式 (Guidance) 的發展, 已經逐步進入自主式 (Autonomous) 創新世代.</li>
</ol>
<p>課程採用可攜程式系統, 使用者可以下載一般版 <a href="https://drive.google.com/file/d/1Pkkjg8RX3pkZkjWEBlQBggw11u5YSn5i/view?usp=sharing">p37.7z</a> (240MB  解開後約 1GB) , 或較<span>完整的進階版 </span><span><a href="https://drive.google.com/file/d/12BLN4daAPlO1KjCTDFi1kqJZ6f5k7Y5k/view?usp=sharing">Qt 可攜系統 .7z</a> (8GB, 解開後約 21GB).</span></p>
<p>學習 Python 與 <a href="https://pypi.org/project/PyQt5/">PyQt5</a> 用於視窗程式開發:</p>
<p>利用 Python 與 <a href="https://pypi.org/project/PyQt5/">PyQt5</a> 可開發 Windows 10 環境執行的視窗程式, 利用 Python 與 <a href="http://flask.pocoo.org/">Flask</a> 結合 <a href="https://brython.info/">Brython</a> 開發網際程式.</p>
<p>學習 C 用於 <a href="https://www.tinkercad.com/">Tinkercad</a> <a href="https://www.arduino.cc/">Arduino</a> 控制卡模擬:</p>
<p>學習 <a href="https://www.lua.org/">Lua</a> 用於 <a href="http://www.coppeliarobotics.com/">V-rep</a> 機器人模擬:</p>
<p>學習 Javascript 與  <a href="https://brython.info/">Brython</a> 與 <a href="https://github.com/fengari-lua/fengari-web">Fengari-web</a> 用於網頁動態模擬:</p>
<p><img alt="" height="367" src="/images/three_gears.png" width="790"/></p><h2>機械設計</h2>
<p>機械設計與表達</p>
<p>從工程(細密規劃, 專精巧飾, 運用科學原理達創造目的之特定流程)的角度而言, 設計是一種明確與具體的表達, 而且是在仔細思考、多方考量後所完成的表達, 表達具有六種形式, 包括口語、文字、2D、3D、數學與實體表達, 設計的結果可以讓執行者有所依循, 根據指示執行後, 可得預期之結果.</p>
<p>機械是一種器物, 而且是由固體、流體與軟體元件精巧組合而成, 可互動運作, 達成特定功能之器物.</p>
<p>因此機械設計就是靈活運用六種表達, 明確說明如何透過固體、流體與軟體元件之互動運作, 而能達成預定結果之明確與具體表達.</p>
<p>參與機械設計的工程師, 為順利完成任務, 解決產品開發過程所面臨的各項問題, 展現創造力的三種必備能力: 自學能力、執行能力與想像能力.</p>
<p>由於機械設計流程牽涉許多固體、流體與軟體元件配置, 而且當多名成員在協同設計過程中, 會於不同時間納入各種機械設計組成及六種表達內容, 因此必須要設法運用組態管理 (Configuration Management) 系統, 呈現各時間點詳細的組成內容與狀態.</p>
<p>參考資料:</p>
<p><a href="https://github.com/m2n037/awesome-mecheng">https://github.com/m2n037/awesome-mecheng</a> </p>
<p><a href="https://www.scipy-lectures.org/intro/intro.html">https://www.scipy-lectures.org/intro/intro.html</a> </p>
<p><a href="https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html">https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html</a> </p>
<p><a href="http://open.umn.edu/opentextbooks/">http://open.umn.edu/opentextbooks/</a> </p>
<h4>身體力行</h4>
<p>開課教師如何使用計算機程式相關技術?</p>
<ol>
<li>利用 Python 建立 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a>, 將課程內容部署在 <a href="https://github.com/">Github</a>  倉儲</li>
<li>使用 <a href="https://www.leoeditor.com/">Leo Editor</a> IDE 管理與課程相關的所有資料</li>
<li>指導學生利用 Python 建立 <a href="https://github.com/KmolYuan/Pyslvs-PyQt5">Pyslvs</a>, 用於平面機構設計與分析模擬</li>
<li>利用批次檔案建立 USB 可攜程式套件, <a href="https://drive.google.com/file/d/1Pkkjg8RX3pkZkjWEBlQBggw11u5YSn5i/view?usp=sharing">p37.7z</a> (240MB, 解開 1GB), <a href="https://drive.google.com/file/d/12BLN4daAPlO1KjCTDFi1kqJZ6f5k7Y5k/view?usp=sharing">Qt</a> (8GB, 解開 21 GB).</li>
<li>利用 Python 建立 <a href="https://github.com/chiamingyen/pygrouf">PyGrouf</a>, 用於多人協同機械設計</li>
</ol>
<p>獲得那些效益?</p>
<ol>
<li><a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 結合 <a href="https://revealjs.com">reveal.js</a> 與 <a href="https://blog.getpelican.com/">Pelican</a>, 可以將課程內容、網際簡報與網誌部署於 Github 倉儲</li>
<li>多元資料可以透過 <a href="https://www.leoeditor.com/">Leo Editor</a>, 獲得有效管理</li>
<li>利用演化運算解決機械設計最佳化問題, 可做為導入 AI 機械設計教育的入門教材</li>
<li>自行利用 Python 模組與 <a href="https://www.msys2.org/">MSYS2</a> 打造自由開放, 且能全面客製化的程式開發工具</li>
<li>導入 <a href="https://en.wikipedia.org/wiki/OAuth#OAuth_2.0">oauth2</a> 登入技術, 朝自行開發協同機械設計工具邁進</li>
</ol>
<p>業界能否受用?</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-0553-2">Numerical Python - A Practical Techniques Approach for Industry</a></p>
<p>學員如何延續上述實習內容?</p>
<h4>議題</h4>
<p>可資議論之主題</p>
<p>計算機程式在解決甚麼問題?</p>
<ol>
<li>工具易用及易維護性議題</li>
<li>協同資料擷取便性議題</li>
<li>資料版本及歷程長期保存議題</li>
<li>如何尋求可持續改進的電腦輔助設計與工程分析架構與協同機制</li>
</ol><h2>ANSI C</h2>
<p>Hello ANSIC:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    printf("Hello, ANSI C!\n");

    return 0;
}</pre>
<p>存為 hello.c</p>
<p>然後啟動 Qt 隨身程式系統 (<a href="http://wcmg3.kmol.info/downloads/Qt_20180714.7z">http://wcmg3.kmol.info/downloads/Qt_20180714.7z</a> (或 <a href="https://drive.google.com/file/d/12BLN4daAPlO1KjCTDFi1kqJZ6f5k7Y5k/view?usp=sharing">Qt 下載</a>, 解開後容量為 20GB)), 可以擷取到 <a href="https://www.msys2.org/">MSYS2</a> 64 位元的 <a href="https://gcc.gnu.org/onlinedocs/gcc.pdf">gcc</a> 編譯器, 以隨身系統啟動的命令列執行:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">gcc -o hello hello.c</pre>
<p>進行編譯後, 可以得到 hello.exe, 執行 hello.exe 後, 可以列印出 Hello ANSI C!</p>
<p>上述程式碼也可以直接複製到 SCiTE中, 存為 hello.c 後, 以 Tools-&gt;Go 執行.</p>
<p>也可以直接在 <a href="https://www.onlinegdb.com/online_c_compiler">https://www.onlinegdb.com/online_c_compiler</a> 中執行.</p>
<p>接下來利用 <a href="http://learn.onlinegdb.com/learn_c_programming">http://learn.onlinegdb.com/learn_c_programming</a> 與 <a href="https://www.codingunit.com/category/c-tutorials">codingunit</a> 學習 C 程式語言.</p>
<p>函式定義與呼叫:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;

int sum(x, y, z){
    return x+y+z;
}

main()
{
    int i;
    int x;
    int y = 1;
    x = 1;
    y = sum(x, 2, 3);
    // formated print
    printf("%d\n", y);
    
    // for loop
    for (i=0; i&lt;10; i++){
        printf("Hello World\n");
    }
}</pre>
<p>格式化列印:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;

main()
{
    int a,b;
    float c,d;

    a = 15;
    b = a / 2;
    printf("%d\n",b);
    printf("%3d\n",b);
    printf("%03d\n",b);

    c = 15.3;
    d = c / 3;
    printf("%3.2f\n",d);
}</pre>
<p>格式化列印 2:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;

main()
{
	printf("The color: %s\n", "blue");
	printf("First number: %d\n", 12345);
	printf("Second number: %04d\n", 25);
	printf("Third number: %i\n", 1234);
	printf("Float number: %3.2f\n", 3.14159);
	printf("Hexadecimal: %x\n", 255);
	printf("Octal: %o\n", 255);
	printf("Unsigned value: %u\n", 150);
	printf("Just print the percentage sign %%\n", 10);
}</pre>
<p>華氏溫度與攝式溫度轉換:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;

main()
{
	int Fahrenheit;

	for (Fahrenheit = 0; Fahrenheit &lt;= 300; Fahrenheit = Fahrenheit + 20)
		printf("%3d %06.3f\n", Fahrenheit, (5.0/9.0)*(Fahrenheit-32));
}</pre>
<p>參考資料:</p>
<p>Programming for Engineers: A Foundational Approach to Learning C and Matlab (<a href="https://link.springer.com/book/10.1007/978-3-642-23303-6">https://link.springer.com/book/10.1007/978-3-642-23303-6</a>)</p>
<p><a href="https://dspace.lboro.ac.uk/dspace-jspui/bitstream/2134/10054/6/Programming-in-ANSI-C.pdf">https://dspace.lboro.ac.uk/dspace-jspui/bitstream/2134/10054/6/Programming-in-ANSI-C.pdf</a> </p>
<p><a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm</a> </p>
<p><a href="http://web.stanford.edu/dept/cs_edu/qt-creator/qt-creator-windows.shtml">http://web.stanford.edu/dept/cs_edu/qt-creator/qt-creator-windows.shtml</a> </p>
<p><a href="http://web.stanford.edu/class/archive/cs/cs106b/cs106b.1182/lectures/">http://web.stanford.edu/class/archive/cs/cs106b/cs106b.1182/lectures/</a> </p>
<p><a href="https://www.codestepbystep.com/about">https://www.codestepbystep.com/about</a> </p>
<p><a href="https://google.github.io/styleguide/cppguide.html">https://google.github.io/styleguide/cppguide.html</a> </p>
<p><a href="https://www.programiz.com/c-programming">https://www.programiz.com/c-programming</a> </p>
<h2>指標教材</h2>
<p>指標: <a href="http://cad-lab.github.io/manual/post/c-cheng-shi-yu-yan-de-zhi-biao-yu-zhen-lie-dao-yin-zhong-wen-fan-yi.html">C 程式語言的指標與陣列</a></p>
<p><a href="/downloads/pointers.pdf">指標教材.pdf</a> (英文)</p>
<p>若您想要專精於利用 C 程式語言編寫程式碼, 就必須徹底了解如何使用指標. 然而, C 指標對初學者而言, 經常是一項障礙, 尤其對於從其他程式語言轉進的學習者.</p>
<p>這份資料旨在幫助初學者了解指標. 為了能讓這份資料發揮最大功能, 使用者最好能夠實際執行文章中所列出的各個程式. 因此所有的程式碼都採 ANSI 標準, 以便讓任何符合 ANSI 標準的編譯器都能執行這些程式碼. 內文與程式碼之間, 也特別加以區分開來, 以便使用者可以直接利用複製的方式, 取的各段落的程式碼, 套用到其他系統中進行編譯. 如此才能確實了解這裡所提供的資料.</p>
<h3>ch1何謂指標</h3>
<p>C 語言初學者必須面對的難題之一, 就是指標 (pointer) 的用法.</p>
<p>這份教材的目的, 就是針對初學者簡介指標及其應用.</p>
<p>其實初學者會對指標產生疑惑, 大多源自於在學習 C 語言時, 對於變數的概念經常一知半解.</p>
<p>因此這裡就由 C 變數的一般用法說起.</p>
<p>程式中的變數都必須加以命名, 以便存放資料.</p>
<p>而編譯器與連結器在處理變數時, 就會挪出電腦記憶體中的特定區域, 以存放變數的資料.</p>
<p>這些特定區域的大小, 取決於變數允許存放資料的範圍.</p>
<p>例如, 在 32 位元電腦, 一個整數變數的存放範圍, 需要 4 位元. 而在舊的 16 位元電腦, 整數存放需要 2 位元.</p>
<p>C 程式中的整數變數存放範圍大小, 在各種機器上不一定相同.</p>
<p>並且 C 程式中的整數變數也不只一種, 在許多 C 程式教科數中,可以發現有整數, 長整數, 短整數等. 這裡則假設使用 32 位元系統, 因此整數需要 4 位元的存放空間.</p>
<p>可以採用下列程式碼,在您所使用的系統中, 查探特定整數型別所需要的記憶體空間:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main()
{
printf("size of a short is %d\n", sizeof(short));
printf("size of a int is %d\n", sizeof(int));
printf("size of a long is %d\n", sizeof(long));
}</pre>
<p><a href="http://codepad.org/iQqRmLnh">在 codepad.org 執行上述 C 程式</a></p>
<p><span>當我們宣告一個變數時, 亦即告知編譯器兩件事, 變數名稱與變數型別. 例如, 可以透過:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int k;</pre>
<p>宣告名稱為 k 的整數型別變數. 當編譯器看到 "int" 的敘述時, 就會在電腦的記憶體中, 保留 4 位元的空間, 以便存放整數變數 k 的數值.</p>
<p>此外, 電腦也會設置一個符號表, 註明符號 k 與其在記憶體中用來存放 4 位元資料的相對位址.</p>
<p>因此, 若在變數宣告後, 使用:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">k = 2;</pre>
<p>2 這個數值, 就會在程式執行時, 被放在保留給 k 變數的記憶體位址中.</p>
<p>在 C 語言中, 整數 k 變數, 可視為一個物件. 其中有兩個值與物件 k 有關, 也就是存放的數值與存放的位址. 有些參考書中將者兩個數值稱為"右值"與"左值". (2 為右值, 而變數位址為左值)</p>
<p>在某些語言中, 左值只能放在指定"等號"的左邊, 而右值則只能放在右邊. 位置放錯, 例如: </p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">2 = k;</pre>
<p>就會出錯.</p>
<p>其實, C 語言中有關左值的定義, 根據 K&amp;R II (page 197): [1], 則有些變動.</p>
<p>"物件為儲存區域的名稱, 而左值則為指向該物件的表示式."</p>
<p>這裡先採引用的定義加以說明, 後續將會進一步針對指標加以說明.</p>
<p>接著, 假如程式碼為:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">int j, k;
k = 2; 
j = 7;    &lt;-- line 1 
k = j;    &lt;-- line 2</pre>
<p>編譯器會將第一行 (line 1) 的 j 解讀為變數 j 的位址 (也就是左值), 並且將值 7 放到該位址. 在第二行 (line 2), 則會將 j 視為右值 (因為在"指定"運算子的右方), 指的則是存放在 j 記憶體中的 7 這個數值. 因此第二行執行過後, 存放在 j 的 7 這個數值, 就會被放到 k 變數所對應的"左值" (記憶體位址) 中.</p>
<p>在這些範例中, 採用的都是將右值從一個儲存位址, 經由複製將 4 位元的資料複製到另外一個儲存位址. 假如使用 2 位元整數, 則會複製 2 位元資料.</p>
<p>這裡, 就會需要一種變數, 用來存放左值 (記憶體位址). 存放此一變數的值, 隨系統而異, 舊的桌上電腦總共只有 64K 的記憶體, 每存放一個整數位址會佔去 2 位元.</p>
<p>更多位元數的電腦 (例如 64 位元電腦), 則需要更多的位元位址來存放一個整數資料.</p>
<p>實際需要的記憶體大小並不重要, 需要的則是一種方法, 通知編譯器在哪一位址存放哪些資料.</p>
<p>這樣的變數稱為"指標變數" (隨後將說明得更清楚). 在 C 語言中定義指標變數時, 必須在變數名稱前方, 加上一個 * 符號. 而這些指標變數的型別, 隨著要存放在指標位址中的資料型別而定, 例如, 假如宣告:</p>
<p>int *ptr;</p>
<p>ptr 為變數名稱 (與之前的整數變數名稱 k 相同). 而 "*" 符號則告知編譯器, 此一宣告為指標變數, 亦即保留出足夠的記憶體存放位址. 最前方的 int 則表示, 希望此一指標變數用來存放整數. 而此一指標稱為"指向整數". 需要特別注意的是, 當使用 int k; 時並沒有給 k 初始值, 只有在任何符合 ANSI 規範的編譯器中, 會將宣告在函式外的變數通通以 0 初始.</p>
<p>同樣地, ptr 也沒有初始值, 亦即, 還沒有在上述宣告之後, 在保留的位址空間上, 放入任何值. 這裡若宣告是在任何函式之外, 就會被賦予初值, 並且保證不會指向任何 C 物件或函式. 以這種方式初始的指標, 被稱為 "空"指標 (null pointer).</p>
<p>而空指標並不一定會被放入 "0" 值, 因為這取決於特定系統中的設定. 為了在不同系統中的不同編譯器彼此相容, 就會利用巨集 (macro) 來表示空指標. 此巨集以 NULL 命名. 因此, 若以 NULL 設定指標值, 則可以確定在不同機器上, 這些指標變數一定是空指標.</p>
<p>與整數是否為 0 的判斷式 if(k ==0) 相類似, 可以利用 if(ptr == NULL) 判斷是否 ptr 為空指標.</p>
<p>但是, 回到新變數 ptr 的應用, 假設要將整數變數 k 所對應的位址, 存入 ptr, 就必須使用"位址運算子", 寫成:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">ptr = &amp;k;</pre>
<p>"位址運算子"的作用是用來取 k 的左值 (位址), 即使這時 k 位於等號右邊, 上述程式會將 k 的值複製到指標 ptr 的儲存空間中. 這時, ptr 稱為"指向" k.</p>
<p>接著再討論另外一個運算子.</p>
<p>也就是所謂的"取值運算子" (dereferencing operator), 就是一個 * 符號. 使用方法如下:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">*ptr = 7;</pre>
<p>這一行程式會將 7 這個數值,複製到 ptr 變數所指向的位址. 也就是說, 假如 ptr 指向 k (ptr 為 k 存放資料的記憶體位址), 這行程式就會將 k 的值設為 7. 換言之, * 運算子可用來改變 ptr 所指向的值, 而不是指標本身的值. (註:指標本身為位址, 也就是所謂的左變數)</p>
<p>因此, 可以利用:</p>
<p>printf("%d\n",*ptr);</p>
<p>將目前存放在 ptr 所指向位址的整數值, 透過 printf() 函式印到螢幕.</p>
<p>要釐清上述說明, 可以執行下列程式, 並仔細探討程式碼與其輸出.</p>
<p><span>------------ Program 1.1 ---------------------------------</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Program 1.1 from PTRTUT10.TXT   6/10/97 */
 
#include &lt;stdio.h&gt;
 
int j, k;
int *ptr;
 
int main(void)
{
    j = 1;
    k = 2;
    ptr = &amp;k;
    printf("\n");
    printf("j has the value %d and is stored at %p\n", j, (void *)&amp;j);
    printf("k has the value %d and is stored at %p\n", k, (void *)&amp;k);
    printf("ptr has the value %p and is stored at %p\n", ptr, (void *)&amp;ptr);
    printf("The value of the integer pointed to by ptr is %d\n", *ptr);
 
    return 0;
}</pre>
<p><a href="http://codepad.org/w8R9mp9h">在 codepad.org 執行 Program 1.1</a></p>
<p>請注意: 我們還沒有談到 C 程式中的 (void *) 表示式. 這裡可以先納入您的測試程式碼中, 隨後將會加以說明.</p>
<p>結論:</p>
<ol>
<li><span class="nt">變數宣告必須指定名稱與型別</span><span class="o">.</span> <span class="o">(</span><span class="nt">例如</span><span class="o">:</span> <span class="nt">int</span> <span class="nt">k</span><span class="o">;)</span></li>
<li><span class="nt">指標變數宣告也是指定名稱與型別</span><span class="o">.</span> <span class="o">(</span><span class="nt">例如</span><span class="o">:</span> <span class="nt">int</span> <span class="o">*</span><span class="nt">ptr</span><span class="o">;),</span> <span class="nt">其中的</span> <span class="o">*</span> <span class="nt">告知編譯器</span><span class="o">,</span> <span class="nt">該名稱為</span> <span class="nt">ptr</span> <span class="nt">的變數</span><span class="o">,</span> <span class="nt">為一個指標變數</span><span class="o">,</span> <span class="nt">而其型別為該指標指向的資料型別</span> <span class="o">(</span><span class="nt">這裡為整數</span><span class="o">).</span></li>
<li><span class="nt">一旦變數已經宣告</span><span class="o">,</span> <span class="nt">可以透過變數前方的位址運算子</span><span class="o">,</span> <span class="nt">取得其位址</span><span class="o">,</span> <span class="nt">例如</span> <span class="o">&amp;</span><span class="nt">k</span><span class="o">.</span></li>
<li><span class="nt">可以由指標中</span><span class="s2">"取值"</span><span class="o">,</span> <span class="nt">亦即</span><span class="o">,</span> <span class="nt">以</span> <span class="o">*</span> <span class="nt">指定到指標所參照的值</span><span class="o">,</span> <span class="nt">例如</span><span class="o">:</span> <span class="o">*</span><span class="nt">ptr</span><span class="o">.</span></li>
<li><span class="nt">變數的左值為被用來存放在記憶體中的位址值</span><span class="o">,</span> <span class="nt">而變數的右值則式被存放在該位址的數值</span><span class="o">.</span></li>
</ol>
<p>參考資料:</p>
<p>"The C Programming Language" 2nd Edition B. Kernighan and D. Ritchie Prentice Hall ISBN 0-13-110362-8</p>
<h3>ch2指標型別與陣列</h3>
<p>接著讓我們來看看, 為何需要指定指標指向變數的型別, 例如: int *ptr; 原因之一是, 宣告之後, 可以透過指向, 寫成:</p>
<p>*ptr = 2;</p>
<p>編譯器就會知道要配置多少記憶體給 ptr 變數, 假如 ptr 宣告為指向整數, 電腦就會複製 4 位元的資料, 其它的浮點與雙浮點變數也是相同. 定義指向變數型別的另外一個用途就是編譯器可以解譯程式碼. 例如, 記憶區中存放 10 個連續的整數資料時, 需要 40 位元的記憶體.</p>
<p>假如整數指標 ptr 為這些整數中的第一個變數, 若該整數位於記憶體位址 100. 當程式寫為:</p>
<p>ptr + 1;</p>
<p>因為編譯器知道 ptr 為一個指標變數 (亦即, 其值為一組位址)並且指向某一整數 (目前位址為 100, 即是該整數所在位址), 當 ptr 加上 4 而不是 1 之後, 該指標將會指向下一個整數, 也就是記憶體 104.</p>
<p>相同的概念下, 若 ptr 指向短整數, 則應該加上 2 而不是 1. 對於浮點, 雙浮點或使用者自訂的資料型別 - 結構, 也是類似.</p>
<p>儘管這並非我們常見的"加法", 但是在 C 語言中, 可以透過指標算數進行"加法"運算, 隨後將會再予以說明.</p>
<p>同理, 因為 ++ptr 與 ptr++ 與 ptr + 1 等同 (儘管 ptr 增量的時機點並不一樣).</p>
<p>讓指標以 ++ 增量運算子進行增量, 無論是先加或後加, 由 sizeof(type) 中所得到的位址增量, 其型別均為該物件指向變數的型別 (整數為 4 位元).</p>
<p>由於這 10 個整數位於記憶體中連續區塊上, 指標可以被用於整數資料陣列的處理.</p>
<p>例如:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int my_array[] = {1,23,17,4,-5,100};</pre>
<p><span>陣列中帶有 6 個整數. 可以透過 my_array 的索引代表這些整數. 亦即利用 my_array[0] 到 my_array[5] 加以表示, 也可以透過指標加以表示成:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int *ptr;
ptr = &amp;my_array[0];       /* 將指標指向陣列中的第一個整數*/</pre>
<p>接著就可以使用陣列索引或取值運算, 列出陣列.</p>
<p>下列程式可以用來展示此一應用:</p>
<p>----------- Program 2.1 -----------------------------------</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Program 2.1 from PTRTUT10.HTM   6/13/97 */
 
#include &lt;stdio.h&gt;
 
int my_array[] = {1,23,17,4,-5,100};
int *ptr;
 
int main(void)
{
    int i;
    ptr = &amp;my_array[0];     /* point our pointer to the first
                                      element of the array */
    printf("\n\n");
    for (i = 0; i &lt; 6; i++)
    {
      printf("my_array[%d] = %d   ",i,my_array[i]);   /*&lt;-- A */
      printf("ptr + %d = %d\n",i, *(ptr + i));        /*&lt;-- B */
    }
    return 0;
}</pre>
<p><a href="http://codepad.org/3fgCKs7N">在 codepad.org 執行 Program 2.1</a></p>
<p>編譯執行上列程式就可以仔細觀察 A 行與 B 行程式分別採用兩種方法列出陣列中的同一內容.</p>
<p>也可以清楚看到 B 行程式如何應用"取值"運算, 亦即, 首先在指標增量後, 在新的指標中取值. 將 B 行程式改為:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">printf("ptr + %d = %d\n",i, *ptr++);</pre>
<p><span>之後再執行, 接著改為:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">printf("ptr + %d = %d\n",i, *(++ptr));</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">再執行, 執行之前先判定結果, 並與實際執行結果進行比較.

在 C 語言, 可以利用 var_name 來替代 &amp;var_name[0], 因此在程式碼中寫成:</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">ptr = &amp;my_array[0];</pre>
<p><span>或:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">ptr = my_array;</pre>
<p>都會得到相同的結果.</p>
<p>因此許多參考書都寫道: 陣列的變數名稱就是指標. 但是比較好的想法則是: 陣列的變數名稱就是陣列中第一元件的位址. 許多初學者 (包含作者本人), 都會將其視為指標.</p>
<p>但是, 可以寫成:</p>
<p>ptr = my_array;</p>
<p>但是卻不能寫成:</p>
<p>my_array = ptr;</p>
<p>原因就是 ptr 為變數, 但是 my_array 卻是常數, 也就是說, my_array 第一元件的位址, 一旦在 my_array[] 完成宣告後, 就不可以改變.</p>
<p>先前曾討論的左值, 中引用 K&amp;R-2 中所言:</p>
<p>"物件為儲存區域的名稱, 而左值則為指向該物件的表示式."</p>
<p>這就衍生出一個有趣的議題. 因為 my_array 為儲存區域的代表名稱, 為何 my_array 在上面的指定敘述程式中, 卻不能用在左值區域?</p>
<p>為了說明這點, 可以將 my_array 視為"不可改變的左值".</p>
<p>上列範例可以將:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">ptr = &amp;my_array[0];</pre>
<p><span>改為:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">ptr = my_array;</pre>
<p>確認兩者會得到相同的結果.</p>
<p>至於 ptr 與 my_array 之間的差異, 有人將陣列變數名稱視為"常數指標". 為了充分了解所謂"常數"的真諦, 重回變數定義時的說明.</p>
<p>當變數宣告時, 用來存值的記憶體就必須加以配置. 這時變數可以透過兩個層面來看.</p>
<p>用在指定運算左邊時, 編譯器會視其為記憶位址, 用來指向右側所設定的值.</p>
<p>若被用在運算右邊時, 變數名稱會被解讀為存在該記憶體中的值.</p>
<p>有了以上的概念, 關注簡單的常數運算:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int i, k;
i = 2;</pre>
<p>其中 i 為存放 2 常數的變數, 並非直接在資料記憶區塊中指定, 而是直接存入程式記憶區塊.</p>
<p>當 k = i; 程式碼就會到 &amp;i 位址中抓取要複製到 k 的值, 而 i = 2; 只是將 2 放入程式碼, 而沒有取值的運作. 也就是說, k 與 i 都是物件, 但是 2 則非物件.</p>
<p>同理, 由於 my_array 為常數 (為位址值), 一旦編譯器設好用來存值得區域後, my_array[0] 存值得記憶體位址就已經確定, 因此可以使用:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">ptr = my_array;</pre>
<p>將此在程式區段中的常數位址設給 ptr, 其中並沒有牽涉到資料區段的取值操作.</p>
<p>這時就可進一步說明第一章程式 1.1. 中 (void *) 的應用. 由於指標可被用來指向各種資料型別. 除了可以指向整數, 也可以指向字元, 之後還會介紹指向結構與指向指標的指標變數.</p>
<p>由於在不同系統中的指標儲值大小會有差別, 並且指標的記憶體空間會隨著指向物件資料型別差異而有所不同.</p>
<p>因此若將長整數指給短整數資料型別變數時, 就會發生問題, 也可以將某一型別的指標變數指定給其他不同型別指標變數時, 產生問題.</p>
<p>為了克服此一問題, C 語言提供 void 這個空的指標資料型別.</p>
<p>假如將某一指標設定為:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">void *vptr;</pre>
<p>空指標可以視為通用指標. 由於 C 語言不允許整數型別指標與字元型別指標之間的資料交換或比較. 這時就可以透過空指標作為中介, 在特殊情況下在指標型別間進行資料轉換.</p>
<p>在第一章的 1.1 程式中, 就是使用空指標將整數指標轉成能與 %p 資料相符的格式.</p>
<p>下列各章, 也將透過此一概念進行資料轉換.</p>
<p>這裡列出許多技術資料給初學者, 首次閱讀時或許不很容易理解. 因此需要前後執行幾次程式, 看看結果, 並且仔細查驗這兩個例子中的程式碼與產出結果, 才會有所突破.</p>
<p>接下來, 將討論指標, 字元陣列與字串間的關係.</p>
<h3>ch3指標與字串</h3>
<p>字串的研究不僅對進一步理解指標與陣列的關聯有些幫助,也能用來彰顯某些標準 C 字串函數的使用. 最後也可以理解指標如何將資料傳給函式.</p>
<p>就 C 而言, 字串為字元所組成的陣列, 其他的語言則未必如此. 無論是 BASIC, Pascal 或是 Fortran 與其他幾種程式語言, 字串自有其資料類別. C 則不然, 字串之於 C 被表為以 0 位元 (寫為'\0').</p>
<p>這裡要以幾行程式碼作為開端, 來加以說明, 如下:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char my_string[40];

my_string[0] = 'T';
my_string[1] = 'e';
my_string[2] = 'd':
my_string[3] = '\0';</pre>
<p>或許沒有人會用這種方法來建立字串, 以空字元作為結尾. 根據 C 語言的定義, 字串為一組以空字元結尾的字元陣列. 注意這裡的所謂空字元與 "NULL" 不同. 空字元表為以跳脫序 '\0' 表示的"零"字元. 亦即佔了記憶體中的一個位元, 而 NULL 則為用來起始空指標的巨組程式.</p>
<p>NULL 在 C 編譯器中, 以 #define 在標頭檔案中宣告, 而 nul 則完全無法以 #define 宣告.</p>
<p>由於用上述程式來宣告字串非常累人, 因此 C 允許以多種方法來完成一項工作.</p>
<p>首先, 可以寫成</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char my_string[40] = {'T', 'e', 'd', '\0',};</pre>
<p><span>但是光打字就有些不方便, 因此也可以寫成:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char my_string[40] = "Ted";</pre>
<p>若使用的是雙引號, 而不是先前的單引號, 空字元 ('\0') 會自動被加在字串最後面.</p>
<p>上面的例子, 結果都相同. 編譯器會保留連續的 40 位元區塊來存放 Ted\0 這四個字元.</p>
<p>接著看看下列程式:</p>
<p>------------------program 3.1-------------------------------------</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Program 3.1 from PTRTUT10.HTM   6/13/97 */
 
#include &lt;stdio.h&gt;
 
char strA[80] = "A string to be used for demonstration purposes";
char strB[80];
 
int main(void)
{
 
    char *pA;     /* a pointer to type character */
    char *pB;     /* another pointer to type character */
    puts(strA);   /* show string A */
    pA = strA;    /* point pA at string A */
    puts(pA);     /* show what pA is pointing to */
    pB = strB;    /* point pB at string B */
    putchar('\n');       /* move down one line on the screen */
    while(*pA != '\0')   /* line A (see text) */
    {
        *pB++ = *pA++;   /* line B (see text) */
    }
    *pB = '\0';          /* line C (see text) */
    puts(strB);          /* show strB on screen */
    return 0;
}</pre>
<p>--------- end program 3.1 -------------------------------------</p>
<p><a href="http://codepad.org/VohQ499U">在 codepad.org 執行 Program 3.1</a></p>
<p>上述程式定義了兩個字元陣列, 各有 80 字元. 由於屬於全域變數, 一開始各字元都填入 '\0'. 然後, strA 前 42 個字元被放入所引用的字串內容.</p>
<p>接著的程式碼, 宣告兩個字元指標並將其字串顯示在螢幕. 將 pA 指標指向 strA, 也就是附註 strA[0] 的位址給變數 pA. 然後利用 puts() 函數顯示 pA 所指向的內容 puts() 函式的宣告為:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int puts(const char *s);</pre>
<p>現在先不用管 const, 傳給 puts() 函數的變數為指標. 其實是指標所對應的值. 而指標的值為其所指向的位址. 因此寫成 puts(strA), 表示輸入變數為 strA[0] 的位址.</p>
<p>同理, 當程式寫 puts(pA); 也是以相同的位址當作輸入, 因為已經透過</p>
<p>pA = strA;</p>
<p>將位址傳給 pA</p>
<p>因此程式執行到 while() 指令中的 A 行時, A 行內容為:</p>
<p>當 pA 所指向的字元並非 nul 字元時 (也就是'\0'), 執行其內容:</p>
<p>而 B 行程式則表示: 將 pA 指向的字元複製給 pB 所指向的字元, 接著增量 pA 後可以指向下一字元, 而 pB 則會指向下一個記憶體空間.</p>
<p>完成最後一個字元複製後, pA 會指向空字元, 也會終止迴圈的執行.</p>
<p>其中空字元並沒有複製, 但由於 C 中的字串一定要以空字元結尾, 所以在 C 行程式中再補上空字元.</p>
<p>執行此一程式時, 當使用者透過除錯器看著 strA, strB, pA 與 pB 一步步執行, 將非常具有教育意義.</p>
<p>It is even more educational if instead of simply defining strB[] as has been done above, initialize it also with something like:</p>
<p>更有意思的是, 若不將 strB[] 按上述方法定義時, 而是將其起始值設為:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">strB[80] = "12345678901234567890123456789012345678901234567890"</pre>
<p>讓其數字個數大於 strA 的長度, 然後一步步看著這些變數設定數值. 大家一定得親自做做看.</p>
<p>接著再回到 puts() 的原型, 運用 "const" 作為某一參數的宣告飾詞時, 主要在告訴使用者, 該函式無法改變其由 s 所指向的字串值, 意即, 程式會將該字串視為常數.</p>
<p>誠然, 上述程式展示了複製字串的一種簡單方式. 一旦確實了解上述程式的用法, 接著將自行編寫可以取代標準 strcpy() 的 C 標準函式, 程式如下:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char *my_strcpy(char dest[], char source[])
{
    int i = 0;
    while (source[i] != '\0')
    {
        dest[i] = source[i];
        i++;
    }
    dest[i] = '\0';
    return dest;
}</pre>
<p>在此一程式中, 同樣運用了指標的傳值.</p>
<p>承上述內容, 若將函式寫成可以接受兩個字元指標變數輸入, 也就是位址, 就可以將上述程式改寫為:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int main(void)
{
    my_strcpy(strB, strA);
    puts(strB);
}</pre>
<p><span>雖然與標準 C 的用法有些不同, 採用了下列原型定義:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char *my_strcpy(char *destination, const char *source);</pre>
<p><span>之所以使用 "const" 飾詞, 主要在確定該函式無法變更指向來源指標的數值. 此點可從上述函式的修改得到印證, 其原型變數, 如 "const" 飾詞所示. 接著在函式中, 增加一行試圖更改該變數由來源指標所指向的值, 意即:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">*source = 'X';</pre>
<p>試著將該字串的第一個字元, 變更為 X. 前面的 const 飾詞就會讓這一行程式產生錯誤, 執行完後就會更加清楚有關 const 變數的使用.</p>
<p>接著, 繼續探討上述程式的內涵, 第一步, 將 ptr++ 解讀為由 ptr 指標傳回值後的增量. 主要與運算子的次序有關. 假如寫成 (ptr)++, 表示增量的部分, 並非指標, 而是該指標所指向值的增量. 也就是說, 在上述程式中, 若對第一個字元 'T' 增量, 其值就會變成 'U'. 使用者可以自行寫程式來印證此一結果.</p>
<p>由於字串只不過就是字元所組合而成的陣列, 並在最後一個字元補上 '\0'. 上面所進行的是用來複製陣列. 這些字元陣列的運算技巧, 也可以應用到整數陣列或浮點數陣列. 但是在這些應用中, 陣列的尾端, 並不會補上 nul 字元, 而可以放進某特定值的內容, 來表示其為終點. 例如, 可以在複製正整數時, 在尾數放入一個負值的整數來標示終點. 或者, 寫一個函式, 可以複製字串以外的陣列及其陣列位址, 就如同下列原型所示:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">void int_copy(int *ptrA, int *ptrB, int nbr);</pre>
<p>其中 nbr 為要進行複製的整數值. 試著寫一個可以用來複製整數陣列的 int_copy() 函式, 看看是否能夠正常運作.</p>
<p>如此, 就可以使用函式來處理大陣列. 例如, 有一帶有 5000 個整數的陣列需要處理, 只要將該陣列的位址輸入該函式 (視情形, 可以加上其他相關變數, 如上述程式中的 nbr 變數), 而不需要輸入陣列本身, 意即, 整個陣列值並沒有在堆疊中複製後進行輸入的動作, 而只送出其位址.</p>
<p>此一過程與輸入某一整數給某一函式不同. 輸入整數時, 必須複製該整數, 也就是取得該整數的值, 然後放入某一堆疊當中. 這時, 該函式的處理並不影響原始的整數值, 而若以陣列及指標進行處理, 可以將變數位址輸入, 直接處理原始變數的值.</p>
<h3>ch4更多關於字串的用法</h3>
<p>好的, 在短短的時間裏, 已經介紹了不少東西! 接著再看一次第三章中有關字串複製的部分, 但是採不同的方法. 以下列函式來看:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char *my_strcpy(char dest[], char source[])
{
    int i = 0;
    while (source[i] != '\0')
    {
        dest[i] = source[i];
        i++;
    }
    dest[i] = '\0';
    return dest;
}</pre>
<p>之前曾說過, 字串就是字元所組成的陣列. 這裡我們利用陣列表示而非指標表示, 來進行資料的實質複製. 結果會與之前相同, 亦即, 採此一方法的字串複製, 其結果依然正確. 這也衍生出接下來要討論的有趣論點.</p>
<p>由於變數透過值進行傳遞, 可經由前述之字元指標或陣列名稱進行, 其間真正傳遞的則是每一陣列中第一個元素的位址. 亦即, 變數數值的傳遞, 可透過字元指標或陣列名稱來代表此一變數. 也可以說, source[i] 其實與 *(p+i) 的用法一樣.</p>
<p>事實上, 這是正確的, 亦即 a[i] 可以利用 *(a+i) 來替代, 而不會產生任何問題. 換言之, 編譯器針對這兩種情形, 會產生相同的編碼. 因此, 指標算術其實與陣列索引編碼相同. 兩種語法會產生相同結果.</p>
<p>但是這並非說, 指標與陣列是相同的東西, 其實不然. 這裡只是說, 利用陣列來進行特定元素辨識, 可以採用兩種不同的語法, 其一為採用陣列索引, 而另一種方法則是利用指標算術, 會得到相同的結果.</p>
<p>接著, 注意最後的表示式, (a+i) 的部分利用簡單的加號 + 與 C 的語法, 表示式子可以交換, 亦即 (a+i) 與 (i+a) 完全相同. 因此可以將 (i+a) 簡化為 (a+i).</p>
<p>但是 *(i+a) 可能來自 i[a]! 綜合上述, 或許會懷疑若:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char a[20];
int i;</pre>
<p><span>寫成:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">a[3] = 'x';</pre>
<p><span>其實與下列表示式, 其實是一樣的.</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">3[a] = 'x';</pre>
<p>試試看! 設定一個字元陣列, 內存為整數或長整數等. 對其第三或第四元素, 以傳統方式, 給定特殊值, 接著將值印出加以確認. 然後如前述, 將陣列表示式反轉過來, 一個好編譯器將會毫無疑問的給出相同的結果, 僅只出於好奇, 別無其他用意.</p>
<p>程式範例:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
// 每一個 C 程式都必須要有一個小寫的 main()函式
int main()
{
    // 陣列與指標的應用
    char a[20];
    int i;
    a[3] = 'x';
    printf("%c\n",a[3]);
    printf("%c\n",3[a]);
    printf("%c\n",*(a+3));
    printf("%c\n",*(3+a));
    return 0;
}</pre>
<p><a href="http://codepad.org/38P12lsx">執行上述程式</a></p>
<p>接著, 來看前面給的函數, 寫成:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">dest[i] = source[i];</pre>
<p><span>由於已知陣列索引與指標算術會得到相同的結果, 因此也可以寫成:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">*(dest + i) = *(source + i);</pre>
<p>但是, 需要對每一個值分別加上 i. 加法, 一般而言, 會比索引增量 (例如採用 ++ 運算符號的 i++) 耗費更多時間. 或許對現在最佳化的編譯器來說, 不一定就是如此, 但是採用指標通常比陣列索引來得快些.</p>
<p>另一個可以加速指標運算的方法, 將:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">	
while (*source != '\0')</pre>
<p><span>簡化為:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">while (*source)</pre>
<p>兩種情形都會讓括號中為零 (FALSE).</p>
<p>這裡可實驗看看, 以指標的方法來寫程式. 用來處理字串應該不錯. 可以將下列標準函式改寫成自己的版本:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">strlen();
strcat();
strchr();</pre>
<p>或者其他在系統中的函式.</p>
<p>接下來的章節, 還會再探討字串及其處理. 接下來先討論一下 structures (結構).</p>
<h3>ch5指標與結構</h3>
<p>也許你已經知道, 可以利用結構的形式來宣告帶有不同資料型別的資料區塊. 例如, 人事檔案可能包含下列結構:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">struct tag {
    char lname[20];        /* 姓 */
    char fname[20];        /* 名 */
    int age;               /* 年齡 */
    float rate;            /* 例如: 每小時 100 元 */
};</pre>
<p>假如在磁片檔案中有許多這樣的資料, 當我們需要一筆筆讀出, 並且分別列出姓名, 以做成資料表格. 其他資料並不需要印出. 具體做法, 可以利用函式呼叫, 透過指向結構的指標作為輸入, 就可以完成處理. 這裡只利用一個結構進行示範, 並且主要在編寫函式, 而非讀檔. 這裡已經假設您知道如何進行讀檔.</p>
<p>複習一下, 我們可以利用點運算子來擷取結構成員, 正如:</p>
<p>--------------- program 5.1 -----------------</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Program 5.1 from PTRTUT10.HTM     6/13/97 */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
 
struct tag {
    char lname[20];      /* last name */
    char fname[20];      /* first name */
    int age;             /* age */
    float rate;          /* e.g. 12.75 per hour */
};
 
struct tag my_struct;       /* declare the structure my_struct */
 
int main(void)
{
    strcpy(my_struct.lname,"Jensen");
    strcpy(my_struct.fname,"Ted");
    printf("\n%s ",my_struct.fname);
    printf("%s\n",my_struct.lname);
    return 0;
}</pre>
<p>-------------- end of program 5.1 --------------</p>
<p><a href="http://codepad.org/yKWdNwEE">執行 Program 5.1</a></p>
<p>或許這裏所使用的結構與一般 C 程式所使用的相比還要小, 為了驗證也可以加入:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">date_of_hire;                  (未顯示資料型別)
date_of_last_raise;
last_percent_increase;
emergency_phone;
medical_plan;
Social_S_Nbr;
等等.....</pre>
<p>假如員工的數量眾多, 應該會採用函式進行資料處理. 例如, 將結構輸入該函式, 就能利用函式印出員工姓名. 但是在最原始的 C (Kernighan &amp; Ritchie, 第一版), 無法輸入結構, 只能輸入指向結構的指標. 在 ANSI C 中, 已經允許利用結構作為函式輸入. 而這裡為了進行更多有關指標的學習, 並不直接採用結構.</p>
<p>總之, 假如輸入整個結構, 就如同必須在函式呼叫時複製結構內容, 在仍然使用堆疊的系統中, 就等同將整個結構資料送入堆疊中. 針對大型結構時, 可能就會造成問題. 若能只輸入指標, 就可使用最少的堆疊空間.</p>
<p>因此這裡主要在談指標, 因此接著來看如何將指向結構的指標變數輸入函式當中.</p>
<p>以上面的情況為例, 建立一個能夠接受指標變數 (指向結構) 的函式, 其中我們只想要擷取該結構的部分成員. 例如, 只要印出範例結構中的人員姓名.</p>
<p>好, 先前我們已經知道如何宣告指向結構的指標變數 tag. 接著就可以利用 tag 結構, 來宣告指標變數:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">struct tag *st_ptr;</pre>
<p><span>並且可以用來指向範例中的結構:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">st_ptr = &amp;my_struct;</pre>
<p><span>接下來, 可以利用指標的分割參照, 來指定特定成員. 但是應該如何利用指標的分割參照來指向結構? 假如要利用指標來設定人員的年紀, 可以寫成:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">(*st_ptr).age = 63;</pre>
<p>仔細看清楚. 此一設定表示, 若將括號中 st_ptr 所指向的內容換成 my_struct, 就會與my_struct.age 相同.</p>
<p>但是, 這樣經常會被用到的表示式, 就被設定為與下列表示式涵義相同:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">st_ptr-&gt;age = 63;</pre>
<p>了解了之後, 參考下列程式:</p>
<p>------------ program 5.2 ---------------------</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Program 5.2 from PTRTUT10.HTM   6/13/97 */
 
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
 
struct tag{                     /* the structure type */
    char lname[20];             /* last name */
    char fname[20];             /* first name */
    int age;                    /* age */
    float rate;                 /* e.g. 12.75 per hour */
};
 
struct tag my_struct;           /* define the structure */
void show_name(struct tag *p);  /* function prototype */
 
int main(void)
{
    struct tag *st_ptr;         /* a pointer to a structure */
    st_ptr = &amp;my_struct;        /* point the pointer to my_struct */
    strcpy(my_struct.lname,"Jensen");
    strcpy(my_struct.fname,"Ted");
    printf("\n%s ",my_struct.fname);
    printf("%s\n",my_struct.lname);
    my_struct.age = 63;
    show_name(st_ptr);          /* pass the pointer */
    return 0;
}
 
void show_name(struct tag *p)
{
    printf("\n%s ", p-&gt;fname);  /* p points to a structure */
    printf("%s ", p-&gt;lname);
    printf("%d\n", p-&gt;age);
}</pre>
<p>-------------------- end of program 5.2 ----------------</p>
<p><a href="http://codepad.org/BTNjPXRy">執行 Program 5.2</a></p>
<p>這裡要了解不少東西. 讀者必須實際執行一下上面的程式, 並且利用除錯器一步步觀察 my_struct 與 p 在主函式執行流程中, 才能實際了解函式執行的內容.</p>
<h3>ch6字串與字串陣列</h3>
<p>接著, 再回到字串的用法. 下面的例子, 都以全域的方式運用, 亦即, 在任何函式之外發生作用, 包括主函式.</p>
<p>先前的章節曾經談過:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char my_string[40] = "Ted";</pre>
<p>將會配置足夠存放 40 個位元組陣列的空間來存放該變數的值, 並且在最前面的 4 個位元組中放入所設定的字元 (前面三個位元組放入雙引號中的字元, 而最後則放入 '\0')</p>
<p>而實際上, 也可以將 "Ted" 這個字串寫成:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char my_name[] = "Ted";</pre>
<p>編譯器屆時就會計算字元個數, 並且預留最後的 null 字元, 以便能將全部四個字元存入記憶體, 並傳回存放字元的陣列名稱, 這裡採用 my_name.</p>
<p>在某些程式中, 也可以寫成:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char *my_name = "Ted";</pre>
<p>這種方式, 與先前兩種方法有何不同? 答案是: 當然不同. 採用陣列來存放四個位元組是將資料放在靜態記憶體區塊, 每一個字元的最後都會放入 null 字元. 但是若採用指標的方式, 也是需要相同的四個位元組, 並加上 N 個位元組來存放 my_name 這個指標變數 (N 取決於系統, 但通常至少 2 位元組, 也可能是 4 個以上)</p>
<p>陣列的表示法中, my_name 是 &amp;myname[0] 的縮寫, 也就是第一個陣列元素的位址. 由於該陣列位址在執行期間是固定的, 因此不會改變 (不是變數). 而若採用指標的方式, my_name 則是變數. 因此採用指標是較好的方式, 當然也取決於隨後要如何應用這個變數.</p>
<p>若再進一步觀察採用不同方式宣告後, 在函數內將如何發生變化, 這與處在任何函式外的全域用法有很大的不同.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">void my_function_A(char ptr) { char a[] = "ABCDE" . . } void my_function_B(char ptr)</pre>
<p>在 my_function_A 的案例中, 陣列 a[] 的值, 就是存放其中的資料. 陣列可視為以 ABCDE 值進行啟始化. 而在 my_function_B 的案例, cp 指標值才代表所存放的資料. 指標的啟始是指向 FGHIJ 字串. 在兩個函式內, 變數定義都是局部, 因此 ABCDE 字串存在指標變數所對應值的堆疊中, 而 FGHIJ 則可能存在任何地方. 在我的系統中, 是存在資料區段中.</p>
<p>此外, 採陣列變數自動起始, 就如同 my_function_A 中所示, 在舊的 K&amp;R C 中是無法使用的, 只能用在 ANSI C 的環境中. 這點在考量程式的可攜或向後相容時就顯得很重要.</p>
<p>只要討論有關指標與陣列的關係與差異時, 就需要更進一步討論多維度陣列. 例如下列陣列:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char multi[5][10];</pre>
<p><span>這代表什麼? 讓我們看看.</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">char multi[5][10];</pre>
<p>若將有底線的部分視為陣列的變數名稱. 先前的 char 代表資料型別, 而隨後的 [10] 則代表擁有時個字元的陣列. 但是 multi[5] 本身又是一個具有 5 個成員的陣列, 而每一個都帶有 10 個字元的陣列. 亦即, 總共有 5 個陣列各自帶有 10 個字元的陣列.</p>
<p>假設將這個二維的陣列填入資料, 在記憶體中, 可以表示成為五個各自分離的陣列:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">multi[0] = {'0','1','2','3','4','5','6','7','8','9'}
multi[1] = {'a','b','c','d','e','f','g','h','i','j'}
multi[2] = {'A','B','C','D','E','F','G','H','I','J'}
multi[3] = {'9','8','7','6','5','4','3','2','1','0'}
multi[4] = {'J','I','H','G','F','E','D','C','B','A'}</pre>
<p><span>同時, 個別元素可以再表示為:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">multi[0][3] = '3'
multi[1][7] = 'h'
multi[4][0] = 'J'</pre>
<p><span>由於陣列在記憶體中是連續的資料, 因此在真實的記憶區段中, 就成為:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">0123456789abcdefghijABCDEFGHIJ9876543210JIHGFEDCBA
^
|_____ starting at the address &amp;multi[0][0]</pre>
<p>請注意, 這裡並沒有將 multi[0] 寫成"0123456789". 因為若寫成這樣, 電腦會在最 後面補上字串結束用的 '\0', 因為雙引號中間的資料會被當作字串. 這樣, 每一個變數 就會帶有 11 個字元, 而非該有的 10 個字元.</p>
<p>前面的用意在昭示記憶體如何處理二維陣列. 亦即, 以一個二維字元陣列來存放資料, 而不是存成字串陣列.</p>
<p>接著, 編譯器知道陣列中需要多少行, 因此會用 mylti +1 作為 'a' 在第二列之首, 也就是每一列會加上 10, 結合所指的列數來取得正確的資料.</p>
<p>若處理的數值為整數與相同維數的陣列, 在我使用的機器上, 編譯器會加上 10sizeof(int), 而得到 20. 因此第四列第九行的位址, 表示為指標, 將會是 &amp;multi[3][0] 或 (multi + 3). 若希望取得第四列第二個數值, 就可以在此位址上加上 1, 得到下列結果:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">*(*(multi + 3) + 1)</pre>
<p><span>再繼續探究, 可知:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">*(*(multi + row) + col)    與

multi[row][col]            可得到相同的結果.</pre>
<p>下列程式採用整數數列而非字元陣列來驗證這個結果:</p>
<p>------------------- program 6.1 ----------------------</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#define ROWS 5
#define COLS 10
 
int multi[ROWS][COLS];
 
int main(void)
{
    int row, col;
    for (row = 0; row &lt; ROWS; row++)
    {
        for (col = 0; col &lt; COLS; col++)
        {
            multi[row][col] = row*col;
        }
    }
 
    for (row = 0; row &lt; ROWS; row++)
    {
        for (col = 0; col &lt; COLS; col++)
        {
            printf("\n%d  ",multi[row][col]);
            printf("%d ",*(*(multi + row) + col));
        }
    }
 
    return 0;
}</pre>
<p>----------------- end of program 6.1 ---------------------</p>
<p><a href="http://codepad.org/flzRLrx1">執行 Program 6.1</a></p>
<p>由於在陣列程式版本中進行了兩次交互參照取值, 二維陣列的名稱就如同指向陣列的指標. 至於三維陣列則用來處理陣列中陣列所指向的陣列, 因此也等同是指向陣列中陣列的指標. 但這裡的說明將陣列所佔記憶體區段以陣列來加以表示, 因此所處理的記憶體位址為常數而非變數. 亦即所討論的是固定的位址而非變數指標.</p>
<p>上述的取值函式允許從陣列中, 以無需變更位址數值的方式從陣列中取出任何數值 (例如, 以 multi[0][0] 的位址取 multi 符號所對應的值)</p>
<h3>ch7多維陣列</h3>
<p>在前述章節中, 假如給定:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define ROWS 5
#define COLS 10

int multi[ROWS][COLS];</pre>
<p><span>若要擷取此 multi 陣列的元素, 可以透過:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">multi[row][col]</pre>
<p>或</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">((multi + row) + col)</pre>
<p><span>為能更充分了解, 可以將:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">*(multi + row)</pre>
<p><span>以 X 取代如下:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">*(X + col)</pre>
<p>這樣, 可以看出 X 就如同指標, 因為此一表示式利用指標的取值運算子, 且可知 col 為一個整數. 這裡所使用的算術稱為指標算術. 換言之, 這是針對整數陣列, 指向 X+col+1 的位址值, 一定會大於 X+col 位址, 正好是 sizeof(int) 的整數值大小.</p>
<p>因為記憶體配置採用二維陣列, 因此上述所採用的 multi+row 到 multi+row+1 的增量, 將會等於下一列所指向的值, 也就是兩者增量為 COLS*sizeof(int).</p>
<p>也就是說 ((multi + row) + col) 能在執行時正確計算的條件, 是編譯器必須將 COLS 的數值考慮進去 (因為是兩個維度的記憶體配置). 正因為如此, 可以如上述說明, 採指標表示式或陣列表示式 multi[row][col].</p>
<p>因此, 為了計算任何一個表示式, 共有五個數值必須先知道:</p>
<p>陣列的第一個元素的位址, 從 multi 表示式傳回, 亦即陣列名稱.</p>
<p>陣列元素的型別所佔記憶體空間大小, 在此為 sizeof(int).</p>
<p>陣列的第二維度大小. 第一維度索引值 row, 以及第二維度索引值 col 等.</p>
<p>有了這些值, 就可以設計函式來處理前述陣列宣告及運算. 例如, 可以將陣列 multi 元素的值都設為 1.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">void set_value(int m_array[][COLS])
{
    int row, col;
    for (row = 0; row &lt; ROWS; row++)
    {
        for (col = 0; col &lt; COLS; col++)
        {
            m_array[row][col] = 1;
        }
    }
}</pre>
<p><span>若要呼叫此一函式, 可以採用:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">set_value(multi);</pre>
<p>Now, within the function we have used the values #defined by ROWS and COLS that set the limits on the for loops. But, these #defines are just constants as far as the compiler is concerned, i.e. there is nothing to connect them to the array size within the function. row and col are local variables, of course. The formal parameter definition permits the compiler to determine the characteristics associated with the pointer value that will be passed at run time.</p>
<p>We really don’t need the first dimension and, as will be seen later, there are occasions where we would prefer not to define it within the parameter definition, out of habit or consistency, I have not used it here. But, the second dimension must be used as has been shown in the expression for the parameter. The reason is that we need this in the evaluation of m_array[row][col] as has been described.</p>
<p>While the parameter defines the data type (int in this case) and the automatic variables for row and column are defined in the for loops, only one value can be passed using a single parameter. In this case, that is the value of multi as noted in the call statement, i.e. the address of the first element, often referred to as a pointer to the array. Thus, the only way we have of informing the compiler of the 2nd dimension is by explicitly including it in the parameter definition.</p>
<p>In fact, in general all dimensions of higher order than one are needed when dealing with multi-dimensional arrays. That is if we are talking about 3 dimensional arrays, the 2nd and 3rd dimension must be specified in the parameter definition.</p>
<h3>ch8指向陣列的指標</h3>
<p>Pointers, of course, can be "pointed at" any type of data object, including arrays. While that was evident when we discussed program 3.1, it is important to expand on how we do this when it comes to multi-dimensional arrays. To review, in Chapter 2 we stated that given an array of integers we could point an integer pointer at that array using:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int *ptr;
ptr = &amp;my_array[0];       /* point our pointer at the first
                             integer in our array */</pre>
<p>As we stated there, the type of the pointer variable must match the type of the first element of the array. In addition, we can use a pointer as a formal parameter of a function which is designed to manipulate an array. e.g.</p>
<p>Given:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int array[3] = {1, 5, 7};
void a_func(int *p);</pre>
<p>Some programmers might prefer to write the function prototype as:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">void a_func(int p[]);</pre>
<p>which would tend to inform others who might use this function that the function is designed to manipulate the elements of an array. Of course, in either case, what actually gets passed is the value of a pointer to the first element of the array, independent of which notation is used in the function prototype or definition. Note that if the array notation is used, there is no need to pass the actual dimension of the array since we are not passing the whole array, only the address to the first element.</p>
<p>We now turn to the problem of the 2 dimensional array. As stated in the last chapter, C interprets a 2 dimensional array as an array of one dimensional arrays. That being the case, the first element of a 2 dimensional array of integers is a one dimensional array of integers. And a pointer to a two dimensional array of integers must be a pointer to that data type. One way of accomplishing this is through the use of the keyword "typedef". typedef assigns a new name to a specified data type. For example:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">typedef unsigned char byte;
</pre>
<p>causes the name byte to mean type unsigned char. Hence</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">byte b[10];     would be an array of unsigned characters.</pre>
<p>Note that in the typedef declaration, the word byte has replaced that which would normally be the name of our unsigned char. That is, the rule for using typedef is that the new name for the data type is the name used in the definition of the data type. Thus in:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">typedef int Array[10];
</pre>
<p>Array becomes a data type for an array of 10 integers. i.e. Array my_arr; declares my_arr as an array of 10 integers and Array arr2d[5]; makes arr2d an array of 5 arrays of 10 integers each.</p>
<p>Also note that Array p1d; makes p1d a pointer to an array of 10 integers. Because p1d points to the same type as arr2d, assigning the address of the two dimensional array arr2d to p1d, the pointer to a one dimensional array of 10 integers is acceptable. i.e. p1d = &amp;arr2d[0]; or p1d = arr2d; are both correct.</p>
<p>Since the data type we use for our pointer is an array of 10 integers we would expect that incrementing p1d by 1 would change its value by 10sizeof(int), which it does. That is, sizeof(p1d) is 20. You can prove this to yourself by writing and running a simple short program.</p>
<p>Now, while using typedef makes things clearer for the reader and easier on the programmer, it is not really necessary. What we need is a way of declaring a pointer like p1d without the need of the typedef keyword. It turns out that this can be done and that</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int (*p1d)[10];</pre>
<p>is the proper declaration, i.e. p1d here is a pointer to an array of 10 integers just as it was under the declaration using the Array type. Note that this is different from</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int *p1d[10];</pre>
<p>which would make p1d the name of an array of 10 pointers to type int.</p>
<h3>ch9指標與動態記憶體配置</h3>
<p>There are times when it is convenient to allocate memory at run time using malloc(), calloc(), or other allocation functions. Using this approach permits postponing the decision on the size of the memory block need to store an array, for example, until run time. Or it permits using a section of memory for the storage of an array of integers at one point in time, and then when that memory is no longer needed it can be freed up for other uses, such as the storage of an array of structures.</p>
<p>When memory is allocated, the allocating function (such as malloc(), calloc(), etc.) returns a pointer. The type of this pointer depends on whether you are using an older K&amp;R compiler or the newer ANSI type compiler. With the older compiler the type of the returned pointer is char, with the ANSI compiler it is void.</p>
<p>If you are using an older compiler, and you want to allocate memory for an array of integers you will have to cast the char pointer returned to an integer pointer. For example, to allocate space for 10 integers we might write:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int *iptr;
iptr = (int *)malloc(10 * sizeof(int));
if (iptr == NULL)

{ .. ERROR ROUTINE GOES HERE .. }</pre>
<p>If you are using an ANSI compliant compiler, malloc() returns a void pointer and since a void pointer can be assigned to a pointer variable of any object type, the (int *) cast shown above is not needed. The array dimension can be determined at run time and is not needed at compile time. That is, the 10 above could be a variable read in from a data file or keyboard, or calculated based on some need, at run time.</p>
<p>Because of the equivalence between array and pointer notation, once iptr has been assigned as above, one can use the array notation. For example, one could write:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int k;
for (k = 0; k &lt; 10; k++)
   iptr[k] = 2;</pre>
<p>to set the values of all elements to 2.</p>
<p>Even with a reasonably good understanding of pointers and arrays, one place the newcomer to C is likely to stumble at first is in the dynamic allocation of multi-dimensional arrays. In general, we would like to be able to access elements of such arrays using array notation, not pointer notation, wherever possible. Depending on the application we may or may not know both dimensions at compile time. This leads to a variety of ways to go about our task.</p>
<p>As we have seen, when dynamically allocating a one dimensional array its dimension can be determined at run time. Now, when using dynamic allocation of higher order arrays, we never need to know the first dimension at compile time. Whether we need to know the higher dimensions depends on how we go about writing the code. Here I will discuss various methods of dynamically allocating room for 2 dimensional arrays of integers.</p>
<p>First we will consider cases where the 2nd dimension is known at compile time.</p>
<p>METHOD 1:</p>
<p>One way of dealing with the problem is through the use of the typedef keyword. To allocate a 2 dimensional array of integers recall that the following two notations result in the same object code being generated:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">multi[row][col] = 1;     *(*(multi + row) + col) = 1;</pre>
<p>It is also true that the following two notations generate the same code:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">multi[row]            *(multi + row)</pre>
<p>Since the one on the right must evaluate to a pointer, the array notation on the left must also evaluate to a pointer. In fact multi[0] will return a pointer to the first integer in the first row, multi[1] a pointer to the first integer of the second row, etc. Actually, multi[n] evaluates to a pointer to that array of integers that make up the n-th row of our 2 dimensional array.</p>
<p>That is, multi can be thought of as an array of arrays and multi[n] as a pointer to the n-th array of this array of arrays. Here the word pointer is being used to represent an address value. While such usage is common in the literature, when reading such statements one must be careful to distinguish between the constant address of an array and a variable pointer which is a data object in itself. Consider now:</p>
<p>--------------- Program 9.1 --------------------------------</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Program 9.1 from PTRTUT10.HTM  6/13/97 */
 
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
 
#define COLS 5
 
typedef int RowArray[COLS];
RowArray *rptr;
 
int main(void)
{
    int nrows = 10;
    int row, col;
    rptr = malloc(nrows * COLS * sizeof(int));
    for (row = 0; row &lt; nrows; row++)
    {
        for (col = 0; col &lt; COLS; col++)
        {
            rptr[row][col] = 17;
        }
    }
 
    return 0;
}</pre>
<p>------------- End of Prog. 9.1 --------------------------------</p>
<p><a href="http://codepad.org/0TrvKYko">執行 Program 9.1</a></p>
<p>Here I have assumed an ANSI compiler so a cast on the void pointer returned by malloc() is not required. If you are using an older K&amp;R compiler you will have to cast using:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">rptr = (RowArray *)malloc(.... etc.
</pre>
<p>Using this approach, rptr has all the characteristics of an array name name, (except that rptr is modifiable), and array notation may be used throughout the rest of the program. That also means that if you intend to write a function to modify the array contents, you must use COLS as a part of the formal parameter in that function, just as we did when discussing the passing of two dimensional arrays to a function.</p>
<p>METHOD 2:</p>
<p>In the METHOD 1 above, rptr turned out to be a pointer to type "one dimensional array of COLS integers". It turns out that there is syntax which can be used for this type without the need of typedef. If we write:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int (*xptr)[COLS];</pre>
<p>the variable xptr will have all the same characteristics as the variable rptr in METHOD 1 above, and we need not use the typedef keyword. Here xptr is a pointer to an array of integers and the size of that array is given by the #defined COLS. The parenthesis placement makes the pointer notation predominate, even though the array notation has higher precedence. i.e. had we written</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int *xptr[COLS];</pre>
<p>we would have defined xptr as an array of pointers holding the number of pointers equal to that #defined by COLS. That is not the same thing at all. However, arrays of pointers have their use in the dynamic allocation of two dimensional arrays, as will be seen in the next 2 methods. METHOD 3:</p>
<p>Consider the case where we do not know the number of elements in each row at compile time, i.e. both the number of rows and number of columns must be determined at run time. One way of doing this would be to create an array of pointers to type int and then allocate space for each row and point these pointers at each row. Consider:</p>
<p>-------------- Program 9.2 ------------------------------------</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Program 9.2 from PTRTUT10.HTM   6/13/97 */
 
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
 
int main(void)
{
    int nrows = 5;     /* Both nrows and ncols could be evaluated */
    int ncols = 10;    /* or read in at run time */
    int row;
    int **rowptr;
    rowptr = malloc(nrows * sizeof(int *));
    if (rowptr == NULL)
    {
        puts("\nFailure to allocate room for row pointers.\n");
        exit(0);
    }
 
    printf("\n\n\nIndex   Pointer(hex)   Pointer(dec)   Diff.(dec)");
 
    for (row = 0; row &lt; nrows; row++)
    {
        rowptr[row] = malloc(ncols * sizeof(int));
        if (rowptr[row] == NULL)
        {
            printf("\nFailure to allocate for row[%d]\n",row);
            exit(0);
        }
        printf("\n%d         %p         %d", row, rowptr[row], rowptr[row]);
        if (row &gt; 0)
        printf("              %d",(int)(rowptr[row] - rowptr[row-1]));
    }
 
    return 0;
}</pre>
<p>--------------- End 9.2 ------------------------------------</p>
<p><a href="http://codepad.org/fkwhY5YO">執行 Program 9.2</a></p>
<p>In the above code rowptr is a pointer to pointer to type int. In this case it points to the first element of an array of pointers to type int. Consider the number of calls to malloc():</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">To get the array of pointers             1     call
To get space for the rows                5     calls
                                      -----
                 Total                   6     calls</pre>
<p>If you choose to use this approach note that while you can use the array notation to access individual elements of the array, e.g. rowptr[row][col] = 17;, it does not mean that the data in the "two dimensional array" is contiguous in memory. You can, however, use the array notation just as if it were a continuous block of memory. For example, you can write:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">rowptr[row][col] = 176;</pre>
<p>just as if rowptr were the name of a two dimensional array created at compile time. Of course row and col must be within the bounds of the array you have created, just as with an array created at compile time. If you want to have a contiguous block of memory dedicated to the storage of the elements in the array you can do it as follows:</p>
<p>METHOD 4:</p>
<p>In this method we allocate a block of memory to hold the whole array first. We then create an array of pointers to point to each row. Thus even though the array of pointers is being used, the actual array in memory is contiguous. The code looks like this: ----------------- Program 9.3 -----------------------------------</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Program 9.3 from PTRTUT10.HTM   6/13/97 */
 
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
 
int main(void)
{
    int **rptr;
    int *aptr;
    int *testptr;
    int k;
    int nrows = 5;     /* Both nrows and ncols could be evaluated */
    int ncols = 8;    /* or read in at run time */
    int row, col;
 
    /* we now allocate the memory for the array */
 
    aptr = malloc(nrows * ncols * sizeof(int));
    if (aptr == NULL)
    {
        puts("\nFailure to allocate room for the array");
        exit(0);
    }
 
    /* next we allocate room for the pointers to the rows */
 
    rptr = malloc(nrows * sizeof(int *));
    if (rptr == NULL)
    {
        puts("\nFailure to allocate room for pointers");
        exit(0);
    }
 
    /* and now we 'point' the pointers */
 
    for (k = 0; k &lt; nrows; k++)
    {
        rptr[k] = aptr + (k * ncols);
    }
 
    /* Now we illustrate how the row pointers are incremented */
    printf("\n\nIllustrating how row pointers are incremented");
    printf("\n\nIndex   Pointer(hex)  Diff.(dec)");
 
    for (row = 0; row &lt; nrows; row++)
    {
        printf("\n%d         %p", row, rptr[row]);
        if (row &gt; 0)
        printf("              %d",(rptr[row] - rptr[row-1]));
    }
    printf("\n\nAnd now we print out the array\n");
    for (row = 0; row &lt; nrows; row++)
    {
        for (col = 0; col &lt; ncols; col++)
        {
            rptr[row][col] = row + col;
            printf("%d ", rptr[row][col]);
        }
        putchar('\n');
    }
 
    puts("\n");
 
    /* and here we illustrate that we are, in fact, dealing with
       a 2 dimensional array in a contiguous block of memory. */
    printf("And now we demonstrate that they are contiguous in memory\n");
 
    testptr = aptr;
    for (row = 0; row &lt; nrows; row++)
    {
        for (col = 0; col &lt; ncols; col++)
        {
            printf("%d ", *(testptr++));
        }
        putchar('\n');
    }
 
    return 0;
}</pre>
<p>------------- End Program 9.3 -----------------</p>
<p><a href="http://codepad.org/TfAnw9wo">執行 Program 9.3</a></p>
<p>Consider again, the number of calls to malloc() To get room for the array itself 1 call To get room for the array of ptrs 1 call ---- Total 2 calls</p>
<p>Now, each call to malloc() creates additional space overhead since malloc() is generally implemented by the operating system forming a linked list which contains data concerning the size of the block. But, more importantly, with large arrays (several hundred rows) keeping track of what needs to be freed when the time comes can be more cumbersome. This, combined with the contiguousness of the data block that permits initialization to all zeroes using memset() would seem to make the second alternative the preferred one.</p>
<p>As a final example on multidimensional arrays we will illustrate the dynamic allocation of a three dimensional array. This example will illustrate one more thing to watch when doing this kind of allocation. For reasons cited above we will use the approach outlined in alternative two. Consider the following code:</p>
<p><span>------------------- Program 9.4 -------------------------------------</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Program 9.4 from PTRTUT10.HTM   6/13/97 */
 
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stddef.h&gt;
 
int X_DIM=16;
int Y_DIM=5;
int Z_DIM=3;
 
int main(void)
{
    char *space;
    char ***Arr3D;
    int y, z;
    ptrdiff_t diff;
 
    /* first we set aside space for the array itself */
 
    space = malloc(X_DIM * Y_DIM * Z_DIM * sizeof(char));
 
    /* next we allocate space of an array of pointers, each
       to eventually point to the first element of a
       2 dimensional array of pointers to pointers */
 
    Arr3D = malloc(Z_DIM * sizeof(char **));
 
    /* and for each of these we assign a pointer to a newly
       allocated array of pointers to a row */
 
    for (z = 0; z &lt; Z_DIM; z++)
    {
        Arr3D[z] = malloc(Y_DIM * sizeof(char *));
 
        /* and for each space in this array we put a pointer to
           the first element of each row in the array space
           originally allocated */
 
        for (y = 0; y &lt; Y_DIM; y++)
        {
            Arr3D[z][y] = space + (z*(X_DIM * Y_DIM) + y*X_DIM);
        }
    }
 
    /* And, now we check each address in our 3D array to see if
       the indexing of the Arr3d pointer leads through in a
       continuous manner */
 
    for (z = 0; z &lt; Z_DIM; z++)
    {
        printf("Location of array %d is %p\n", z, *Arr3D[z]);
        for ( y = 0; y &lt; Y_DIM; y++)
        {
            printf("  Array %d and Row %d starts at %p", z, y, Arr3D[z][y]);
            diff = Arr3D[z][y] - space;
            printf("    diff = %d  ",diff);
            printf(" z = %d  y = %d\n", z, y);
        }
    }
    return 0;
}</pre>
<p>------------------- End of Prog. 9.4 ----------------------------</p>
<p><a href="http://codepad.org/hFghr4bI">執行 Program 9.4</a></p>
<p>If you have followed this tutorial up to this point you should have no problem deciphering the above on the basis of the comments alone. There are a couple of points that should be made however. Let's start with the line which reads: Arr3D[z][y] = space + (z(X_DIM * Y_DIM) + yX_DIM);</p>
<p>Note that here space is a character pointer, which is the same type as Arr3D[z][y]. It is important that when adding an integer, such as that obtained by evaluation of the expression (z(X_DIM * Y_DIM) + yX_DIM), to a pointer, the result is a new pointer value. And when assigning pointer values to pointer variables the data types of the value and variable must match.</p>
<h3>ch10指向函式的指標</h3>
<p>Up to this point we have been discussing pointers to data objects. C also permits the declaration of pointers to functions. Pointers to functions have a variety of uses and some of them will be discussed here.</p>
<p>Consider the following real problem. You want to write a function that is capable of sorting virtually any collection of data that can be stored in an array. This might be an array of strings, or integers, or floats, or even structures. The sorting algorithm can be the same for all. For example, it could be a simple bubble sort algorithm, or the more complex shell or quick sort algorithm. We'll use a simple bubble sort for demonstration purposes.</p>
<p>Sedgewick [1] has described the bubble sort using C code by setting up a function which when passed a pointer to the array would sort it. If we call that function bubble(), a sort program is described by bubble_1.c, which follows:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/*-------------------- bubble_1.c --------------------*/
 
/* Program bubble_1.c from PTRTUT10.HTM   6/13/97 */
 
#include &lt;stdio.h&gt;
 
int arr[10] = { 3,6,1,2,3,8,4,1,7,2};
 
void bubble(int a[], int N);
 
int main(void)
{
    int i;
    putchar('\n');
    for (i = 0; i &lt; 10; i++)
    {
        printf("%d ", arr[i]);
    }
    bubble(arr,10);
    putchar('\n');
 
    for (i = 0; i &lt; 10; i++)
    {
        printf("%d ", arr[i]);
    }
    return 0;
}
 
void bubble(int a[], int N)
{
    int i, j, t;
    for (i = N-1; i &gt;= 0; i--)
    {
        for (j = 1; j &lt;= i; j++)
        {
            if (a[j-1] &gt; a[j])
            {
                t = a[j-1];
                a[j-1] = a[j];
                a[j] = t;
            }
        }
    }
}</pre>
<p>---------------------- end bubble_1.c -----------------------</p>
<p><a href="http://codepad.org/lnLshCvk">執行 bubble_1.c</a></p>
<p>The bubble sort is one of the simpler sorts. The algorithm scans the array from the second to the last element comparing each element with the one which precedes it. If the one that precedes it is larger than the current element, the two are swapped so the larger one is closer to the end of the array.</p>
<p>On the first pass, this results in the largest element ending up at the end of the array. The array is now limited to all elements except the last and the process repeated. This puts the next largest element at a point preceding the largest element. The process is repeated for a number of times equal to the number of elements minus 1. The end result is a sorted array.</p>
<p>Here our function is designed to sort an array of integers. Thus in line 1 we are comparing integers and in lines 2 through 4 we are using temporary integer storage to store integers. What we want to do now is see if we can convert this code so we can use any data type, i.e. not be restricted to integers.</p>
<p>At the same time we don't want to have to analyze our algorithm and the code associated with it each time we use it. We start by removing the comparison from within the function bubble() so as to make it relatively easy to modify the comparison function without having to re-write portions related to the actual algorithm. This results in bubble_2.c:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/*---------------------- bubble_2.c -------------------------*/
 
/* Program bubble_2.c from PTRTUT10.HTM   6/13/97 */
 
   /* Separating the comparison function */
 
#include &lt;stdio.h&gt;
 
int arr[10] = { 3,6,1,2,3,8,4,1,7,2};
 
void bubble(int a[], int N);
int compare(int m, int n);
 
int main(void)
{
    int i;
    putchar('\n');
    for (i = 0; i &lt; 10; i++)
    {
        printf("%d ", arr[i]);
    }
    bubble(arr,10);
    putchar('\n');
 
    for (i = 0; i &lt; 10; i++)
    {
        printf("%d ", arr[i]);
    }
    return 0;
}
 
void bubble(int a[], int N)
 
{
    int i, j, t;
    for (i = N-1; i &gt;= 0; i--)
    {
        for (j = 1; j &lt;= i; j++)
        {
            if (compare(a[j-1], a[j]))
            {
                t = a[j-1];
                a[j-1] = a[j];
                a[j] = t;
            }
        }
    }
}
 
int compare(int m, int n)
{
    return (m &gt; n);
}
/*--------------------- end of bubble_2.c -----------------------*/</pre>
<p><a href="http://codepad.org/nJZesDqg">執行 bubble_2.c</a></p>
<p>If our goal is to make our sort routine data type independent, one way of doing this is to use pointers to type void to point to the data instead of using the integer data type. As a start in that direction let's modify a few things in the above so that pointers can be used. To begin with, we'll stick with pointers to type integer.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/*----------------------- bubble_3.c -------------------------*/
 
/* Program bubble_3.c from PTRTUT10.HTM    6/13/97 */
 
#include &lt;stdio.h&gt;
 
int arr[10] = { 3,6,1,2,3,8,4,1,7,2};
 
void bubble(int *p, int N);
int compare(int *m, int *n);
 
int main(void)
{
    int i;
    putchar('\n');
 
    for (i = 0; i &lt; 10; i++)
    {
        printf("%d ", arr[i]);
    }
    bubble(arr,10);
    putchar('\n');
 
    for (i = 0; i &lt; 10; i++)
    {
        printf("%d ", arr[i]);
    }
    return 0;
}
 
void bubble(int *p, int N)
{
    int i, j, t;
    for (i = N-1; i &gt;= 0; i--)
    {
        for (j = 1; j &lt;= i; j++)
        {
            if (compare(&amp;p[j-1], &amp;p[j]))
            {
                t = p[j-1];
                p[j-1] = p[j];
                p[j] = t;
            }
        }
    }
}
 
int compare(int *m, int *n)
{
    return (*m &gt; *n);
}
 
/*------------------ end of bubble3.c -------------------------*/</pre>
<p><a href="http://codepad.org/YGRii7il">執行 Program bubble3.c</a></p>
<p>Note the changes. We are now passing a pointer to an integer (or array of integers) to bubble(). And from within bubble we are passing pointers to the elements of the array that we want to compare to our comparison function. And, of course we are dereferencing these pointer in our compare() function in order to make the actual comparison. Our next step will be to convert the pointers in bubble() to pointers to type void so that that function will become more type insensitive. This is shown in bubble_4.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/*------------------ bubble_4.c ----------------------------*/
 
/* Program bubble_4.c from PTRTUT10,HTM   6/13/97 */
 
#include &lt;stdio.h&gt;
 
int arr[10] = { 3,6,1,2,3,8,4,1,7,2};
 
void bubble(int *p, int N);
int compare(void *m, void *n);
 
int main(void)
{
    int i;
    putchar('\n');
 
    for (i = 0; i &lt; 10; i++)
    {
        printf("%d ", arr[i]);
    }
    bubble(arr,10);
    putchar('\n');
 
    for (i = 0; i &lt; 10; i++)
    {
        printf("%d ", arr[i]);
    }
    return 0;
}
 
void bubble(int *p, int N)
{
    int i, j, t;
    for (i = N-1; i &gt;= 0; i--)
    {
        for (j = 1; j &lt;= i; j++)
        {
            if (compare((void *)&amp;p[j-1], (void *)&amp;p[j]))
            {
                t = p[j-1];
                p[j-1] = p[j];
                p[j] = t;
            }
        }
    }
}
 
int compare(void *m, void *n)
{
    int *m1, *n1;
    m1 = (int *)m;
    n1 = (int *)n;
    return (*m1 &gt; *n1);
}
 
/*------------------ end of bubble_4.c ---------------------*/</pre>
<p><a href="http://codepad.org/qLL8r2Dr">執行 bubble_4.c</a></p>
<p>Note that, in doing this, in compare() we had to introduce the casting of the void pointer types passed to the actual type being sorted. But, as we'll see later that's okay. And since what is being passed to bubble() is still a pointer to an array of integers, we had to cast these pointers to void pointers when we passed them as parameters in our call to compare().</p>
<p>We now address the problem of what we pass to bubble(). We want to make the first parameter of that function a void pointer also. But, that means that within bubble() we need to do something about the variable t, which is currently an integer. Also, where we use t = p[j-1]; the type of p[j-1] needs to be known in order to know how many bytes to copy to the variable t (or whatever we replace t with).</p>
<p>Currently, in bubble_4.c, knowledge within bubble() as to the type of the data being sorted (and hence the size of each individual element) is obtained from the fact that the first parameter is a pointer to type integer. If we are going to be able to use bubble() to sort any type of data, we need to make that pointer a pointer to type void.</p>
<p>But, in doing so we are going to lose information concerning the size of individual elements within the array. So, in bubble_5.c we will add a separate parameter to handle this size information.</p>
<p>These changes, from bubble4.c to bubble5.c are, perhaps, a bit more extensive than those we have made in the past. So, compare the two modules carefully for differences.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/*---------------------- bubble5.c ---------------------------*/
 
/* Program bubble_5.c from PTRTUT10.HTM    6/13/97 */
 
 
 
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
 
long arr[10] = { 3,6,1,2,3,8,4,1,7,2};
 
void bubble(void *p, size_t width, int N);
int compare(void *m, void *n);
 
int main(void)
{
    int i;
    putchar('\n');
 
    for (i = 0; i &lt; 10; i++)
    {
        printf("%d ", arr[i]);
    }
    bubble(arr, sizeof(long), 10);
    putchar('\n');
 
    for (i = 0; i &lt; 10; i++)
    {
        printf("%ld ", arr[i]);
    }
 
    return 0;
}
 
void bubble(void *p, size_t width, int N)
{
    int i, j;
    unsigned char buf[4];
    unsigned char *bp = p;
 
    for (i = N-1; i &gt;= 0; i--)
    {
        for (j = 1; j &lt;= i; j++)
        {
            if (compare((void *)(bp + width*(j-1)),
                        (void *)(bp + j*width)))  /* 1 */
            {
/*              t = p[j-1];   */
                memcpy(buf, bp + width*(j-1), width);
/*              p[j-1] = p[j];   */
                memcpy(bp + width*(j-1), bp + j*width , width);
/*              p[j] = t;   */
                memcpy(bp + j*width, buf, width);
            }
        }
    }
}
 
int compare(void *m, void *n)
{
    long *m1, *n1;
    m1 = (long *)m;
    n1 = (long *)n;
    return (*m1 &gt; *n1);
}
 
/*--------------------- end of bubble5.c ---------------------*/</pre>
<p><a href="http://codepad.org/UoaGbBcR">執行 bubble5.c</a></p>
<p>Note that I have changed the data type of the array from int to long to illustrate the changes needed in the compare() function. Within bubble() I've done away with the variable t (which we would have had to change from type int to type long). I have added a buffer of size 4 unsigned characters, which is the size needed to hold a long (this will change again in future modifications to this code). The unsigned character pointer *bp is used to point to the base of the array to be sorted, i.e. to the first element of that array.</p>
<p>We also had to modify what we passed to compare(), and how we do the swapping of elements that the comparison indicates need swapping. Use of memcpy() and pointer notation instead of array notation work towards this reduction in type sensitivity.</p>
<p>Again, making a careful comparison of bubble5.c with bubble4.c can result in improved understanding of what is happening and why.</p>
<p>We move now to bubble6.c where we use the same function bubble() that we used in bubble5.c to sort strings instead of long integers. Of course we have to change the comparison function since the means by which strings are compared is different from that by which long integers are compared. And,in bubble6.c we have deleted the lines within bubble() that were commented out in bubble5.c.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/*--------------------- bubble6.c ---------------------*/
/* Program bubble_6.c from PTRTUT10.HTM   6/13/97 */
 
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
 
#define MAX_BUF 256
 
char arr2[5][20] = {  "Mickey Mouse",
 
                      "Donald Duck",
 
                      "Minnie Mouse",
 
                      "Goofy",
 
                      "Ted Jensen" };
 
void bubble(void *p, int width, int N);
int compare(void *m, void *n);
 
int main(void)
{
    int i;
    putchar('\n');
 
    for (i = 0; i &lt; 5; i++)
    {
        printf("%s\n", arr2[i]);
    }
    bubble(arr2, 20, 5);
    putchar('\n\n');
 
    for (i = 0; i &lt; 5; i++)
    {
        printf("%s\n", arr2[i]);
    }
    return 0;
}
 
void bubble(void *p, int width, int N)
{
    int i, j, k;
    unsigned char buf[MAX_BUF];
    unsigned char *bp = p;
 
    for (i = N-1; i &gt;= 0; i--)
    {
        for (j = 1; j &lt;= i; j++)
        {
          k = compare((void *)(bp + width*(j-1)), (void *)(bp + j*width));
          if (k &gt; 0)
            {
             memcpy(buf, bp + width*(j-1), width);
             memcpy(bp + width*(j-1), bp + j*width , width);
             memcpy(bp + j*width, buf, width);
            }
        }
    }
}
 
int compare(void *m, void *n)
{
    char *m1 = m;
    char *n1 = n;
    return (strcmp(m1,n1));
}
 
/*------------------- end of bubble6.c ---------------------*/</pre>
<p><a href="http://codepad.org/Z066Lj9s">執行 bubble6.c</a></p>
<p>But, the fact that bubble() was unchanged from that used in bubble5.c indicates that that function is capable of sorting a wide variety of data types. What is left to do is to pass to bubble() the name of the comparison function we want to use so that it can be truly universal. Just as the name of an array is the address of the first element of the array in the data segment, the name of a function decays into the address of that function in the code segment. Thus we need to use a pointer to a function. In this case the comparison function.</p>
<p>Pointers to functions must match the functions pointed to in the number and types of the parameters and the type of the return value. In our case, we declare our function pointer as:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int *fptr(const void *p1, const void *p2);</pre>
<p><span>Note that were we to write:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int *fptr(const void *p1, const void *p2);</pre>
<p>we would have a function prototype for a function which returned a pointer to type int. That is because in C the parenthesis () operator have a higher precedence than the pointer * operator. By putting the parenthesis around the string (*fptr) we indicate that we are declaring a function pointer.</p>
<p>We now modify our declaration of bubble() by adding, as its 4th parameter, a function pointer of the proper type. It's function prototype becomes:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">void bubble(void *p, int width, int N,

int(*fptr)(const void *, const void *));</pre>
<p><span>When we call the bubble(), we insert the name of the comparison function that we want to use. bubble7.c illustrate how this approach permits the use of the same bubble() function for sorting different types of data.</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/*------------------- bubble7.c ------------------*/
 
/* Program bubble_7.c from PTRTUT10.HTM  6/10/97 */
 
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
 
#define MAX_BUF 256
 
long arr[10] = { 3,6,1,2,3,8,4,1,7,2};
char arr2[5][20] = {  "Mickey Mouse",
                      "Donald Duck",
                      "Minnie Mouse",
                      "Goofy",
                      "Ted Jensen" };
 
void bubble(void *p, int width, int N,
            int(*fptr)(const void *, const void *));
int compare_string(const void *m, const void *n);
int compare_long(const void *m, const void *n);
 
int main(void)
{
    int i;
    puts("\nBefore Sorting:\n");
 
    for (i = 0; i &lt; 10; i++)               /* show the long ints */
    {
        printf("%ld ",arr[i]);
    }
    puts("\n");
 
    for (i = 0; i &lt; 5; i++)                  /* show the strings */
    {
        printf("%s\n", arr2[i]);
    }
    bubble(arr, 4, 10, compare_long);          /* sort the longs */
    bubble(arr2, 20, 5, compare_string);     /* sort the strings */
    puts("\n\nAfter Sorting:\n");
 
    for (i = 0; i &lt; 10; i++)             /* show the sorted longs */
    {
        printf("%d ",arr[i]);
    }
    puts("\n");
 
    for (i = 0; i &lt; 5; i++)            /* show the sorted strings */
    {
        printf("%s\n", arr2[i]);
    }
    return 0;
}
 
void bubble(void *p, int width, int N,
            int(*fptr)(const void *, const void *))
{
    int i, j, k;
    unsigned char buf[MAX_BUF];
    unsigned char *bp = p;
 
    for (i = N-1; i &gt;= 0; i--)
    {
        for (j = 1; j &lt;= i; j++)
        {
            k = fptr((void *)(bp + width*(j-1)), (void *)(bp + j*width));
            if (k &gt; 0)
            {
                memcpy(buf, bp + width*(j-1), width);
                memcpy(bp + width*(j-1), bp + j*width , width);
                memcpy(bp + j*width, buf, width);
            }
        }
    }
}
 
int compare_string(const void *m, const void *n)
{
    char *m1 = (char *)m;
    char *n1 = (char *)n;
    return (strcmp(m1,n1));
}
 
int compare_long(const void *m, const void *n)
{
    long *m1, *n1;
    m1 = (long *)m;
    n1 = (long *)n;
    return (*m1 &gt; *n1);
}
 
/*----------------- end of bubble7.c -----------------*/</pre>
<p><a href="http://codepad.org/Z1E8guTH">執行 bubble7.c</a></p>
<p>References for Chapter 10:</p>
<p>"Algorithms in C" Robert Sedgewick Addison-Wesley ISBN 0-201-51425-7</p>
<h3>ch11結語</h3>
<p>I have written the preceding material to provide an introduction to pointers for newcomers to C. In C, the more one understands about pointers the greater flexibility one has in the writing of code. The above expands on my first effort at this which was entitled ptr_help.txt and found in an early version of Bob Stout's collection of C code SNIPPETS. The content in this version has been updated from that in PTRTUTOT.ZIP included in SNIP9510.ZIP.</p>
<p>I am always ready to accept constructive criticism on this material, or review requests for the addition of other relevant material. Therefore, if you have questions, comments, criticisms, etc. concerning that which has been presented, I would greatly appreciate your contacting me via email me at tjensen@ix.netcom.com.</p>
<h2>C++</h2>
<p>計算機程式除了包含語法、資料結構與演算法外, 還需要針對不同應用領域所需的知識, 才能用來解決問題.</p>
<p>以機械設計工程系的角度看 C++ 計算機程式, 學員未來可以利用 C++ 與 <a href="https://www.qt.io">Qt</a> 程式框架, 開發用來控制機器人的套件, 或 CAD/E/M 等電腦輔助設計、工程分析與輔助製造相關的程式.</p>
<p>從本計算機程式課程, 延伸至網際內容管理、電腦輔助設計實習與協同產品設計等課程的教學目標而言, 學習 C++ 程式的目的, 在於能夠延伸類似 <a href="https://github.com/solvespace/solvespace">Solvespace</a> C++ 程式原始碼, 有效解決電腦輔助設計相關問題.</p>
<p>以下我們將引用 <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-096-introduction-to-c-january-iap-2011/">https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-096-introduction-to-c-january-iap-2011/</a> 中的課程資料, 簡介 C++ 程式語法與相關應用.</p>
<p><a href="/downloads/MIT6_096IAP11_lec01.pdf">C++ Introduction</a></p>
<p><a href="/downloads/MIT6_096IAP11_lec02.pdf">C++ Flow of Control</a></p>
<p><a href="/downloads/MIT6_096IAP11_lec03.pdf">C++ Functions</a></p>
<p><a href="/downloads/MIT6_096IAP11_lec04.pdf">C++ Arrays and Strings</a></p>
<p><a href="/downloads/MIT6_096IAP11_lec05.pdf">C++ Pointers</a></p>
<p><a href="/downloads/MIT6_096IAP11_lec06.pdf">C++ Classes</a></p>
<p><a href="/downloads/MIT6_096IAP11_lec07.pdf">C++ Object Oriented Programming</a></p>
<p><a href="/downloads/MIT6_096IAP11_lec08.pdf">C++ Memory Management</a></p>
<p><a href="/downloads/MIT6_096IAP11_lec09.pdf">C++ Advanced Topics I</a></p>
<p><a href="/downloads/MIT6_096IAP11_lec10.pdf">C++ Advanced Topics II</a></p>
<p>另外, 我們也將參考 <a href="https://web.stanford.edu/class/cs106l/">https://web.stanford.edu/class/cs106l/</a> 課程中的資料:</p>
<p><a href="/downloads/stanford_cs106L_full_course_reader.pdf">Standard C++ Programming Laboratory full reader.pdf</a></p>
<p>最後, 在 C++ 計算機程式語言的學習, 針對最新 C++ 的程式標準, 請參考 <a href="http://pages.cs.wisc.edu/~gerald/cs368/">http://pages.cs.wisc.edu/~gerald/cs368/</a> 課程中的資料:</p>
<p><a href="/downloads/TeachModernC++.pdf">Teach Modern C++.pdf</a></p>
<h2>Python</h2>
<p>根據 Google 的搜尋, 以及 IEEE Spectrum 資料分析, Python 為目前最流行的計算機程式語言之一.</p>
<p><a href="http://pypl.github.io/PYPL.html">http://pypl.github.io/PYPL.html</a></p>
<p><a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a></p>
<p><a href="/downloads/AE1205-Python-Tutorial-v3.11.pdf">/downloads/AE1205-Python-Tutorial-v3.11.pdf</a> 在機械設計相關技術開發方面, Python 結合 <a href="https://www.riverbankcomputing.com/software/pyqt/download5">PyQt5</a> 與演化分析, 可用來建立機構模擬與合成套件: <a href="https://github.com/KmolYuan/Pyslvs-PyQt5">https://github.com/KmolYuan/Pyslvs-PyQt5</a></p>
<p>Python 也可以套用 Flask 框架, 建立簡單的網際內容管理系統: <a href="https://github.com/chiamingyen/cmsimfly">https://github.com/chiamingyen/cmsimfly</a> 或結合 oauth2 與 ORM 資料庫模組, 建立網際協同群組軟體: <a href="https://github.com/chiamingyen/pygrouf">https://github.com/chiamingyen/pygrouf</a></p>
<p>Python 也被用於自動化特定流程: <a href="https://automatetheboringstuff.com/">https://automatetheboringstuff.com/</a></p>
<p>Python 工程教材: <a href="http://homepage.tudelft.nl/7p97s/docs/AE1205-Python-Tutorial-v3.11.pdf">http://homepage.tudelft.nl/7p97s/docs/AE1205-Python-Tutorial-v3.11.pdf</a> (將 AE1205-Python-Tutorial-v3.1.1.pdf 改寫為 Python3)</p>
<p><a href="/downloads/python3_import_modules.pdf">Python3 import and modules.pdf</a></p>
<p>2015 An Introduction to Python and Computer Programming:</p>
<p><a href="https://link.springer.com/book/10.1007/978-981-287-609-6">https://link.springer.com/book/10.1007/978-981-287-609-6</a> </p>
<p>其他參考資料:</p>
<p><a href="https://www.youtube.com/playlist?list=PL-g0fdC5RMboYEyt6QS2iLb_1m7QcgfHk">Python 入門課程教學影片</a></p>
<p><a href="https://www.cs.cmu.edu/~112/">https://www.cs.cmu.edu/~112/</a>  (2018 Fall)</p>
<p><a href="http://stanfordpython.com/">Stanford 2017</a></p>
<p><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/">MIT 2016 Fall</a></p>
<p><a href="https://help.uis.cam.ac.uk/service/help-support/training/downloads/course-files/programming-student-files/python-courses/pythonab/pythonab-files/python3-notes.pdf">Cambridge Python3 notes</a></p>
<h4>Python 程式語言</h4>
<p><a href="https://brython.info/">Brython</a> 是一套能讓使用者在網頁中執行 Python3 程式的 Javascript 程式庫, 與 C 所編寫的 Python 3.7 差異比較:</p>
<p><a href="https://www.brython.info/static_doc/en/stdlib.html">https://www.brython.info/static_doc/en/stdlib.html</a> </p>
<p>本課程為了提升 Python3 初學者執行程式碼的方便性, 在 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 內容管理系統中導入 <a href="https://brython.info/">Brython</a>. 使用者可以利用以下編輯區執行 <a href="https://brython.info/">Brython</a> 程式.</p>
<p>Python 是一種非常適合初學者學習的電腦程式語言, 變數資料或字串的列印, 可以直接使用 print() 函式執行.</p>
<p>由於 Python 解譯系統在設計的過程, 保留了部分的關鍵字, 因此使用者在學習 Python 時, 必須了解有那些關鍵字, 不能被用來設定為程式中變數設計的名稱.</p>
<p>上面的敘述, 提到程式中的術語有變數, 字串, print () 函式, <a href="https://en.wikipedia.org/wiki/Interpreter_(computing)">解譯系統</a>與關鍵字.</p>
<p>變數 (<a href="https://en.wikipedia.org/wiki/Variable_(computer_science)">Variables</a>), 在 Wikipedia 說明如下:</p>
<p>In computer programming, a variable or scalar is a storage location (identified by a memory address) paired with an associated symbolic name (an identifier), which contains some known or unknown quantity of information referred to as a value.</p>
<p>The variable name is the usual way to reference the stored value, in addition to referring to the variable itself, depending on the context. This separation of name and content allows the name to be used independently of the exact information it represents.</p>
<p>The identifier in computer source code can be bound to a value during run time, and the value of the variable may thus change during the course of program execution.</p>
<p>Variables in programming may not directly correspond to the concept of variables in mathematics. The latter is abstract, having no reference to a physical object such as storage location. The value of a computing variable is not necessarily part of an equation or formula as in mathematics.</p>
<p>Variables in computer programming are frequently given long names to make them relatively descriptive of their use, whereas variables in mathematics often have terse, one- or two-character names for brevity in transcription and manipulation.</p>
<p>A variable's storage location may be referred by several different identifiers, a situation known as aliasing. Assigning a value to the variable using one of the identifiers will change the value that can be accessed through the other identifiers.</p>
<p>Compilers have to replace variables' symbolic names with the actual locations of the data. While a variable's name, type, and location often remain fixed, the data stored in the location may be changed during program execution.</p>
<p>print() 函式, 可以接受多個列印資料輸入, 且可透過 end 與 sep 輸入變數的設定, 決定列印結尾與分隔對應字串.</p>
<p>參考: <a href="https://www.cs.cmu.edu/~112/notes/notes-getting-started.html">Get Started</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-data-and-exprs.html">Data and Expressions</a></p>
<!-- 啟動 Brython 時, 設定 pythonpath 為 /static/, 並將共用 .py 放入, 可以在隨後的程式中導入使用 -->
<p><!-- 導入 brython --></p>
<p>
<script src="/static/brython.js" type="text/javascript"></script>
<script src="/static/brython_stdlib.js" type="text/javascript"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace

# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
doc["keyword"].bind('click', kw1.prog)
</script>
</p>
<p><!-- ****************************** keyword end --></p>
<p></p>
<p><!-- ****************************** for1 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
for1 = beditor.editor("""#for1 簡單的 for 迴圈範例
for i in range(10):
    print(i)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
doc['for1'].bind('click',for1.prog)
</script>
<!-- ****************************** for1 end --></p>
<p><!-- ***************************** hello start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 hello
hello = beditor.editor("""# 定義 helloWorld 函式, 然後呼叫執行
def helloWorld():
    print("Hello World!")
    # 同行列印
    print("first string ", end="")
    print("second string")

helloWorld()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "hello" 的按鈕點按時, 執行 hello 物件中的 prog 方法
doc["hello"].bind('click', hello.prog)
</script>
<!-- ***************************** hello end --></p>
<p><!-- ***************************** input start --></p>
<p>
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 inputEx
inputEx = beditor.editor("""# 利用 input() 取使用者輸入
name = input("Enter your name: ")
print("Your name is:", name)
#x = int(input("Enter a number: "))
#print("One half of", x, "=", x/2)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "inputEx" 的按鈕點按時, 執行 inputEx 物件中的 prog 方法
doc["inputEx"].bind('click', inputEx.prog)
</script>
</p>
<p><!-- ***************************** input end --></p>
<p></p>
<p><!-- ***************************** math start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
inputEx = beditor.editor("""# 導入 math 模組後, 使用模組方法
import math
print(math.factorial(20))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
doc["mathEx"].bind('click', inputEx.prog)
</script>
</p>
<p><!-- ***************************** math end --></p>
<p><button id="keyword">keyword</button><button id="for1">for1</button><button id="hello">hello</button><button id="inputEx">input</button><button id="mathEx">math</button></p>
<p>初步了解 print() 函式的應用後,  接下來學習如何自定函式與呼叫函式, 了解 Python 程式如何能夠不需像 C/C++ 使用 {} 來界定執行從屬關係, 且如何利用函式中的 return 傳回有用的資料.</p>
<p>參考資料: <a href="https://www.cs.cmu.edu/~112/notes/notes-writing-functions.html">Functions</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-conditionals.html">Conditionals</a></p>
<!-- ********************************************************************************************* -->
<p><!-- 用來顯示 prog1 程式碼的 editor 區域 --></p>
<div id="prog1_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="prog1_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('prog1_py_src', 'prog1_filename');" type="submit" value="Save"/></form>
<p><button id="prog1_run">Run</button> <button id="prog1_show_console">Output</button> <button id="prog1_clear_console">清除</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="prog1_console"></textarea></div>
<p><!-- ***************************** hello start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 hello
hello = beditor.editor("""# 定義 helloWorld 函式, 然後呼叫執行
def helloWorld():
    print("Hello World!")
    # 同行列印
    print("first string ", end="")
    print("second string")

helloWorld()
""", "prog1_editor", "prog1_console", "prog1__container", "prog1_py_src")
hello.setValue()
# id 為 "hello" 的按鈕點按時, 執行 hello 物件中的 prog 方法
doc["hello1"].bind('click', hello.prog)
</script>
<!-- ***************************** hello end --></p>
<!-- prog1 編輯器中, 會以最後引用物件的程式碼為顯示內容, 即下列的 prog1 -->
<p><!-- ***************************** prog1 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
prog1 = beditor.editor("""# 導入 math 模組後, 使用模組方法
import math
print(math.factorial(20))
""", "prog1_editor", "prog1_console", "prog1__container", "prog1_py_src")
doc["prog1"].bind('click', prog1.prog)
doc['prog1_run'].bind('click', prog1.run)
doc['prog1_show_console'].bind('click', prog1.show_console)
doc['prog1_clear_console'].bind('click', prog1.clear_console)
</script>
</p>
<p><!-- ***************************** prog1 end --></p>
<p><button id="prog1">prog1</button><button id="hello1">hello1</button></p>
<p>Python 程式中的迴圈.</p>
<p>參考資料: <a href="https://www.cs.cmu.edu/~112/notes/notes-loops.html">Loops</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-debugging.html">Debugging</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-testing-and-exceptions.html">Testing and Exceptions</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-strings.html">Strings</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-algorithmic-thinking.html">Algorithmic Thinking</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-style.html">Style</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-1d-lists.html">1D Lists and Tuples</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-2d-lists.html">2D Lists</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-sets.html">Sets</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-dictionaries.html">Dictionalry</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-efficiency.html">Efficiency</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-oop.html">OOP</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-recursion-part1.html">Recursion</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-recursion-part2.html">Recursion2</a>, <a href="https://www.cs.cmu.edu/~112/notes/notes-design-and-documentation.html">Large Project Design and Documentation</a></p>
<!-- ********************************************************************************************* -->
<p><!-- 用來顯示 prog2 程式碼的 editor 區域 --></p>
<div id="prog2_editor" style="width: 600px; height: 300px;"></div>
<form><label>Filename: <input id="prog2_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('prog2_py_src', 'prog2_filename');" type="submit" value="Save"/></form>
<p><button id="prog2_run">Run</button> <button id="prog2_show_console">Output</button> <button id="prog2_clear_console">清除</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="prog2_console"></textarea></div>
<p><!-- ***************************** hello start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 hello
hello = beditor.editor("""# 定義 helloWorld 函式, 然後呼叫執行
def helloWorld():
    print("Hello World!")
    # 同行列印
    print("first string ", end="")
    print("second string")

helloWorld()
""", "prog2_editor", "prog2_console", "prog2__container", "prog2_py_src")
# id 為 "hello" 的按鈕點按時, 執行 hello 物件中的 prog 方法
doc["hello2"].bind('click', hello.prog)
</script>
<!-- ***************************** hello end --></p>
<!-- prog2 編輯器中, 會以最後引用物件的程式碼為顯示內容, 即下列的 prog2 -->
<p><!-- ***************************** prog2 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
prog2 = beditor.editor("""# 導入 math 模組後, 使用模組方法
import math
print(math.factorial(20))
""", "prog2_editor", "prog2_console", "prog2__container", "prog2_py_src")
#prog2.setValue()
doc["prog2"].bind('click', prog2.prog)
doc['prog2_run'].bind('click', prog2.run)
doc['prog2_show_console'].bind('click', prog2.show_console)
doc['prog2_clear_console'].bind('click', prog2.clear_console)
</script>
</p>
<p><!-- ***************************** prog2 end --></p>
<!-- ********************************** sum start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
sum = beditor.editor('''# from m sum to n
def sumToN(n):
    """recursion
    https://link.springer.com/book/10.1007/978-3-642-23303-6
    page 40
    """
    if n == 0:
        return 0
    if n == 1:
        return 1 
    return sumToN(n-1) + n

def sumToN2(n):
    """In Python 3, they made the / operator 
    do a floating-point division, and added 
    the // operator to do integer division 
    (i.e. quotient without remainder); 
    flooring division
    """
    return n*(n+1)//2
    
def sumFromMToN_byFormula(m, n):
    return (sumToN(n) - sumToN(m-1))

def sumFromMToN(m, n):
    if m < n:
        sum = 0
        for i in range(m, n+1):
            sum += i
        return sum
    else:
        return "Error"
    
print(sumToN(10))
print(sumToN2(10))
print(sumFromMToN_byFormula(1, 10))
print(sumFromMToN(-10, 10))
''', "prog2_editor", "prog2_console", "prog2__container", "prog2_py_src")
sum.setValue()
doc["sum"].bind('click', sum.prog)
</script>
</p>
<p><button id="prog2">prog2</button><button id="hello2">hello2</button><button id="sum">sum</button></p>
<h3>Python 教材</h3>
<p>本教材根據 <a href="https://www.cs.cmu.edu/~112/">https://www.cs.cmu.edu/~112/</a> 內容改寫, 文中英文單字請使用 <a href="https://en.wikipedia.org/wiki/Merriam-Webster">Merriam-Webster</a> 英英線上或手機 App 字典查詢, 並網羅用來解釋特定英文生字的相關常用單字, 以提升自我的英文閱讀能力.</p>
<p><a href="https://www.cs.cmu.edu/~112/notes/notes-getting-started.html">https://www.cs.cmu.edu/~112/notes/notes-getting-started.html</a> 中提到的</p>
<p><a href="https://www.merriam-webster.com/dictionary/logistics">Logistics</a> 與 <a href="https://www.merriam-webster.com/dictionary/preliminary">Preliminary</a> 的解釋中,  就包含 <span><a href="https://www.merriam-webster.com/dictionary/procurement">procurement</a>, <a href="https://www.merriam-webster.com/dictionary/maintenance">maintenance</a>, <a href="https://www.merriam-webster.com/dictionary/facilities">facilities</a> 與 <a href="https://www.merriam-webster.com/dictionary/campaign">campaign</a> 等常用單字. 假如學員願意花點時間研究這些英文單字的相關意涵, 並多次復習, 就能持續不斷改進自我的英文閱讀能力,  自行查詢網路上所提供的眾多 Python 英文教學資料.</span></p>
<p><span><a href="https://www.merriam-webster.com/dictionary/logistics">Logistics</a> 指後勤物流, 在上課教材中, 指的是與課程有關的"事物"及"流程"說明介紹, 其中包括課程目標、課程網站、課程政策、教學大綱與上課時程安排等內容.</span></p>
<p><span><a href="https://www.merriam-webster.com/dictionary/preliminary">Preliminary</a> 則是指將對課程的進行方式與基本上課模式, 進行初步的說明介紹.</span></p>
<p><span>Python 教材的建置目的, 是希望學員在學習九週之後, 能夠六人一組, 嘗試開發有用的程式.</span></p>
<p><span>這些程式專案可以是任何主題, 或者直接與往後的機電資整合產品開發流程相關.</span></p>
<h4><span>先來一段 git 的基本練習</span></h4>
<p><span>啟動 p37 可攜系統</span></p>
<p><span>在其中一個 Dos 命令列中, 輸入:</span></p>
<p><span>    c:</span></p>
<p><span>表示要從 y: 槽切換到 c: 槽, 然後再下:</span></p>
<p><span>    cd \</span></p>
<p><span>表示要更換目錄到 c: 槽的根目錄. 接下來建立一個 test 目錄:</span><span></span></p>
<p><span>    mkdir test</span></p>
<p><span>然後更換目錄到此 test 目錄中.</span></p>
<p><span>    cd test</span></p>
<p><span>接下來要執行 git 指令, 表示要將 test 起始為 Git 的倉儲:</span></p>
<p><span>    git init</span></p>
<p><span>這時, c:\test 目錄中會新增一個 .git 目錄, 表示現在這個 c:\test 已經是 Git 倉儲.</span></p>
<p><span>接下來要利用 SciTE 編輯器, 在 test 目錄中建立一個 myprogram.txt 文字檔案, 在此之前, 請利用 SciTE 的下拉式功能表 Options 中的 Open Global Options File 開啟 SciTEGlobal.properties 設定檔案, 找到第 137 行的</span></p>
<p><span>    load.on.activate=1</span></p>
<p><span>去掉原先最前頭的 "#" 符號, 然後存檔, 之後關閉所有開啟的 SciTE 編輯器, 如此, 可以讓 SciTE 所開啟的檔案, 內容有修改時, 可以即時呈現在編輯區中.</span></p>
<p><span>接著, 重新在 Dos 命令列中輸入:</span></p>
<p><span>    y:\SciTE\bin\Sc1.exe </span></p>
<p><span>開啟已經修改 SciTEGlobal.properties 設定檔案之後的 SciTE 編輯區, </span><span>並且在  myprogram.txt 檔案中, 只加入一行:</span><span></span></p>
<p><span>    my program</span></p>
<p><span>接著存檔, 這時 c:\test 目錄中除了有 .git 目錄, 又多了一個 myprogram.txt 檔案.</span></p>
<p>接下來要對 c:\test 倉儲進行新增與提交流程, 將 myprogram.txt 納入 .git 的版次管理.</p>
<p>    git add myprogram.txt</p>
<p>    git commit -m "initial add"</p>
<p>這時, c:\test 倉儲中已經有一個改版的記錄, 接下來再編輯 myprogram.txt  檔案. 在其中的 "my program" 字串後, 連按兩個 Enter 後, 加入:</p>
<p>    first function</p>
<p>然後存檔, 接著再執行 git add 與 git commit:</p>
<p>    git add .</p>
<p>    git commit -m "add first function"</p>
<p>接著重覆上述編輯動作, 新增 "second function"</p>
<p>然後, 再執行 git add 與 git commit :</p>
<p>    git add .</p>
<p>    git commit -m "add second function"</p>
<p>這時, 使用者已經可以利用:</p>
<p>    git log</p>
<p>看到倉儲中已經有三個提交. 分別為:</p>
<p>    a3a2eb3 add second function<br/>    9295dfd add first function<br/>    3019d3f initial add</p>
<p>這時若希望在加入 first function 版本狀態時, 新增一個測試功能, 若通過測試符合需求, 則併入已經納入 second function 的版本中, 若不符合需求, 則可將該測試分支刪除.</p>
<p>先準備將工作目錄, 導回 "add first function" 的提交版本.</p>
<p>    git checkout 9295dfd</p>
<p>然後以此提交版本內容, 新增一個 dev 分支:</p>
<p>    git branch dev</p>
<p>然後利用 git checkout 在工作目錄中導出 dev 的版本 (其實, 修改前的 dev 狀態與 "add first function" 提交時相同</p>
<p>    git checkout dev</p>
<p>接下來, 對 myprogram.txt 改版, 在 first function 字串後,  連按兩個 Enter  後, 輸入:</p>
<p>    add test function</p>
<p>myprogram.txt 存檔後, 接著, 進行另一次的新增與提交.</p>
<p>    git add .</p>
<p>    git commit -m "add test function"</p>
<p>這時若希望看到各提交點間的關係, 可以利用:</p>
<p>    git log --graph --oneline --all</p>
<p>然後, 假設該測試功能已經通過, 準備與 add  second function 後的版本進行合併, 這時 git 出現 myprogram.txt 合併衝突, 因為 first function 後, 已經加入 seconf function, 但是 dev 分支是在 first function 加入後所導出的版本, 因此使用者在合併當下,  必須決定 add second function 與 add test function, 是只保留其中一項功能, 或者同時保留.</p>
<p>    git checkout master</p>
<p>將工作目錄轉為 master 的版本, 然後將 dev 分支的內容合併進來:</p>
<p>    git merge dev</p>
<p>這時的 myprogram.txt 內容為:</p>
<p><img alt="" height="273" src="/images/myprogram_master_dev_conflict.png" width="231"/><br/>必須要刪除衝突標註符號, 同時保留 add second function 與 add test function, 存檔後成為:</p>
<p><img alt="" height="205" src="/images/myprogram_master_dev_conflict_resolved.png" width="210"/></p>
<p>最後對此一合併後的版本, 進行新增與提交:</p>
<p>    git add .</p>
<p>    git commit -m "complete first, second and test functions adding"</p>
<p>再以 git log --oneline --graph --all 檢查各提交間的關聯, 畫面如下圖所示:</p>
<p><img alt="" height="221" src="/images/git_log_graph_oneline_all.png" width="635"/><a href="/downloads/cp_w3_test_repo.7z"></a></p>
<p>利用以上方式管理檔案版次的好處是, 使用者可以透過高效能的 Git 工具, 導出各提交點的版本, 或者從任一版本建立分支進行各種測試, 不會影響到其他提交版本資料的發布, 等到近端的 git 倉儲進一步推送到遠端的伺服器時, 遠端倉儲不僅可以提供協同, 也可提升資料保全效益, 無論是近端或遠端電腦硬碟發生問題, 都可以從任一參與協同的倉儲中回復所有已經提交的各版本內容.</p>
<p>最後要將工作目錄導向最初 initial add 提交時的版本:</p>
<p>    git checkout 9439e67</p>
<p>導回 add first function 時的版本:</p>
<p>    git checkout 5fcdac9</p>
<p>導回 add second function 時的版本:</p>
<p>    git checkout fb092cc</p>
<p>導回 dev 時的狀態:</p>
<p>    git checkout 1c3d5ff</p>
<p>將工作目錄導回最後 master 合併 dev 分支的版本:</p>
<p>    git checkout ace97d7</p>
<p>將上述 test (畫面中為 test1) 目錄壓縮後: <a href="/downloads/cp_w3_test_repo.7z">cp_w3_test_repo.7z</a></p>
<p>經過上述的 Git 近端指令操作, 可以了解在程式開發過程, 可以透過  Git 分散式版本管理系統的功能, 以非常具有彈性的流程進行程式碼的編寫, 尤其當協同開發人員眾多時,  Git 與 Github 將更能發揮其條理開發的特定, 並且安全地保存各版次資料內容.</p>
<p>除了 Git 與 Github, 在計算機程式課程中還推薦另一項使用者較容易全盤主導的分散式版次管理工具: <a href="https://fossil-scm.org">Fossil SCM</a>.</p>
<p><a href="https://fossil-scm.org">Fossil SCM</a> 的功能類似 Git, 而且近端工具與遠端工具都只需要一個檔案: fossil.exe (目前的最新版本為 2.7 版, 可以從 <a href="https://fossil-scm.org/index.html/uv/download.html">https://fossil-scm.org/index.html/uv/download.html</a> 下載)</p>
<p>等大家都熟悉如何使用 Git 與 Github 來管理所開發的 Python 程式碼之後, 我們將在分組協同專案執行過程, 介紹如何在自建的 Ubuntu 伺服器上安裝 <a href="https://fossil-scm.org">Fossil SCM</a>.</p>
<h4> Python 程式課程說明</h4>
<p>在 <a href="https://www.cs.cmu.edu/~112/">https://www.cs.cmu.edu/~112/</a> 中的課程說明如下:</p>
<p style="padding-left: 30px;"><span>A technical introduction to the fundamentals of programming with an emphasis on producing clear, robust, and reasonably efficient code using top-down design, informal analysis, and effective testing and debugging. Starting from first principles, we will cover a large subset of the Python programming language, including its standard libraries and programming paradigms. We will also target numerous deployment scenarios, including standalone programs, shell scripts, and web-based applications. This course assumes no prior programming experience. Even so, it is a fast-paced and rigorous preparation for 15-122. Students seeking a more gentle introduction to computer science should consider first taking 15-110. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.</span></p>
<p><span>而課程學習目標:</span></p>
<ol>
<li><span>Develop computational problem-solving skills using Python as a tool to be applied to new problems, especially in the student's home academic discipline</span></li>
<li><span>Produce clear, robust, and efficient code in Python by</span>
<ul>
<li>employing modular, top-down design</li>
<li>using sequential, conditional, and loop statements where appropriate</li>
<li>using strings, lists, tuples, and dictionaries where appropriate</li>
<li>using objects and classes where appropriate</li>
<li>integrating recursive functions where appropriate</li>
<li>proactively designing and writing test cases to effectively test and debug code</li>
</ul>
</li>
<li><span>Develop an effective programming style based on established standards, practices, and guidelines</span></li>
<li><span>Describe the difference between programming and Computer Science, and gain exposure to some of the Big Ideas of Computer Science (e.g., Computability)</span></li>
<li><span>Explain and analyze the efficiency of algorithms by:</span>
<ul>
<li><span>proving the running time (Big-O) of various well-known searching and sorting algorithms</span></li>
<li><span>determining (not proving) the running time (Big-O) of a small piece of code</span></li>
<li><span>describing the difference between small code optimizations and more substantive algorithmic optimizations</span><span></span></li>
</ul>
</li>
<li><span>Design and implement event-based graphical animations</span></li>
<li><span>Develop and write a substantial (500-1500 line) program in Python to implement a solution to a term project of their choosing over three to four weeks</span></li>
</ol>
<h4><span></span>如何執行 Python 程式</h4>
<p>在本課程中, 至少有三種方法可以執行 Python 程式:</p>
<ol>
<li>啟動 <a href="https://drive.google.com/file/d/1Pkkjg8RX3pkZkjWEBlQBggw11u5YSn5i/view?usp=sharing">P37</a> 可攜程式系統後, 以 SciTE 編輯器開啟或新建副檔名為 py 的檔案, 使用下拉式功能表 Tools -&gt; Go, 就可以執行 Python 程式.</li>
<li>使用可攜系統所啟動的 Dos 命令列, 在 .py 程式碼所在的目錄, 以 python 程式碼檔名.py, 按下 Enter, 就可以執行該 Python 程式.</li>
<li>部分原生 Python 程式碼與 <a href="https://brython.info/">Brython</a> 特有程式用法, 可以在導入 <a href="https://brython.info/">Brython</a> 解譯器的網頁中執行與 Python 相容的程式碼.</li>
</ol>
<!-- 啟動 Brython 時, 設定 pythonpath 為 /static/, 並將共用 .py 放入, 可以在隨後的程式中導入使用 -->
<p><!-- 導入 brython --></p>
<p>
<script src="/static/brython.js" type="text/javascript"></script>
<script src="/static/brython_stdlib.js" type="text/javascript"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<h4>開始練習 print() 用法, 並著手建立函式</h4>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace

# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

def helloWorld():
    print("Hello World!")

helloWorld()

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
doc["keyword"].bind('click', kw1.prog)
</script>
</p>
<p><!-- ****************************** keyword end --></p>
<p><!-- ***************************** slide ex1 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex1 = beditor.editor("""# 導入 Ex1 原始碼
a = 0
def my_print(n, input_str):
    print("以下將重覆列印 '", input_str + "' " + str(n) + "次")
    for i in range(n):
        print(i, input_str)

my_print(5, "Hello World!")
the_str = "開始學習 Python"
num = input("請輸入要列印的次數!")
my_print(int(num), the_str)
a = a + 1
print("(" + str(a) + ")", "_" * 25)

def myfun():
    yield 1
    yield 2
    yield 3

for i in myfun():
    print(i)

x = iter(myfun())
y = list(myfun())

a = a + 1
print("(" + str(a) + ")", "_" * 25)
print(x.__next__())
print(x.__next__())
print(x.__next__())
print(y)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex1" 的按鈕點按時, 執行 Ex1 物件中的 prog 方法
doc["ex1"].bind('click', Ex1.prog)
</script>
</p>
<p><!-- ***************************** slide ex1 end --></p>
<p><!-- ***************************** slide ex2 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex2 = beditor.editor("""# Python 的內建資料型別
import math
def f():
    print("This is a user-defined function")
    return 42

print("Some basic types in Python:")
print(type(2))           # int
print(type(2.2))         # float
print(type("2.2"))       # str  (string)
print(type(2 < 2.2))     # bool (boolean)
print(type(math))        # module
print(type(math.tan))    # builtin_function_or_method ("function" in Brython)
print(type(f))           # function (user-defined function)
print(type(type(42)))    # type

print("#####################################################")

print("And some other types we will see later in the course...")
print(type(Exception())) # Exception
print(type(range(5)))    # range
print(type([1,2,3]))     # list
print(type((1,2,3)))     # tuple
print(type({1,2}))       # set
print(type({1:42}))      # dict (dictionary or map)
print(type(2+3j))        # complex  (complex number) (we may not see this type)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex2" 的按鈕點按時, 執行 Ex2 物件中的 prog 方法
doc["ex2"].bind('click', Ex2.prog)
</script>
</p>
<p><!-- ***************************** slide ex2 end --></p>
<p><!-- ***************************** slide ex3 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex3 = beditor.editor("""# Python 的內建常數與函式
# 內建常數
print("Some builtin constants:")
print(True)
print(False)
print(None)

print("And some more constants in the math module:")
import math
print(math.pi)
print(math.e)
# 內建函式
print("Type conversion functions:")
print(bool(0))   # convert to boolean (True or False)
print(float(42)) # convert to a floating point number
print(int(2.8))  # convert to an integer (int)

print("And some basic math functions:")
print(abs(-5))   # absolute value
print(max(2,3))  # return the max value
print(min(2,3))  # return the min value
print(pow(2,3))  # raise to the given power (pow(x,y) == x**y)
print(round(2.354, 1)) # round with the given number of digits
# other examples
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Type Affect Semantics
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Integer Division
print("The / operator does 'normal' float division:")
print(" 5/3  =", ( 5/3))
print()
print("The // operator does integer division:")
print(" 5//3 =", ( 5//3))
print(" 2//3 =", ( 2//3))
print("-1//3 =", (-1//3))
print("-4//3 =", (-4//3))
# Modulus or Remainder Operator (%)
print(" 6%3 =", ( 6%3))
print(" 5%3 =", ( 5%3))
print(" 2%3 =", ( 2%3))
print(" 0%3 =", ( 0%3))
print("-4%3 =", (-4%3))
print(" 3%0 =", ( 3%0))
# Verify that (a%b) is equivalent to (a-(a//b)*b)
def mod(a, b):
  return a - (a//b)*b
print(41%14, mod(41,14))
print(14%41, mod(14,41))
print(-32%9, mod(-32,9))
print(32%-9, mod(32,-9))
# Operator Order (Precedence and Associativity)
print("Precedence:")
print(2+3*4)  # prints 14, not 20
print(5+4%3)  # prints  6, not 0 (% has same precedence as *, /, and //)
print(2**3*4) # prints 32, not 4096 (** has higher precedence than *, /, //, and %)

print()

print("Associativity:")
print(5-4-3)   # prints -2, not 4 (- associates left-to-right)
print(4**3**2) # prints 262144, not 4096 (** associates right-to-left)
# Approximate Values of Floating-Point Numbers
print(0.1 + 0.1 == 0.2)        # True, but...
print(0.1 + 0.1 + 0.1 == 0.3)  # False!
print(0.1 + 0.1 + 0.1)         # prints 0.30000000000000004 (uh oh)
print((0.1 + 0.1 + 0.1) - 0.3) # prints 5.55111512313e-17 (tiny, but non-zero!)
# Equality Testing with math.isclose
print("The problem....")
d1 = 0.1 + 0.1 + 0.1
d2 = 0.3
print(d1 == d2)                # False (never use == with floats!)

print()
print("The solution...")
import math
print(math.isclose(d1, d2))  # True!
# math.isclose checks if the two numbers are ALMOST equal, within a small error
# Short-Circuit Evaluation
def yes():
    return True

def no():
    return False

def crash():
    return 1/0 # crashes!

print(no() and crash()) # Works!
print(crash() and no()) # Crashes!
print (yes() and crash()) # Never runs (due to crash), but would also crash (without short-circuiting)
# Or operator
def yes():
    return True

def no():
    return False

def crash():
    return 1/0 # crashes!

print(yes() or crash()) # Works!
print(crash() or yes()) # Crashes!
print(no() or crash())  # Never runs (due to crash), but would also crash (without short-circuiting)
# more examples
def isPositive(n):
    result = (n > 0)
    print("isPositive(",n,") =", result)
    return result

def isEven(n):
    result = (n % 2 == 0)
    print("isEven(",n,") =", result)
    return result

print("Test 1: isEven(-4) and isPositive(-4))")
print(isEven(-4) and isPositive(-4)) # Calls both functions
print("----------")
print("Test 2: isEven(-3) and isPositive(-3)")
print(isEven(-3) and isPositive(-3)) # Calls only one function!
# type vs isinstance
# Both type and isinstance can be used to type-check
# In general, (isinstance(x, T)) will be more robust than (type(x) == T)

print(type("abc") == str)
print(isinstance("abc", str))

# We'll see better reasons for this when we cover OOP + inheritance later
# in the course.  For now, here is one reason:  say you wanted to check
# if a value is any kind of number (int, float, complex, etc). 
# You could do:

def isNumber(x):
    return ((type(x) == int) or
            (type(x) == float)) # are we sure this is ALL kinds of numbers?

print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))

# But this is cleaner, and works for all kinds of numbers, including
# complex numbers for example:

import numbers
def isNumber(x):
    return isinstance(x, numbers.Number) # works for any kind of number

print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex3" 的按鈕點按時, 執行 Ex3 物件中的 prog 方法
doc["ex3"].bind('click', Ex3.prog)
</script>
</p>
<p><!-- ***************************** slide ex3 end --></p>
<p><!-- ***************************** slide ex4 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex4 = beditor.editor("""# Python 函式
# Vocabulary
x = 5
def f(y, z):
    result = x + y + z
    return result
print(f(1, 2)) # 8
print(f(3, 4)) # 12

# Vocabulary:
#   variables: global vs. local
#   statements vs. expressions
#   function definitions vs. function calls
#   parameters vs. arguments

# Return Statements
# Basic example

def isPositive(x):
    return (x > 0)

print(isPositive(5))  # True
print(isPositive(-5)) # False
print(isPositive(0))  # False

# Return ends the function immediately
def isPositive(x):
    print("Hello!")   # runs
    return (x > 0)
    print("Goodbye!") # does not run ("dead code")

print(isPositive(5))  # prints Hello, then True

# No return statement --> return None
def f(x):
    x + 42

print(f(5)) # None

def f2(x):
    result = x + 42

print(f2(5)) # None

# Print versus Return
# This is a common early mistake (confusing print and return):
def cubed(x):
    print(x**3) # Here is the error!

cubed(2)          # seems to work!
print(cubed(3))   # sort of works (but prints None, which is weird)
print(2*cubed(4)) # Error!

# Once again (correctly)
def cubed2(x):
    return (x**3) # That's better!

cubed2(2)          # seems to be ignored (why?)
print(cubed2(3))   # works!
print(2*cubed2(4)) # works!

# Different Parameter and Return Types
def hypotenuse(a, b):
    return ((a**2) + (b**2))**0.5

print(hypotenuse(3, 4)) # 5.0 (not 5)
print("---------------------")

def xor(b1, b2):
    return ((b1 and (not b2)) or (b2 and (not b1)))  # same as (b1 != b2)

print(xor(True,  True))  # False
print(xor(True,  False)) # True
print(xor(False, True))  # True
print(xor(False, False)) # False
print("---------------------")

def isPositive(n):
    return (n > 0)

print(isPositive(10))     # True
print(isPositive(-1.234)) # False

# Function Composition
def f(w):
    return 10*w

def g(x, y):
    return f(3*x) + y

def h(z):
    return f(g(z, f(z+1)))

print(h(1)) # hint: try the "visualize" feature

# Helper Functions 
def onesDigit(n):
    return n%10

def largerOnesDigit(x, y):
    return max(onesDigit(x), onesDigit(y))

print(largerOnesDigit(134, 672)) # 4
print(largerOnesDigit(132, 674)) # Still 4

# Test Functions
# A broken test function
def onesDigit(n):
    return n%10

def testOnesDigit():
    print("Testing onesDigit()...", end="")
    assert(onesDigit(5) == 5)
    assert(onesDigit(123) == 3)
    assert(onesDigit(100) == 0)
    assert(onesDigit(999) == 9)
    print("Passed!")

testOnesDigit() # Passed!  Why is this bad?

# A better version
def onesDigit2(n):
    return n%10

def testOnesDigit2():
    print("Testing onesDigit()...", end="")
    assert(onesDigit2(5) == 5)
    assert(onesDigit2(123) == 3)
    assert(onesDigit2(100) == 0)
    assert(onesDigit2(999) == 9)
    assert(onesDigit2(-123) == 3) # Added this test
    print("Passed!")

testOnesDigit2() # Crashed!  So the test function worked!

# Local Variable Scope
def f(x):
    print("In f, x =", x)
    x += 5
    return x

def g(x):
    return f(x*2) + f(x*3)

print(g(2))

# Another example
def f(x):
    print("In f, x =", x)
    x += 7
    return round(x / 3)

def g(x):
    x *= 10
    return 2 * f(x)

def h(x):
    x += 3
    return f(x+4) + g(x)

print(h(f(1)))

# Global Variable Scope
# In general, you should avoid using global variables.
# You will even lose style points if you use them!
# Still, you need to understand how they work, since others
# will use them, and there may also be some very few occasions
# where you should use them, too!

g = 100

def f(x):
    return x + g

print(f(5)) # 105
print(f(6)) # 106
print(g)    # 100

# Another exampl
g = 100

def f(x):
    # If we modify a global variable, we must declare it as global.
    # Otherwise, Python will assume it is a local variable.
    global g
    g += 1
    return x + g

print(f(5)) # 106
print(f(6)) # 108
print(g)    # 102

# Default arguments
# Sometimes, a function has a parameter that has a natural default
# We can specify that default value in the function definition,
# then choose whether or not to include it in the function call.

def f(x, y=10):
    return x + y

print(f(5))   # 15
print(f(5,1)) # 6
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex3" 的按鈕點按時, 執行 Ex3 物件中的 prog 方法
doc["ex4"].bind('click', Ex4.prog)
</script>
</p>
<p><!-- ***************************** slide ex4 end --></p>
<p><button id="keyword">Keyword</button><button id="ex1">Ex1</button><button id="ex2">Ex2</button><button id="ex3">Ex3</button><button id="ex4">Ex4</button></p>
<h4>認識 Syntax, Runtime 與 Logical Errors</h4>
<p>Syntax errors, also known as parsing errors, 指 Python 解譯器在解讀程式碼的過程所發生的語法錯誤. 例如: 在 if , elif , else , for , while , class ,def 宣告時未能加上":".</p>
<p>比較操作符未能使用 "==".</p>
<p>因為界定程式執行範圍的縮排單位不一致.</p>
<p>整數或浮點數與字串以 + 串接時, 忘記利用 <a href="https://docs.python.org/3.7/library/functions.html#func-str">str()</a> 轉為字串, 或字串與整數運算時, 忘記利用 <a href="https://docs.python.org/3.7/library/functions.html#int">int()</a> 將字串轉為整數.</p>
<p>字串設定未能使用單引號, 雙引號或三引號界定.</p>
<p>變數命名錯誤, 例如: 以數字開頭變數命名, 或誤用關鍵字作為變數名稱.</p>
<p>數列引用超出範圍.</p>
<p>參考資料:</p>
<p><a href="http://inventwithpython.com/blog/2012/07/09/16-common-python-runtime-errors-beginners-find/">http://inventwithpython.com/blog/2012/07/09/16-common-python-runtime-errors-beginners-find/</a> </p>
<h4>利用 input() 取得使用者輸入</h4>
<p style="padding-left: 30px;">在網頁中透過 <a href="https://brython.info/">Brython</a>, 可以讓<a href="https://docs.python.org/3.7/library/functions.html#input"> input()</a> 函式的執行跳出視窗表單, 讓使用者以互動方式執行 Python 程式. 經由 <a href="https://docs.python.org/3.7/library/functions.html#input">input()</a> 取得的資料型別為字串, 若要將取得的變數當作整數使用, 必須利用 <a href="https://docs.python.org/3.7/library/functions.html#int">int()</a> 將字串轉為整數. 若需轉為浮點數, 則可使用 <a href="https://docs.python.org/3.7/library/functions.html#float">float()</a>.</p>
<p style="padding-left: 30px;">若在程式執行, 需要將整數型別資料轉為字串, 可以使用 <a href="https://docs.python.org/3.7/library/functions.html#func-str">str()</a> 函式轉換.</p>
<h4>Python 3 的內建函式</h4>
<p>Built-in Functions:</p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3.7/library/functions.html">https://docs.python.org/3.7/library/functions.html</a> </p>
<p>PEP (Python Enhancement Proposals):</p>
<p style="padding-left: 30px;">Index of PEP: <a href="https://www.python.org/dev/peps/">https://www.python.org/dev/peps/</a> </p>
<p style="padding-left: 30px;">Style Guide for Python Code: <a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a> </p>
<p style="padding-left: 30px;">Docstring Conventions: <a href="https://www.python.org/dev/peps/pep-0257/">https://www.python.org/dev/peps/pep-0257/</a> </p>
<p style="padding-left: 30px;">Python WSGI V1.0.1: <a href="https://www.python.org/dev/peps/pep-3333/">https://www.python.org/dev/peps/pep-3333/</a> </p>
<p style="padding-left: 30px;">Python 3.7 Release Schedule: <a href="https://www.python.org/dev/peps/pep-0537/">https://www.python.org/dev/peps/pep-0537/</a> </p>
<p style="padding-left: 30px;">Type Hints: <a href="https://www.python.org/dev/peps/pep-0484/">https://www.python.org/dev/peps/pep-0484/</a> </p>
<p>條件判斷式用法: <a href="https://www.cs.cmu.edu/~112/notes/notes-conditionals.html">https://www.cs.cmu.edu/~112/notes/notes-conditionals.html</a> </p>
<p>迴圈用法: <a href="https://www.cs.cmu.edu/~112/notes/notes-loops.html">https://www.cs.cmu.edu/~112/notes/notes-loops.html</a> </p>
<p>程式除錯: <a href="https://www.cs.cmu.edu/~112/notes/notes-debugging.html">https://www.cs.cmu.edu/~112/notes/notes-debugging.html</a> </p>
<p>字串: <a href="https://www.cs.cmu.edu/~112/notes/notes-strings.html">https://www.cs.cmu.edu/~112/notes/notes-strings.html</a> </p>
<p>1 維數列與元組: <a href="https://www.cs.cmu.edu/~112/notes/notes-1d-lists.html">https://www.cs.cmu.edu/~112/notes/notes-1d-lists.html</a> </p>
<p>2 維數列: <a href="https://www.cs.cmu.edu/~112/notes/notes-2d-lists.html">https://www.cs.cmu.edu/~112/notes/notes-2d-lists.html</a> </p>
<p>集合: <a href="https://www.cs.cmu.edu/~112/notes/notes-sets.html">https://www.cs.cmu.edu/~112/notes/notes-sets.html</a> </p>
<p>字典: <a href="https://www.cs.cmu.edu/~112/notes/notes-dictionaries.html">https://www.cs.cmu.edu/~112/notes/notes-dictionaries.html</a> </p>
<p>效率: <a href="https://www.cs.cmu.edu/~112/notes/notes-efficiency.html">https://www.cs.cmu.edu/~112/notes/notes-efficiency.html</a> </p>
<p>物件導向: <a href="https://www.cs.cmu.edu/~112/notes/notes-oop.html">https://www.cs.cmu.edu/~112/notes/notes-oop.html</a> </p>
<p>遞迴: <a href="https://www.cs.cmu.edu/~112/notes/notes-recursion-part1.html">https://www.cs.cmu.edu/~112/notes/notes-recursion-part1.html</a></p>
<p style="padding-left: 30px;"><a href="https://www.cs.cmu.edu/~112/notes/notes-recursion-part2.html">https://www.cs.cmu.edu/~112/notes/notes-recursion-part2.html</a> </p>
<p>執行緒: <a href="https://docs.python.org/3/library/threading.html">https://docs.python.org/3/library/threading.html</a> </p>
<p>演算法思維: <a href="https://www.cs.cmu.edu/~112/notes/notes-algorithmic-thinking.html">https://www.cs.cmu.edu/~112/notes/notes-algorithmic-thinking.html</a> </p>
<p>如何解決問題: <a href="https://en.wikipedia.org/wiki/How_to_Solve_It">https://en.wikipedia.org/wiki/How_to_Solve_It</a> </p>
<p>Python Tutorial: <a href="https://docs.python.org/3.7/tutorial/index.html">https://docs.python.org/3.7/tutorial/index.html</a> </p>
<p>Flask 網際程式: <a href="http://flask.pocoo.org/">http://flask.pocoo.org/</a> </p>
<p style="padding-left: 30px;">範例: <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 與 <a href="https://github.com/chiamingyen/pygrouf">PyGrouf</a></p>
<p>PyQt5 視窗程式: <a href="https://pythonspot.com/pyqt5/">tutorial1</a>, <a href="http://zetcode.com/gui/pyqt5/">tutorial2</a>, <a href="https://build-system.fman.io/pyqt5-tutorial">tutorial 3</a>, <a href="https://data-flair.training/blogs/python-pyqt5-tutorial/">tutorial 4</a>, <a href="https://eric-ide.python-projects.org/">Eric6 IDE</a></p>
<p style="padding-left: 30px;">範例: <a href="https://github.com/KmolYuan/Pyslvs-PyQt5">Pyslvs</a> </p>
<h4>了解如何導入與建立模組</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/modules.html">https://docs.python.org/3/tutorial/modules.html</a> </p>
<h4>如何吸引更多人運用計算機程式工具</h4>
<p style="padding-left: 30px;"><a href="/downloads/How%20to make teenage girls love coding using Python and the visual arts orienting language Processing.pdf">How to make teenage girls love coding using Python and the visual arts orienting language Processing.pdf</a></p>
<p>參考資料</p>
<p style="padding-left: 30px;"><a href="/downloads/AutoWIG%20- automatic generation of python bindings for Cpp libraries.pdf">AutoWIG - automatic generation of python bindings for Cpp libraries.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/StatisKit/AutoWIG">https://github.com/StatisKit/AutoWIG</a> </p>
<p style="padding-left: 30px;"><a href="/downloads/Solving%20inverse problems in building physics - an overview of guidelines for a careful and optimal use of data.pdf">Solving inverse problems in building physics - an overview of guidelines for a careful and optimal use of data.pdf</a></p><h3>what is new</h3>
<p><a href="https://docs.python.org/3.0/whatsnew/3.0.html">https://docs.python.org/3.0/whatsnew/3.0.html</a> </p>
<p><a href="https://docs.python.org/3/whatsnew/3.4.html">https://docs.python.org/3/whatsnew/3.4.html</a></p>
<p><a href="https://docs.python.org/3/whatsnew/3.5.html">https://docs.python.org/3/whatsnew/3.5.html</a></p>
<p><a href="https://docs.python.org/3/whatsnew/3.6.html">https://docs.python.org/3/whatsnew/3.6.html</a> </p>
<p><a href="https://docs.python.org/3/whatsnew/3.7.html">https://docs.python.org/3/whatsnew/3.7.html</a> </p>
<p>Python 3.7 關鍵字:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Python 3.7
&gt; keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']</pre>
<h4>模組化程式設計:</h4>
<p><a href="https://www.python-course.eu/python3_modules_and_modular_programming.php">https://www.python-course.eu/python3_modules_and_modular_programming.php</a> </p>
<h4>Python 3.7 Data Classes</h4>
<p><a href="https://www.python.org/dev/peps/pep-0557/">https://www.python.org/dev/peps/pep-0557/</a> </p>
<p><a href="https://stackoverflow.com/questions/47955263/what-are-data-classes-and-how-are-they-different-from-common-classes">https://stackoverflow.com/questions/47955263/what-are-data-classes-and-how-are-they-different-from-common-classes</a> </p>
<h3>style guide</h3>
<p>Python docstring conventions:</p>
<p><a href="https://www.python.org/dev/peps/pep-0257/">https://www.python.org/dev/peps/pep-0257/</a> </p>
<p>One line docstring:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def kos_root():
    """Return the pathname of the KOS root directory."""
    global _kos_root
    if _kos_root: return _kos_root
    ...</pre>
<p>Multiline docstring:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def complex(real=0.0, imag=0.0):
    """Form a complex number.

    Keyword arguments:
    real -- the real part (default 0.0)
    imag -- the imaginary part (default 0.0)
    """
    if imag == 0.0 and real == 0.0:
        return complex_zero
    ...</pre>
<p>Aligned with opening delimiter.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">foo = long_function_name(var_one, var_two,
                         var_three, var_four)</pre>
<p>List:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">my_list = [
    1, 2, 3,
    4, 5, 6,
    ]</pre>
<pre class="literal-block"></pre>
<p>Easy to match operators with operands:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">income = (gross_wages
          + taxable_interest
          + (dividends - qualified_dividends)
          - ira_deduction
          - student_loan_interest)</pre>
<p><br/>Surround top-level function and class definitions with two blank lines.</p>
<p>Method definitions inside a class are surrounded by a single blank line.</p>
<p>Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations).</p>
<p>Use blank lines in functions, sparingly, to indicate logical sections.</p>
<p>Python style guide:</p>
<p><a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a> </p>
<p>Type hins:</p>
<p><a href="https://www.python.org/dev/peps/pep-0484/">https://www.python.org/dev/peps/pep-0484/</a> </p>
<h3>typing</h3>
<p>Python 3.5 之後才支援 typing 模組:</p>
<p><a href="https://docs.python.org/3.6/library/typing.html">https://docs.python.org/3.6/library/typing.html</a> </p>
<h3>dunder</h3>
<p>Module level "dunders" (i.e. names with two leading and two trailing underscores) such as __all__, __author__, __version__, etc. should be placed after the module docstring but before any import statements except from __future__ imports. Python mandates that future-imports must appear in the module before any other code except docstrings:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">"""This is the example module.

This module does stuff.
"""

from __future__ import barry_as_FLUFL

__all__ = ['a', 'b', 'c']
__version__ = '0.1'
__author__ = 'Cardinal Biggles'

import os
import sys</pre>
<p>What Are Dunder Methods?</p>
<p>In Python, special methods are a set of predefined methods you can use to enrich your classes. They are easy to recognize because they start and end with double underscores, for example __init__ or __str__.</p>
<p>As it quickly became tiresome to say under-under-method-under-under Pythonistas adopted the term “dunder methods”, a short form of “double under.”</p>
<p>These “dunders” or “special methods” in Python are also sometimes called “magic methods.” But using this terminology can make them seem more complicated than they really are—at the end of the day there’s nothing “magical” about them. You should treat these methods like a normal language feature.</p>
<p>Dunder methods let you emulate the behavior of built-in types. For example, to get the length of a string you can call len('string'). But an empty class definition doesn’t support this behavior out of the box:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class NoLenSupport:
    pass

&gt;&gt;&gt; obj = NoLenSupport()
&gt;&gt;&gt; len(obj)
TypeError: "object of type 'NoLenSupport' has no len()"</pre>
<p>To fix this, you can add a __len__ dunder method to your class:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class LenSupport:
    def __len__(self):
        return 42

&gt;&gt;&gt; obj = LenSupport()
&gt;&gt;&gt; len(obj)
42</pre>
<p>Another example is slicing. You can implement a __getitem__ method which allows you to use Python’s list slicing syntax: obj[start:stop].</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#括號後與括號前不要有空白)
spam(ham[1], {eggs: 2}) 

#逗點後不要有空白
foo = (0,)

# 冒號緊接在 4 之後
if x == 4: print x, y; x, y = y, x

ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]
ham[lower:upper], ham[lower:upper:], ham[lower::step]
ham[lower+offset : upper+offset]
ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]
ham[lower + offset : upper + offset]

spam(1)

x = 1
y = 2
long_variable = 3

i = i + 1
submitted += 1
x = x*2 - 1
hypot2 = x*x + y*y
c = (a+b) * (a-b)

def complex(real, imag=0.0):
    return magic(r=real, i=imag)

def munge(input: AnyStr): ...
def munge() -&gt; AnyStr: ...

def munge(sep: AnyStr = None): ...
def munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...

if foo == 'blah':
    do_blah_thing()
do_one()
do_two()
do_three()

FILES = [
    'setup.cfg',
    'tox.ini',
    ]
initialize(FILES,
           error=True,
           )</pre>
<p>Reference</p>
<p><a href="https://dbader.org/blog/python-dunder-methods">https://dbader.org/blog/python-dunder-methods</a> </p>
<h3>Flake8</h3>
<p>Flake8 is a Tool for style guide enforcement.</p>
<p><a href="http://flake8.pycqa.org/en/latest/">http://flake8.pycqa.org/en/latest/</a> </p>
<p><a href="https://github.com/PyCQA/pyflakes">https://github.com/PyCQA/pyflakes</a> </p>
<p>Python 程式編寫, 必須通過 Flake8 格式查驗.</p>
<h3>unittest</h3>
<p><a href="https://docs.python.org/3/library/unittest.html">https://docs.python.org/3/library/unittest.html</a> </p>
<p><a href="http://pythontesting.net/framework/unittest/unittest-introduction/">http://pythontesting.net/framework/unittest/unittest-introduction/</a> </p>
<h4>doctest:</h4>
<p><a href="https://docs.python.org/3.7/library/doctest.html">https://docs.python.org/3.7/library/doctest.html</a> </p>
<p>doctest 可用來執行程式文件中所提供的範例, 確認能得到預期結果. doctest 可以用在比較簡單的程式測試, 較複雜的測試流程, 則建議使用 unittest.</p>
<p>unittest 標準工作流程:</p>
<ol>
<li>繼承 unittest.TestCase , 定義希望進行 unit test 的新類別.</li>
<li>在新類別中定義所需的測試方法, 各方法必須以 test_ 開頭命名.</li>
<li>執行 unittest.main() 以啟動所定義類別中的各測試方法.<br/><br/></li>
</ol>
<p>簡單 unit test 範例:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import unittest

def multiply(a, b):
    return a * b
 
class TestUM(unittest.TestCase):
 
    def setUp(self):
        pass
 
    def test_numbers_3_4(self):
        self.assertEqual( multiply(3,4), 12)
 
    def test_strings_a_3(self):
        self.assertEqual( multiply('a',3), 'aaa')
 
if __name__ == '__main__':
    unittest.main()</pre>
<p></p>
<h3>lark</h3>
<p><a href="https://github.com/lark-parser/lark">https://github.com/lark-parser/lark</a> </p>
<p><a href="http://blog.erezsh.com/how-to-write-a-dsl-in-python-with-lark/">http://blog.erezsh.com/how-to-write-a-dsl-in-python-with-lark/</a> </p>
<p>如何利用 python lark 模組寫 DSL (Domain Specific Language)</p>
<p>Matlab 與 Mathematica 就是 DSL 的典型範例.</p>
<p>首次使用 Logo 時, 感覺跟變魔術沒兩樣. 只要輸入簡短的指令組合, 就能在螢幕畫出非常複雜的圖形.</p>
<p>下面這一段教學, 將要展示如何利用 70 行程式, 透過解讀與解譯過程完成類似 Logo 的程式語言. 延續此一應用, 您將可自行打造自己的語言. 為了完成此一任務, 我們將使用 Lark 解讀程式庫與 turtle 繪圖模組. 讓我們開始!</p>
<p>What is a DSL and why should you care</p>
<p>When writing a software project, you might encounter information that your language of choice isn't very good at expressing or representing. It could be data, configuration, a list of commands, etc. Some abstraction might be missing, the language might prove too verbose, or writing the code might be too error-prone because there's no appropriate validation. When that happens, you might benefit from creating your own language, that describes the information in a clean and concise manner. That's called a "Domain-Specific Language", or DSL.</p>
<p>DSLs tend to be small and concise. And like most things, they have both pros and cons.</p>
<p>DSL Pros:</p>
<ul>
<li>Complete freedom of expression (within computational bounds)</li>
<li>Clean and concise code that's easier to read, write, and debug.</li>
<li>Validation by design</li>
<li>Dynamic - it can be evaluated in run-time</li>
<li>Reuse: DSLs can be shared between different languages and platforms (for example: Regular expressions)</li>
</ul>
<p>DSL Cons:</p>
<ul>
<li>Now there's another language to learn (but that's a lazy excuse)</li>
<li>You won't have direct access to Python's features (or whatever is your host language)</li>
<li>It's detached from your IDE</li>
<li>It might be difficult to design and to code(For a more detailed overview of DSLs pros and cons, visit here)</li>
</ul>
<p>Overall, there are many great reasons to use DSLs, but many programmers choose to avoid it, rightfully fearing the DSL will add complexity and take a long time to write. But, it doesn't have to be this way...</p>
<p>I'm going to take you step-by-step as we write our own DSL, starting with a naive solution, until we reach a working program with a parser and an interpreter. Hopefully, by the end of it I will convince you that DSLs can be a viable and cost-effective choice for your projects.</p>
<p>Designing a language</p>
<p>In this tutorial, we're going to write a DSL for Python's Turtle module! For those who don't know it, it's a Logo-inspired module for drawing vector graphics using simple commands. The first step when designing a language is to learn about the problem we're trying to solve (the domain). So if you never used the Turtle module, it might be prudent to look at some code, browse the docs, or play around with it a little bit.</p>
<p>To summarize, the Turtle module is used via a series of instructions. We can move the "turtle" on the canvas with spatial instructions (left, right, forward, etc.), we can change the size &amp; color of the turtle's pen, instruct it to move with or without drawing, or otherwise alter the state of the turtle and/or window.</p>
<p>The next step is to choose what your language is going to do: Which features or concepts it's going to support, and what you will leave out. To keep this tutorial short, we're going to support only a small subset of instructions:</p>
<ol>
<li>Left, right, forward and backward</li>
<li>Color</li>
<li>Repeat - since we can't use Python's "for" directly</li>
<li>Fill - activates filling mode. Chosen to demonstate structure</li>
</ol>
<p>Now that we know the contents of the language, we can move on to the third step: Choosing a syntax. This step is part common-sense, part art, and part subjective opinion. However, I do believe there are some guidelines that are innately true.</p>
<p>Guidelines to choosing syntax for a language:</p>
<ol>
<li>Use popular idioms, based on your target audience. By using structures, keywords and symbols everyone already knows, you cut the time it takes to learn your language.</li>
<li>Brevity of expression should correlate to the size of the language. For small languages, it's okay to use a lot of shorthands (see: regexps), but when the language gets bigger, opt for clarity instead (aka don't be Perl).</li>
<li>Design for innate correctness. Try to design the language so it will promote good practices, and discourage abuse.</li>
</ol>
<p>For example, Python was aimed at C programmers (among others), so it borrowed C syntax like += for in-place addition , and keywords like break and continue.</p>
<p>For our Turtle DSL, I will borrow my idioms and syntax from Logo, but with a modern twist. We'll use {curly-braces} for code blocks. And since we'll be designing a very small, interpreted language, we can make our basic commands one-lettered.</p>
<p>Here's how a program looks in my imaginary Turtle Language:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">c green blue    # fg &amp; bg colors
fill { repeat 36 {
  f200 l170     # forward &amp; left
}}
</pre>
<p>But it's not going to be imaginary for long! Let's move on to the practical side of things.</p>
<p>Writing the grammar</p>
<p>Step 1) EBNF</p>
<p>Now that we know what our language looks like, we can to write a formal grammar for it. Later, we will feed our grammar to the parser, so it will know how to parse free-form text written in our language into a structured parse-tree that's easy to work with programmatically.</p>
<p>The standard way to write grammars is in EBNF form, and that's what we'll do in this tutorial. EBNF grammars are basically a hierarchy of rules and strings of the form:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">name: production</pre>
<p>Where production is a list of names and values.</p>
<p>Or informally:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">rule: rule1, "keyword", rule2, rule3, ..</pre>
<p>Rules can be recursive, but it's better to describe loops with repetition-operators. For example, this is how I would define Python's dictionary syntax in EBNF:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">dict: "{" dict_item* "}"
dict_item: name ":" value
...</pre>
<p>This is enough to allow us to describe an instruction in Turtle Language:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">instruction: "f" number
           | "b" number
           | "l" number
           | "r" number
           | "c" color [color] // bgcolor is optional
           | "fill" code_block
           | "repeat" number code_block
 
code_block: "{" instruction+ "}"  // one or more instructions
</pre>
<p>This is an accurate and fairly succinct description of our syntax. We could however make it a little shorter, by avoiding repetition.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">instruction: ("f"|"b"|"l"|"r") number
           | "c" color [color]
           | "fill" code_block
           | "repeat" number code_block
 
code_block: "{" instruction+ "}"
</pre>
<p>This variation is equivalent to the first one, just a little shorter.</p>
<p>You may have noticed our grammar contains a recursion between "code_block" and "instruction". That's totally fine, this is what parsers live for.</p>
<p>We still haven't defined "number" and "color". We'll do that next.</p>
<p>Step 2) Lark</p>
<p>So far, everything we did was fairly agnostic of a specific parsing library. But now is a good time to introduce Lark.</p>
<p>Lark is an open-source parsing library I spent the last month writing. I know, there are dozens of other parsing libraries. Why introduce yet another one? Here's why:</p>
<p>Lark uses the Earley parsing algorithm, a dynamic parsing algorithm that can handle all context-free grammars, including ambiguous grammars. It also supports a scannerless mode, which means terminals (tokens) are resolved by Earley at parse-time. The end result is that when you write your grammar with Lark, you don't have to worry about restrictions or state-machines. All grammar structures are allowed. If your grammar makes logical sense, Lark can parse it.</p>
<p>Lark is the only library that can make this claim. It also accepts grammars in a convenient EBNF form. It supplies a library of common terminals (i.e. regexps), to save its users from re-inventing the wheel in every grammar. And it can build a parse-tree automatically for every grammar.</p>
<p>Here ends the sales pitch, although I could go on. Let's look at how our grammar will look like in Lark, and I will follow with a thorough explanation:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">start: instruction+
 
instruction: ("f"|"b"|"l"|"r") NUMBER
           | "c" COLOR [COLOR]
           | "fill" code_block
           | "repeat" NUMBER code_block
 
code_block: "{" instruction+ "}"
 
COLOR: ("a".."z")+   
NUMBER: ("0".."9")+
WHITESPACE: (" " | "\n")+
%ignore WHITESPACE
</pre>
<p>(If you are following this by trying the the code, that's awesome! Don't forget to escape the '\n'.)</p>
<p>In the first line, we tell Lark that our program is basically a list of instructions.</p>
<p>The next part is literally a copy-paste of our EBNF definition from above, only we change "color" and "number" to their terminal form, and define them.</p>
<p>When names are written in uppercase in Lark, they are treated as terminals. Terminals are a little like rules: They also match input by combining smaller particles. But while rules match structure, terminals match strings. If we defined COLOR as a rule instead (lowercase color), the parser will create structure where it makes no sense (For example, Tree("r", "e", "d") instead of just the string "red").</p>
<p>Another thing about terminals is that they are greedy, which is just what we need in this case.</p>
<p>Then finally, the last line tells lark to ignore whitespace. (Extra information!)</p>
<p>Now it's time to see how we did. Let's run Lark on our sample language using our grammar, and see what we get:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">text = """
c red yellow
fill { repeat 36 {
    f200 l170
}}    
"""
 
from lark import Lark
parser = Lark(turtle_grammar)  # Scannerless Earley is the default
 
print(parser.parse(text))
</pre>
<p>We get this:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Tree(start, [Tree(instruction, [Token(COLOR, u'red'), Token(COLOR, u'yellow')]), Tree(instruction, [Tree(code_block, [Tree(instruction, [Token(NUMBER, u'36'), Tree(code_block, [Tree(instruction, [Token(NUMBER, u'200')]), Tree(instruction, [Token(NUMBER, u'170')])])])])])])</pre>
<p>Let's make it more readable:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&gt;&gt;&gt; print(parser.parse(text).pretty())
start
  instruction
    red
    yellow
  instruction
    code_block
      instruction
        36
        code_block
          instruction   200
          instruction   170
</pre>
<p>This is much better! We get a tree that correctly represents the structure of our program. However, it's a little hard to tell, because some of the strings are missing! This is by design: Lark automatically removes anonymous strings because it assumes they are just punctuation. This is a very convenient default, and there are several ways to keep the strings. One obvious way is to make them into named terminals. Then they are no longer anonymous, and they will appear in the tree. We're going to do this for movement (b/f/l/r). But we don't really need the strings themselves, we just want to know which instruction was specified. So for the rest, we'll use a more elegant approach: Rename the branches, by using aliases.</p>
<p>While we're at it, let's also simplify the grammar and import some of our terminals from our grammar library, instead of defining them.</p>
<p>Let's just rewrite the grammar, since the change is fairly straight-forward:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">start: instruction+
 
instruction: MOVEMENT NUMBER            -&gt; movement
           | "c" COLOR [COLOR]          -&gt; change_color
           | "fill" code_block          -&gt; fill
           | "repeat" NUMBER code_block -&gt; repeat
 
code_block: "{" instruction+ "}"
 
MOVEMENT: "f"|"b"|"l"|"r"
COLOR: LETTER+
 
%import common.LETTER
%import common.INT -&gt; NUMBER
%import common.WS
%ignore WS
</pre>
<p>Imported terminals are defined using regular EBNF, just like we defined COLOR and NUMBER. You can see their definition here (common.g).</p>
<p>And when we run the parser again, we get this:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">start
  change_color
    red
    yellow
  fill
    code_block
      repeat
        36
        code_block
          movement
            f
            200
          movement
            l
            170
</pre>
<p>This parse-tree expresses exactly what we want, and nothing more. That is a good ideal to aspire to: A minimal parse-tree is a happy parse-tree!</p>
<p>Now that we know how to turn free-form text in Turtle Language into a structural tree, it's time to write the actual interpreter!</p>
<p>Interpreting the parse-tree</p>
<p>The purpose of a language is to run free. Let's allow Turtle Language to start running.</p>
<p>It's common practice, when interpreting code, to compile the parse-tree into byte code that can run efficiently, and is more compact. We are not troubled by such earthly concerns; our toy DSL is small and doesn't do much. We are going to do something a little taboo: Run by directly reading from our pretty parse tree.</p>
<p>We will write a function called "run_instruction" that accepts branches of the tree, and executes them according to the branch name.</p>
<p>The Tree class in Lark has two attributes: data, which may contain any value (i.e any Python object), and children, which is a mixed list of Trees and values. So, a single tree structure is just a bunch of Tree instances nested inside each other as children. The Tree.pretty() method, that we saw earlier, just prints out these two attributes in an indented format according to their nesting-level. In the context of a parse-tree, these attributes represent specific concepts:</p>
<p>1. data -&gt; returns the name of the rule that was matched<br/>2. children -&gt; returns the subrules (trees) and tokens (strings) that were matched inside it. This is known as the production, or expansion.</p>
<p>With that knowledge, the function itself is simple:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import turtle
 
def run_instruction(t):
    if t.data == 'change_color':
        turtle.color(*t.children)   # We just pass the color names as-is
 
    elif t.data == 'movement':
        name, number = t.children
        {
            'f': turtle.fd,
            'b': turtle.bk,
            'l': turtle.lt,
            'r': turtle.rt,
        }[name](int(number))
 
    elif t.data == 'repeat':
        count, block = t.children
        for i in range(int(count)):
            run_instruction(block)
 
    elif t.data == 'fill':
        turtle.begin_fill()
        run_instruction(t.children[0])
        turtle.end_fill()
 
    elif t.data == 'code_block':
        for cmd in t.children:
            run_instruction(cmd)
 
    else:
        raise SyntaxError('Unknown instruction: %s' % t.data)  
</pre>
<p>This straight-forward Python code is really all we need to run the instructions.</p>
<p>And now, for the main-loop:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">parser = Lark(turtle_grammar)
 
def run_turtle(program):
    parse_tree = parser.parse(program)
 
    for inst in parse_tree.children:
        run_instruction(inst)
 
def main():
    while True:
        code = input('&gt; ')
        try:
            run_turtle(code)
        except Exception as e:
            print(e)
</pre>
<p>Run this under python, and you can now program interactively in the Turtle Language!</p>
<p>We can also call run_turtle directly:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">run_turtle("""
c green blue
fill { repeat 36 {
  f200 l170
}}
""")
</pre>
<p>To get this unblinking eye:</p>
<p><img alt="" height="227" src="/images/turtle_dsl.png" width="258"/></p>
<p><a href="https://github.com/lark-parser/lark/blob/master/examples/turtle_dsl.py">https://github.com/lark-parser/lark/blob/master/examples/turtle_dsl.py</a> </p>
<p>Conclusion</p>
<p>In this tutorial, we implemented a parser and an interpreter in few lines of code, and without having to know many technical details.</p>
<p>We implemented a very small language, but it's easy to extend. Adding commands should be very simple, since the template for that already exists. Adding variables that can be used in expressions won't be much of a challenge either. You can see how Lark's calculator example does exactly that with relative ease. Combining these two grammars with a little bit of glue code, will result in something that feels like a real programming language, albeit simplistic.</p>
<p>I hope I inspired to go and write a DSL for your project. If you need any help in doing so, or if Lark is missing a feature you need dearly, drop me a line and I'll be happy to assist you. You can reach me at erezshin at gmail com.</p>
<h2>Kotlin</h2>
<p><a href="https://kotlinlang.org/">https://kotlinlang.org/</a> 是最近幾年崛起的計算機程式語言.</p>
<p><a href="http://kotlinlang.org/docs/kotlin-docs.pdf">http://kotlinlang.org/docs/kotlin-docs.pdf</a> (<a href="http://www.liying-cn.net/kotlin/docs/kotlin-docs.pdf">中文翻譯.pdf</a>)</p>
<p><a href="https://www.tutorialspoint.com/kotlin/kotlin_tutorial.pdf">https://www.tutorialspoint.com/kotlin/kotlin_tutorial.pdf</a> </p>
<p><a href="http://plugins.netbeans.org/plugin/68590/kotlin">http://plugins.netbeans.org/plugin/68590/kotlin</a> </p>
<p><a href="https://www.uv.es/capgeminiuv/documents/Kotlin_for_Android_Development.pdf">https://www.uv.es/capgeminiuv/documents/Kotlin_for_Android_Development.pdf</a> </p>
<p><a href="https://ithelp.ithome.com.tw/users/20107165/ironman/1351">https://ithelp.ithome.com.tw/users/20107165/ironman/1351</a> (脫魯實錄)</p>
<p><a href="http://steve-yegge.blogspot.com/2017/05/why-kotlin-is-better-than-whatever-dumb.html">http://steve-yegge.blogspot.com/2017/05/why-kotlin-is-better-than-whatever-dumb.html</a> (<a href="https://medium.com/@steve.yegge">Steve Yegge</a>)</p>
<p><img alt="" height="398" src="/images/nice_kotlin.png" width="600"/></p>
<h2>Red Lang</h2>
<p><a href="https://www.red-lang.org/">https://www.red-lang.org/</a> </p>
<p><a href="http://www.mycode4fun.co.uk/About-Red-Programming">http://www.mycode4fun.co.uk/About-Red-Programming</a> </p>
<h1>工具</h1>
<p>
<script src="https://scrum-3.github.io/web/brython/brython.js"></script>
<script src="https://scrum-3.github.io/web/brython/brython_stdlib.js"></script>
</p>
<div id="cal2"></div>
<p>
<script>
window.onload=function(){
brython(1);
}
</script>
<script type="text/python3">
from browser import document, html
import calendar
import locale
 
cal2 = document["cal2"]
 
def getClassdate(year=2018, startM=9, startD=10, w=0, note=""):
    # w=0 表示課程排在星期一
    # startM 表示開學月份, startD 表示開學日
    # note 為課程初始告示
    # default calendar MONDAY is the first day of the week
    # 每學期共有 18 週
    totalW = 18
    count = 0
    # output = "2017 Spring 2bCD (三) 08:10-12:00 各週上課日期: "
    output = note + html.BR()
    # 若必須全年搜尋則 7 改為 12, 但是因為只有 18 週, 因此邏輯要修改讓程式較快結束
    for month in range(startM, 13):
        monthArray = calendar.monthcalendar(2018, month)
        for week in range(len(monthArray)):
            weekArray = monthArray[week]
            # 只需要列出星期 (w+1)
            if weekArray[w] != 0:
                if month == startM:
                    if weekArray[w] > startD:
                        count += 1
                        if count <= totalW:
                            if month == 3 and weekArray[w] == 31:
                                output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + "(放假), "
                            else:
                                output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + ", "
                else:
                    count += 1
                    if count <=  totalW:
                        if month == 3 and weekArray[w] == 31:
                            output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + "(放假), "
                        else:
                            output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + ", "
    cal2 <= output
 
# 2b 電腦輔助設計實習 (一 w=0)
getClassdate(year=2018, startM=9, startD=9, w=0, note="2018 Fall 2bCADP (一) 09:10-12:00 各週上課日期: ")
cal2 <= html.BR() + html.BR()
# 1b 計算機程式 (一 w=0)
getClassdate(year=2018, startM=9, startD=9, w=0, note="2018 Fall 1bCP (一) 13:20-16:10 各週上課日期: ")
cal2 <= html.BR() + html.BR()
# 2a 電腦輔助設計實習 (五 w=4)
getClassdate(year=2018, startM=9, startD=9, w=4, note="2018 Fall 2aCADP (五) 09:10-12:00 各週上課日期: ")
cal2 <= html.BR() + html.BR()
# 1a 計算機程式 (五 w=4)
getClassdate(year=2018, startM=9, startD=9, w=4, note="2018 Fall 1aCP (五) 13:20-16:10 各週上課日期: ")
cal2 <= html.BR() + html.BR()
# ve1a 計算機程式 (五 w=4)
getClassdate(year=2018, startM=9, startD=9, w=4, note="2018 Fall ve1aCP (五) 18:30-20:00 各週上課日期: ")
cal2 <= html.BR() + html.BR()
</script>
</p>
<p>USB 可攜程式開發系統</p>
<p>可解譯 ANSI C</p>
<p>可解譯 Python</p>
<p>可解譯 Lua</p>
<p>可攜啟動設定:</p>
<p>start.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
REM 設定 y 硬碟代號與 data 目錄對應
set Disk=y
subst %Disk%: "data"
REM 設定 leo 相關對應 Home 位置
set HomePath=%Disk%:\home
set HomeDrive=%Disk%:\home
set Home=%Disk%:\home
REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"
REM 將後續的指令執行, 以 %Disk% 為主
%Disk%:
REM 設定 PYTHONPATH
set PYTHONPATH=%Disk%:\python36\DLLs;%Disk%:\python36\Lib;%Disk%:\python36\Lib\site-packages;
set PYTHONHOME=%Disk%:\python36
REM for Qt and Qt Creator
set LLVM_INSTALL_DIR=%Disk%:\LLVM;
set QBS_INSTALL_DIR=%Disk%:\qbs-windows-x86_64-1.10.0;
REM for TCL
set TCL_LIBRARY=%Disk%:\python36\tcl\tcl8.6
set TK_LIBRARY=%Disk%:\python36\tcl\tcl8.6
REM 設定 Leo 所用的編輯器
set LEO_EDITOR=%Disk%:\scite\bin\Sc1.exe;
set BOOST_ROOT=%Disk%:\boost_1_66_0\;
REM set CMAKE_PREFIX_PATH=%Disk%:\msys64\mingw64\
REM for fossil https 連線設定
REM 若在近端使用 fossil ui 則要蓋掉
REM set HTTPS=on
REM 指令搜尋路徑設定
REM set path1=%PATH%;%Disk%:;%Disk%:\python36;%Disk%:\git\bin;%Disk%:\stunnel\bin;%Disk%:\sqlite-tools;%Disk%:\python36\Scripts;%Disk%:\Git\bin;%Disk%:\vrep331;
REM path1 is base of this portable Python3.6 system
set path1=%Disk%:;%Disk%:\python36;%Disk%:\git\bin;%Disk%:\stunnel\bin;%Disk%:\sqlite-tools;%Disk%:\python36\Scripts;%Disk%:\Git\bin;%Disk%:\vrep331;%Disk%:\python36\Lib\site-packages\PyQt5\Qt\bin;
REM path2 is for pandoc and miktex
set path2=%Disk%:\pandoc-2.0.2;%Disk%:\miktex_portable\texmfs\install\miktex\bin;%Disk%:\lua-5.3.4\bin;%Disk%:\coreutils-5.3.0\bin;%Disk%:\qtcreator-4.7.0-rc1\bin;
REM path3 is for gcc development 
set path3=%Disk%:\msys64\mingw64\bin;%Disk%:\swigwin-3.0.12;%Disk%:\cmake-3.10.1-win64-x64\bin;%Disk%:\diffutils-2.8.7-1\bin;%Disk%:\patch-2.5.9-7\bin;%Disk%:\graphviz-2.38\bin;
set path4=%Disk%:\boost_1_66_0\;%Disk%:\Strawberry\perl\bin;%D%:\jom_1_1_2;%Disk%:\LLVM\bin;%Disk%:\QtCreator\bin;%Disk%:\vrep340_rev1;%Disk%:\python36\tcl\tcl8.6;%Disk%:\xsltproc;
set path5=%Disk%:\ffmpeg-20180504-dc7a8f7-win64-static\bin;%Disk%:\oce-0.18.1\bin\;%Disk%:\oce-0.18.1\lib\;%Disk%:\gnuplot\bin;
set JAVA_HOME=%Disk%:\Java\jdk1.8.0_172;
set ANDROID_HOME=%Disk%:\Android\sdk;
set path6=%Disk%:\Java\jdk1.8.0_172\bin;%Disk%:\Java\jre1.8.0_172\bin;%Disk%:\Android\AndroidStudio\bin;%Disk%:\Android\sdk\tools;%Disk%:\Android\sdk\platform-tools;
REM for Pythonocc under MSYS2 according to https://groups.google.com/forum/?utm_medium=email&amp;utm_source=footer#!msg/pythonocc/z-NI9A-Vyic/8QjD81q-AwAJ
set CSF_GraphicShr=%Disk%:\oce-0.18.1\bin\TKOpenGl.dll
path=%path%;%path1%;%path2%;%path3%;%path4%;%path5%;%path6%;
start /MIN %Disk%:\scite\bin\Sc1.exe
start /MIN %Disk%:\scite\bin\Sc1.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe /k "y:\cp2018.bat"
start /MIN cmd.exe /k "y:\cp2018_http_server.bat
start /MIN cmd.exe /k "y:\cadp2018.bat"
REM 啟動 Leo 編輯器
REM %Disk%:\python36\python.exe %Disk%:\launchLeo.py
REM 啟動 stunnel
REM start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\tmp\fossil_repo
REM start /MIN stunnel.exe
start qtcreator
Exit</pre>
<p>stop.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
REM 關閉 SciTE
taskkill /IM Sc1.exe /F
REM 關閉 python
taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
REM 關閉 stunnel
taskkill /IM stunnel.exe /F
REM 關閉 fossil
taskkill /IM fossil.exe /F
taskkill /IM sharex.exe /F
REM 清除 log 資料
path=%PATH%;
REM del /Q /F  V:\tmp\*.*
REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F
REM taskkill /IM mingw32 /F
EXIT</pre>
<p>在 start.bat 啟動中的:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">start /MIN cmd.exe /k "y:\cp2018.bat"
start /MIN cmd.exe /k "y:\cp2018_http_server.bat"
start /MIN cmd.exe /k "y:\cadp2018.bat"</pre>
<p>需要 cp2018.bat, cp2018_http_server.bat 與 cadp2018.bat, 目的在隨身系統啟動時, 可以直接開啟近端網際內容管理系統.</p>
<p>cp2018.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">cd /d c:\2018\cp2018
python wsgi.py</pre>
<p>cp2018_http_server.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">cd /d c:\2018\cp2018
python http-server.py</pre>
<p>cadp2018.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">cd /d c:\2018\cadp2018
python wsgi.py</pre>
<p>上述使用 cmd.exe /k 執行 batch 檔案的目的, 在執行完指令後, 會回應到 dos command 指令, 以便執行其下的指令.</p>
<p>同時, 在近端或區域網路維護 CMSimfly 時, 需要利用 Python 執行 Flask 框架程式, 且同時利用 cp2018_http_server.py 程式啟動 www 伺服器, 除了可以查驗靜態 CMSimfly 網頁的內容外, 也能一併檢查 reveal.js 與 Pelican Blog 的網頁內容.</p>
<p>當 reveal.js 或 Pelican Blog 希望引用 CMSimfly 內容時, 則引用其最終轉換後的靜態資料相關連結.</p>
<p>隨身系統資料管理:</p>
<p style="padding-left: 30px;">SciTE: 文字檔案編輯器與 Python, ANSI C, 及 Lua 程式解譯器.</p>
<p style="padding-left: 30px;">Leo Editor: 大綱管理器與整合程式開發環境, Python 程式解譯器.</p>
<p style="padding-left: 30px;">Qt Creator: Qt C++ 程式整合開發環境.</p>
<p style="padding-left: 30px;">Eric IDE: PyQt 程式整合開發環境.</p>
<p style="padding-left: 30px;">CMSimfly: 網際內容管理系統, 屬於電子書章節明確的三層次網際資料管理.</p>
<p style="padding-left: 30px;">Pelican: 靜態網誌產生系統, 可分類, 以關鍵字架構及時間序建立的網際流程紀錄.</p>
<p style="padding-left: 30px;">Reveal.js: 網際簡報系統,, 可引用  CMSimfly 及 Pelican Blog 內容的網際簡報系統.</p>
<p>Python 非官方 Windows 模組: <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a> </p>
<h2>Git</h2>
<p><a href="https://git-scm.com/">https://git-scm.com/</a> </p>
<p><a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a> </p>
<p><a href="https://github.com/">https://github.com/</a> </p>
<p><a href="http://www.globallegalchronicle.com/microsofts-7-5-billion-acquisition-of-github/">http://www.globallegalchronicle.com/microsofts-7-5-billion-acquisition-of-github/</a> </p>
<p>git 常用指令</p>
<p>git add .</p>
<p>新增所有改版內容</p>
<p>git commit -m "提交訊息, 用來辨識版本"</p>
<p>在近端提交改版內容</p>
<p>git push</p>
<p>將近端改版內容推送到遠端</p>
<p>git pull (<a href="https://www.git-tower.com/learn/git/faq/difference-between-git-fetch-git-pull">比較</a>與 git fetch 的差異與兩者用法)</p>
<p>拉下遠端新版本內容, 在 fossil scm 使用 fossil update</p>
<p>git log</p>
<p>查驗 git 提交推送紀錄</p>
<p>git status</p>
<p>查驗狀態</p>
<p>git 新增提交推送的身分綁定</p>
<p>以 scrum1@mde.tw 註冊帳號為 scrum-1 為例:</p>
<p>git config --global user.name "scrum-1"</p>
<p>git config --global user.email "scrum1@mde.tw"</p>
<p>若網路直接連線過慢, 可以透過 proxy 執行 git</p>
<p>git config --global http.proxy http://proxy.kmol.info:3128</p>
<p>以上的 git config 會將設定存入 Y:/home/.gitconfig 檔案中</p>
<p>刪除近端與遠端的 Git 分支.</p>
<p>To delete a local branch</p>
<p>git branch -D the_local_branch</p>
<p>To remove a remote branch</p>
<p>git push origin :the_remote_branch</p>
<p>or</p>
<p>git push origin --delete the_remote_branch</p>
<h2>Fossil SCM</h2>
<p><a href="https://www.fossil-scm.org">https://www.fossil-scm.org</a></p>
<p>Fossil SCM 是一套簡潔可靠的分散式組態管理工具, 內建網際介面, 臭蟲追蹤, 快記與技術筆記功能的單一可執行檔.</p>
<p>Fossil SCM 為自由開放源軟體, 使用者可以自行在 Windows 或 Linux 環境中編譯. 例如: 在 Windows 環境, 以 <a href="https://www.msys2.org/">MSYS2</a> 編譯: <a href="http://lab.kmol.info/blog/msys2_compile_fossil_scm.html">http://lab.kmol.info/blog/msys2_compile_fossil_scm.html</a></p>
<p>在 Windows 單機環境使用:</p>
<p>下載 fossil.exe: <a href="https://www.fossil-scm.org/index.html/uv/download.html">https://www.fossil-scm.org/index.html/uv/download.html</a></p>
<p>解開壓縮檔案後, 可以直接在 Windows 命令列中執行 fossil.exe</p>
<p>目前 Fossil SCM 最新版為 2.6, 若配合遠端 Ubuntu 伺服器使用, 必須確認客戶端與伺服器端的 fossil 版本一致, 否則將可能造成使用上的問題.</p>
<p>查核 fossil.exe 版本:</p>
<p>fossil version</p>
<p>利用 fossil help 可以列出常用指令.</p>
<p>Fossil SCM 單機基本操作:</p>
<p>建立倉儲檔案</p>
<p>fossil init foo.fossil</p>
<p>表示建立一個新的倉儲專案, 且倉儲檔案名稱為 foo.fossil, 在 fossil SCM 中建立新專案時, 登入用戶名稱會成為內定的倉儲管理者, 若要指定管理者名稱, 可以附加 -A USERNAME 或 --admin-user USERNAME, 新增的倉儲就會以 USERNAME 作為管理者名稱, 且指定對應的密碼 (有關<span> </span><a href="http://fossil-scm.org/xfer/doc/trunk/www/password.wiki">fossil 密碼管理</a>), 當使用者在近端以網際模式啟動該倉儲時 (以<span> </span><a href="http://fossil-scm.org/index.html/help?cmd=ui">fossil ui</a><span> </span>指令) fossil SCM 會直接以管理者身份登入, 無需輸入管理者密碼.</p>
<p>以 fossil sql 指令擷取 .fossil 檔案內容</p>
<p>使用者以 fossil init foo.fossil 建立倉儲檔案後, 可以利用 fossil 指令查驗倉儲資料庫檔案的內容.</p>
<p>fossil sql -R foo.fossil</p>
<p>進入 sqlite 指令環境後, 可以利用 .schema user 查驗 user 資料表的欄位設計.</p>
<p>以 select login, pw, cap from user;</p>
<p>可以查詢目前 foo.fossil 檔案中 user 資料表 login, pw 與 cap 等3個欄位的資料內容.</p>
<p>若要更改特定 login 登入帳號的 pw 或 cap 可以使用下列 sqlite3 SQL 語法:</p>
<p>update user set pw='mynewpassword' where login='myloginaccount';</p>
<p>update user set cap='s' where login='myloginaccount';</p>
<p>倉儲 clone</p>
<div class="line number1 index0 alt2"><code class="jscript plain"><code class="jscript plain"></code></code>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">$ fossil clone http://your_domain_name ~/fossils/yourdb.fossil
$ fossil open ~/fossils/foo.fossil</pre>
<p>上述 fossil 指令表示要從 http://your_domain_name fossil 伺服器中, clone 倉儲檔案, 然後存在近端的 ~/fossils/yourdb.fossil 檔案中.</p>
</div>
<p>接下來則可以選擇適當的目錄, 以 fossil open 將 .fossil 檔案解開, 此所在目錄即為該 .fossil 倉儲的 近端工作目錄.</p>
<h4>Fossil SCM</h4>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jPSOxVjK8A0" width="560"></iframe></p>
<h4>SQLite</h4>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jN_YdMdjVpU" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Jib2AmRb_rk" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gpxnbly9bz4" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ghtpJnrdgbo" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/XRPzvDAOxSc" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/zyGEdOiQkVk" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/kHmwv3I1Kxk" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/MvLJqi0FQoA" width="560"></iframe></p><h2>Leo Editor</h2>
<p><a href="http://www.leoeditor.com/">http://www.leoeditor.com/</a> </p>
<h2>SCiTE</h2>
<p><a href="https://www.scintilla.org/SciTE.html">https://www.scintilla.org/SciTE.html</a> </p>
<p>利用 SciTE 執行 Pelican 網誌 Markdown 轉為 html:</p>
<p>SciTEUser.properties 設定</p>
<p>以下的設定, 是將近端與遠端<span> </span><a href="https://github.com/getpelican/pelican">Pelican</a><span> </span>轉檔指令, 設為 Pelican-blog 與 Github-blog 下拉式功能表, 位於 Tools-Go 下方, 唯一的限制是, 當執行這兩個指令時,<span> </span><a href="http://www.scintilla.org/SciTE.html">SciTE</a><span> </span>必須處於開啟 content 目錄之外的 local_publishconf.py 檔案, 因為<span> </span><a href="http://www.scintilla.org/SciTE.html">SciTE</a><span> </span>會以開啟檔案所在目錄, 執行所設定的<span> </span><a href="https://github.com/getpelican/pelican">Pelican</a><span> </span>指令.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">import Properties\python
import _platform
import _config
 
#~ #  1142  Pelican-blog
command.name.42.*=Pelican-blog
command.42.*="pelican content -o blog -s local_publishconf.py"
#command.subsystem.42.*=2
#command.quiet.42.*=1
command.shortcut.42.*=Ctrl+Shift+P
 
#~ #  1143 Github-blog
command.name.43.*=Github-blog
command.43.*="pelican content -o blog -s publishconf.py"
#command.subsystem.42.*=2
#command.quiet.42.*=1
command.shortcut.43.*=Ctrl+Shift+G</pre>
<div></div>
<div>啟動 IPv4 或 IPv6 www 伺服器
<p>當<span> </span><a href="https://github.com/getpelican/pelican">Pelican</a><span> </span>轉檔指令執行結束後,<span> </span><a href="http://www.scintilla.org/SciTE.html">SciTE</a><span> </span>會在輸出區列出執行結束訊息, 若轉檔過程發生錯誤, 也會一併顯示. 之後為了檢視轉換完成的近端簡報或網誌檔案, 必須將原先位於<span> </span><a href="http://leoeditor.com/">Leo Editor</a><span> </span>button 區的按鈕 Python3 程式移出, 分別存為 .py 檔案.</p>
<p>由於原先的<span> </span><a href="http://leoeditor.com/">Leo Editor</a><span> </span>button 位於 users 目錄中執行, 因此轉出的 .py 檔案也存入 users 目錄中, 程式內容如下:</p>
<p>users/ipv4_www_server.py 程式檔</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#ipv4_www_server.py 存入 users 目錄
import os
import subprocess
import threading
import http.server, ssl
 
def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 5443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print(os.getcwd())
    print("5443 https server started")
    httpd.serve_forever()
 
# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</pre>
<p><span>users/ipv6_www_server.py 程式檔</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#ipv6_www_server.py 存入 users 目錄
import os
import subprocess
import threading
import socket
import http.server, ssl
 
class HTTPServerV6(http.server.HTTPServer):
    address_family = socket.AF_INET6
 
def domake():
    # build directory
    os.chdir("./../")
    ipv6_address = '::1'
    server_address = (ipv6_address, 6443)
    #httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd = HTTPServerV6(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("6443 https server started")
    httpd.serve_forever()
 
# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</pre>
<p></p>
</div>
<h2>TinyCC</h2>
<p><a href="https://bellard.org/tcc/">https://bellard.org/tcc/</a> </p>
<p><a href="https://github.com/jerch/python-tinycc">https://github.com/jerch/python-tinycc</a> </p>
<p><a href="https://github.com/SasView/tinycc">https://github.com/SasView/tinycc</a> </p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

/* a struct with some bytes and a length */
typedef struct Test {
    int length;
    unsigned char *bytes;
} Test;

/* some globals */

#ifdef STANDALONE
Test test = {10, "standalone"};
#else
Test test = {26, "abcdefghijklmnopqrstuvwxyz"};
#endif

int value = 12345;

int main(int argc, char **argv) {
    int i;
    char **pos = argv;

    printf("Hello Tiny C!\n");

    /* list arguments */
    for (i=0; i&lt;argc; ++i, ++pos) {
        printf("arg %d: %s\n", i, *pos);
    }

    /* byte printing the hard way ;) */
    printf("test.value: '");
    for (i=0; i&lt;test.length; ++i)
        printf("%c", *(test.bytes+i));
    printf("'");


    if (*test.bytes == 'a')
        printf(" - not so impressive.\n");
    else if (*test.bytes == 's')
        printf(" - ok.\n");
    else
        printf(" - Busted!\n");
    return 0;
}</pre>
<p>利用 Tiny C 編譯 Tiny C</p>
<p>利用 Tiny C compiler 編譯 Windows 10 64 位元 dll 動態連結庫, 並由 Python 程式呼叫執行.</p>
<p><span>從 </span><a href="http://download.savannah.gnu.org/releases/tinycc/">http://download.savannah.gnu.org/releases/tinycc/</a><span> </span><a href="http://download.savannah.gnu.org/releases/tinycc/tcc-0.9.27-win64-bin.zip">下載</a><span> Win64 C 程式編譯器, 並</span><a href="http://download.savannah.gnu.org/releases/tinycc/tcc-0.9.27.tar.bz2">下載</a><span> Tiny C compiler 0.9.27版程式原始碼. 利用下列批次檔案進行編譯.</span></p>
<p><span>compile.bat 檔案內容:</span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">echo Use TCC to compile TCC

set /p VERSION= &lt; VERSION
echo &gt; config.h #define TCC_VERSION "%VERSION%"

 
echo Set CC=tcc
 
set CC=tcc
set target=-DTCC_TARGET_PE -DTCC_TARGET_X86_64
set P=64
 
echo tools: tiny_impdef.exe, tiny_libmaker.exe
 
%CC% %target% win32/tools/tiny_impdef.c -o tiny_impdef.exe
%CC% %target% win32/tools/tiny_libmaker.c -o tiny_libmaker.exe
 
echo Compile libtcc.dll
 
if not exist libtcc\nul mkdir libtcc
%CC% %target% -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE libtcc.c -o libtcc.dll
tiny_impdef libtcc.dll -o libtcc/libtcc.def
 
echo Compile tcc.exe
 
%CC% %target% tcc.c -o tcc.exe -ltcc -Llibtcc
 
echo Compile libcc1.a
 
%CC% %target% -c lib/libtcc1.c
%CC% %target% -c win32/lib/crt1.c
%CC% %target% -c win32/lib/wincrt1.c
%CC% %target% -c win32/lib/dllcrt1.c
%CC% %target% -c win32/lib/dllmain.c
%CC% %target% -c win32/lib/chkstk.S
%CC% %target% -c lib/alloca86_64.S
tiny_libmaker lib/libtcc1.a libtcc1.o alloca86_64.o crt1.o wincrt1.o dllcrt1.o dllmain.o chkstk.o</pre>
<p>編譯 dll 動態程式庫</p>
<p><span>首先, 建立一個 multiply.c 程式:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int multiply(int, int);
 
__declspec(dllexport) int
multiply(int num1, int num2)
{
return num1 * num2;
}</pre>
<p>利用下列指令, 將 multiply.c 編譯為動態連結庫 myltiply.dll</p>
<p>tcc -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE multiply.c -o multiply.dll</p>
<p>接著利用下列 Python3 程式, 透過 ctypes 模組導入 multiply.dll, 並且執行動態連結程式庫中的 multiply() 函式.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import ctypes
 
lib = ctypes.CDLL('multiply.dll')
result = lib.multiply(3, 2)
print(result)</pre>
<p>因為<span> </span><a href="https://docs.python.org/3/library/ctypes.html">ctypes</a><span> </span>內建傳回值為 int, 因此若 C 對應動態連結庫輸入或傳回值為浮點數, 就必須手動宣告.</p>
<p>例如, 將上述函式的輸入與輸出均由 int 改為 float 如下:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// multiply2.c
#include &lt;stdio.h&gt;
 
float multiply(float, float);
 
__declspec(dllexport) float
multiply(float num1, float num2)
{
return num1 * num2;
}</pre>
<p>可利用下列指令, 將 multiply2.c 編譯為動態連結庫 myltiply2.dll</p>
<p>tcc -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE multiply2.c -o multiply2.dll</p>
<p>但是 Python3 程式部份就必須改為:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import ctypes
 
lib = ctypes.CDLL('multiply2.dll')
# By default functions are assumed to return the C int type. Other return types can be specified by setting the restype attribute of the function object.
lib.multiply.restype = ctypes.c_float
result = lib.multiply(ctypes.c_float(3.0), ctypes.c_float(2.0))
print(result)</pre>
<p>有關 Tiny C Compiler 資料位於 <a href="https://github.com/mdecourse/cp2018/tree/gh-pages/tinyc">https://github.com/mdecourse/cp2018/tree/gh-pages/tinyc</a> </p>
<p></p>
<h2>Qt</h2>
<p><a href="https://en.wikipedia.org/wiki/Qt_(software)">Qt</a> 是一個跨平台的 C++ 程式開發框架.  Qt5 提供 <a href="http://doc.qt.io/qtcreator/index.html">Qt Creator IDE</a> (Integrated Development Environment), <a href="http://doc.qt.io/qt-5/qtdesigner-manual.html">Qt Designer</a> GUI (Graphics User Interface) builder,  <a href="http://doc.qt.io/qt-5/qmake-manual.html">qmake</a> build tool, <a href="http://doc.qt.io/qt-5/qtlinguist-index.html">Qt Linguist</a> tool, <a href="http://doc.qt.io/qt-5/qtassistant-index.html">Qt Document Assistant</a> 等開發工具.</p>
<p><a href="http://doc.qt.io/qt-5/androidgs.html">Qt for Android</a></p>
<p>目前只能使用 Jdk 8: <a href="https://stackoverflow.com/questions/48189272/qt-creator-android-error-platform-sdk-installed">https://stackoverflow.com/questions/48189272/qt-creator-android-error-platform-sdk-installed</a> </p>
<h4>Qt Creator</h4>
<p>Qt Creator is an integrated development environment (IDE) that provides you with tools to design and develop applications with the Qt application framework. Qt is designed for developing applications and user interfaces once and deploying them to several desktop, embedded, and mobile operating systems, such as Android and iOS. It is available for Linux, macOS and Windows operating systems. Qt Creator provides you with tools for accomplishing your tasks throughout the whole application development life-cycle, from creating a project to deploying the application to the target platforms.</p>
<h4>Qt Designer</h4>
<p>Qt Designer provides four editing modes: Widget Editing Mode, Signals and Slots Editing Mode, Buddy Editing Mode and Tab Order Editing Mode. When working with Qt Designer, you will always be in one of these four modes. To switch between modes, simply select it from the Edit menu or the toolbar.</p>
<h4>qmake</h4>
<p>The qmake tool helps simplify the build process for development projects across different platforms. It automates the generation of Makefiles so that only a few lines of information are needed to create each Makefile. You can use qmake for any software project, whether it is written with Qt or not.</p>
<p>qmake generates a Makefile based on the information in a project file. Project files are created by the developer, and are usually simple, but more sophisticated project files can be created for complex projects.</p>
<p>qmake contains additional features to support development with Qt, automatically including build rules for<span> </span><a href="http://doc.qt.io/qt-5/moc.html">moc</a><span> </span>and<span> </span><a href="http://doc.qt.io/qt-5/uic.html">uic</a>.</p>
<p>qmake can also generate projects for Microsoft Visual studio without requiring the developer to change the project file.</p>
<p>參考資料:</p>
<p><a href="http://doc.qt.io/qt-5/topics-app-development.html">http://doc.qt.io/qt-5/topics-app-development.html</a> </p>
<p><a href="http://download.qt.io/development_releases/qtcreator/4.7/4.7.0-rc1/">http://download.qt.io/development_releases/qtcreator/4.7/4.7.0-rc1/</a> </p>
<p><a href="https://www.bogotobogo.com/Qt/Qt5_TutorialHelloWorld.php">https://www.bogotobogo.com/Qt/Qt5_TutorialHelloWorld.php</a> </p>
<p><a href="https://wiki.qt.io/MSYS2">https://wiki.qt.io/MSYS2</a> </p>
<p> 編程指南: <a href="https://qtguide.ustclug.org/">https://qtguide.ustclug.org/</a> </p>
<p><a href="https://qmlbook.github.io/">https://qmlbook.github.io/</a>  (QML 使用 Javascript 技術)</p>
<h2>Kivy</h2>
<p><a href="https://kivy.org">https://kivy.org</a> </p>
<p>Kivy 是一套可用於開發支援手機與多點觸控等自然使用者介面輸入 (Natural User Interface, NUI) 應用套件的 MIT 使用授權 Python 開放源程式框架. 利用  Kivy 開發的程式, 可以在 Android, iOS, Linux, OSX 與 Windows 操作系統中運行.</p>
<p>python -m pip install kivy Pillow</p>
<p>python -m pip install pygame kivy.deps.sdl2 kivy.deps.glew</p>
<p>python -m pip install kivy.deps.gstreamer (not needed for pse)</p>
<p><a href="https://media.readthedocs.org/pdf/kivy/latest/kivy.pdf">https://media.readthedocs.org/pdf/kivy/latest/kivy.pdf</a> </p>
<p>pong.kv</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#:kivy 1.0.9

&lt;PongBall&gt;:
    size: 50, 50 
    canvas:
        Ellipse:
            pos: self.pos
            size: self.size          

&lt;PongPaddle&gt;:
    size: 25, 200
    canvas:
        Rectangle:
            pos:self.pos
            size:self.size

&lt;PongGame&gt;:
    ball: pong_ball
    player1: player_left
    player2: player_right
    
    canvas:
        Rectangle:
            pos: self.center_x - 5, 0
            size: 10, self.height
    
    Label:
        font_size: 70  
        center_x: root.width / 4
        top: root.top - 50
        text: str(root.player1.score)
        
    Label:
        font_size: 70  
        center_x: root.width * 3 / 4
        top: root.top - 50
        text: str(root.player2.score)
    
    PongBall:
        id: pong_ball
        center: self.parent.center
        
    PongPaddle:
        id: player_left
        x: root.x
        center_y: root.center_y
        
    PongPaddle:
        id: player_right
        x: root.width - self.width
        center_y: root.center_y</pre>
<p>pong.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from kivy.app import App
from kivy.uix.widget import Widget
from kivy.properties import (
    NumericProperty, ReferenceListProperty, ObjectProperty
)
from kivy.vector import Vector
from kivy.clock import Clock


class PongPaddle(Widget):
    score = NumericProperty(0)

    def bounce_ball(self, ball):
        if self.collide_widget(ball):
            vx, vy = ball.velocity
            offset = (ball.center_y - self.center_y) / (self.height / 2)
            bounced = Vector(-1 * vx, vy)
            vel = bounced * 1.1
            ball.velocity = vel.x, vel.y + offset


class PongBall(Widget):
    velocity_x = NumericProperty(0)
    velocity_y = NumericProperty(0)
    velocity = ReferenceListProperty(velocity_x, velocity_y)

    def move(self):
        self.pos = Vector(*self.velocity) + self.pos


class PongGame(Widget):
    ball = ObjectProperty(None)
    player1 = ObjectProperty(None)
    player2 = ObjectProperty(None)

    def serve_ball(self, vel=(4, 0)):
        self.ball.center = self.center
        self.ball.velocity = vel

    def update(self, dt):
        self.ball.move()

        # bounce of paddles
        self.player1.bounce_ball(self.ball)
        self.player2.bounce_ball(self.ball)

        # bounce ball off bottom or top
        if (self.ball.y &lt; self.y) or (self.ball.top &gt; self.top):
            self.ball.velocity_y *= -1

        # went of to a side to score point?
        if self.ball.x &lt; self.x:
            self.player2.score += 1
            self.serve_ball(vel=(4, 0))
        if self.ball.x &gt; self.width:
            self.player1.score += 1
            self.serve_ball(vel=(-4, 0))

    def on_touch_move(self, touch):
        if touch.x &lt; self.width / 3:
            self.player1.center_y = touch.y
        if touch.x &gt; self.width - self.width / 3:
            self.player2.center_y = touch.y


class PongApp(App):
    def build(self):
        game = PongGame()
        game.serve_ball()
        Clock.schedule_interval(game.update, 1.0 / 60.0)
        return game


if __name__ == '__main__':
    PongApp().run()</pre>
<p>參考: </p>
<p><a href="/downloads/pse_kivy_05_rel.zip">pse 0.5.zip</a></p>
<p><a href="https://stackoverflow.com/questions/44219563/kivy-not-working-error-unable-to-find-any-valuable-window-provider">https://stackoverflow.com/questions/44219563/kivy-not-working-error-unable-to-find-any-valuable-window-provider</a> </p>
<p><a href="https://www.researchgate.net/project/pse-Python-Simulation-Environment">https://www.researchgate.net/project/pse-Python-Simulation-Environment</a> </p>
<h2>Eirc IDE</h2>
<p>目前 Eric6 18.07 只能配合使用 Python 3.6.5, 一方面 Python 3.7.0 尚無法以 pip install pyqt5-tools 安裝, 且 Python3.7.0 在 Eric6 18.07 尚存 bugs.</p>
<p>這與 Qt 目前還無法使用 Jdk 9 與 10 的情況相同, 許多工具仍然尚未配合最新版本的 Python 與 Java 解譯或編譯工具進行更改.</p>
<h2>CMSimfly</h2>
<p><a href="https://github.com/chiamingyen/cmsimfly">https://github.com/chiamingyen/cmsimfly</a></p>
<h1>實習操作</h1>
<p>請所有學員根據<a href="https://github.com/mdecourse/cp2018/wiki/2018-Fall--%E5%88%86%E7%B5%84%E5%8D%94%E5%90%8C%E6%B5%81%E7%A8%8B">分組協同流程</a>說明, 複製 <a href="https://github.com/mdecourse/2018fall">2018fall</a> 倉儲, 建立各組的分組網頁, 範例: <a href="https://cpgx.kmol.info">https://cpgx.kmol.info</a> </p>
<p>上課實際操作影片, 將會送到 <a href="https://www.youtube.com/channel/UCJ0Ye3mhMApH0yxAcwCXs5g/videos">Youtube mdecourse 教學影片區</a>.</p>
<h4>基本指令操作</h4>
<p style="padding-left: 30px;"><a href="/downloads/Command%20Shells.pdf">command_shell.pdf</a></p>
<h4>Python 發展歷史</h4>
<p>Python 名稱由來</p>
<p style="padding-left: 30px;">取自當時英國電視喜劇名稱.</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Monty_Python">https://en.wikipedia.org/wiki/Monty_Python</a> </p>
<p>2018.07.12 起, Python 發明人<a href="https://www.mail-archive.com/python-committers@python.org/msg05628.html">宣布</a>不再主導未來發展</p>
<p style="padding-left: 30px;"><a href="https://hub.packtpub.com/why-guido-van-rossum-quit/">https://hub.packtpub.com/why-guido-van-rossum-quit/</a> </p>
<h4>如何執行 Python 程式</h4>
<p>KMOL 可攜程式開發環境</p>
<p style="padding-left: 30px;">下載 <a href="https://drive.google.com/file/d/1Pkkjg8RX3pkZkjWEBlQBggw11u5YSn5i/view?usp=sharing">p37.7z</a>, 解開到 USB 隨身碟, 啟動 start.bat 即可啟動 Python 3.7.0 程式開發環境.</p>
<p>Windows 10 安裝 Python 3.7.0</p>
<p style="padding-left: 30px;">Download<span> </span><a href="https://www.python.org/ftp/python/3.7.0/python-3.7.0-amd64.exe">Windows x86-64 executable installer</a> 後執行標準安裝.</p>
<p>Python IDE</p>
<p style="padding-left: 30px;"><a href="http://lab.kmol.info">KMOL</a> 使用 <a href="https://www.scintilla.org/SciTE.html">SciTE</a>, <a href="http://www.leoeditor.com/">Leo Editor</a> 與 <a href="https://eric-ide.python-projects.org/eric-download.html">Eric6</a>, 其他團隊可能推薦使用 <a href="https://www.jetbrains.com/pycharm/">Pycharm</a>. Pycharm 可攜版本: <a href="https://sourceforge.net/projects/pycharm-portable/">https://sourceforge.net/projects/pycharm-portable/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/materials/python.php">https://www.cs.cornell.edu/courses/cs1110/2018fa/materials/python.php</a> </p>
<h4>Python 的保留關鍵字</h4>
<p>列印 Python 關鍵字</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import keyword
print(keyword.kwlist)</pre>
<h4>Python 變數命名</h4>
<p>A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume).</p>
<p>Rules for Python variables:</p>
<p style="padding-left: 30px;">A variable name must start with a letter or the underscore character<br/>A variable name cannot start with a number<br/>A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )<br/>Variable names are case-sensitive (age, Age and AGE are three different variables)</p>
<h4>Python 程式的內縮</h4>
<p style="padding-left: 30px;">不同於許多其他程式語言, 利用大括號來界定執行區塊, Python 採用 4 個空白字元為一個內縮單位來界定執行區塊.</p>
<h4>Python 的資料列印</h4>
<p style="padding-left: 30px;">print()</p>
<p style="padding-left: 30px;">Python 內建資料型別: <a href="https://docs.python.org/3/library/stdtypes.html">https://docs.python.org/3/library/stdtypes.html</a> </p>
<h4>Python 的 for 迴圈</h4>
<p style="padding-left: 30px;">for i in range():</p>
<h4>Python 的註解</h4>
<p style="padding-left: 30px;">單行註解 #</p>
<p style="padding-left: 30px;">多行註解 """</p>
<h4>Python 的字串、整數與浮點數</h4>
<p style="padding-left: 30px;">len()</p>
<p style="padding-left: 30px;">字串的 .lower() 與 .upper() 方法</p>
<p style="padding-left: 30px;">int(), float() 與 str()</p>
<p style="padding-left: 30px;">Python 其他內建函式: <a href="https://docs.python.org/3/library/functions.html">https://docs.python.org/3/library/functions.html</a> </p>
<h4>Python 的 List、Tuple 與 Dictionary</h4>
<p style="padding-left: 30px;">Lists: <a href="https://automatetheboringstuff.com/chapter4/">https://automatetheboringstuff.com/chapter4/</a> </p>
<h4>Python 的函式</h4>
<p style="padding-left: 30px;"><a href="/downloads/python_functions.pdf">python_functions.pdf</a></p>
<h4>Python 的類別</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/classes.html">https://docs.python.org/3/tutorial/classes.html</a> </p>
<p>參考資料</p>
<p>Python Tutorial</p>
<p style="padding-left: 30px;"><a href="https://www.w3schools.com/python/default.asp">https://www.w3schools.com/python/default.asp</a> </p>
<p>Think Python</p>
<p style="padding-left: 30px;"><a href="http://greenteapress.com/thinkpython2/thinkpython2.pdf">http://greenteapress.com/thinkpython2/thinkpython2.pdf</a> </p>
<p><a href="/downloads/pythonbook.pdf">Python_book.pdf</a> (2018 版)</p>
<p><a href="/downloads/how-to-code-in-python.pdf">How to code in Python 3.pdf</a></p>
<p><a href="https://www.cs.cmu.edu/~112/">https://www.cs.cmu.edu/~112/</a> </p>
<p><a href="http://stanfordpython.com/">http://stanfordpython.com/</a> </p><h2>2018Fall</h2>
<p>機械設計工程系教室: <a href="https://github.com/mdecp2018">https://github.com/mdecp2018</a> </p>
<p>進修部車輛工程系教室: <a href="https://github.com/vecp2018">https://github.com/vecp2018</a> </p>
<p>以上各學員之期中報告倉儲原始檔案來自: <a href="https://github.com/mdecourse/2018fall">https://github.com/mdecourse/2018fall</a> </p>
<p>此倉儲系統的使用說明, 請參考:<a href="http://mde.tw/2018fall/">http://mde.tw/2018fall/</a> </p>
<hr/>
<p>自第十週起, 以六人一組籌組, 並且選擇一使用 <a href="http://flask.pocoo.org/">Flask</a> 與 (或) <a href="http://pyqt.sourceforge.net/Docs/PyQt5/">PyQt5</a> 系統, 開發分組期末專案程式.</p>
<p>CMS 範例:</p>
<ol>
<li>延伸 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a>, 可以指定 images 目錄下的子目錄, 將影像檔案放入後, 可以在特定頁面中分頁顯示出所有影像檔案.</li>
<li>研究 <a href="https://github.com/mdecourse/FlatFileFlaskBlog">https://github.com/mdecourse/FlatFileFlaskBlog</a> </li>
</ol>
<p>Math:</p>
<p style="padding-left: 30px;"><a href="https://github.com/Notgnoshi/mathemagics">https://github.com/Notgnoshi/mathemagics</a> </p>
<p>Machine Learning:</p>
<p style="padding-left: 30px;"><a href="https://work.caltech.edu/telecourse.html">https://work.caltech.edu/telecourse.html</a> </p>
<p>其他:</p>
<p><a href="https://medium.freecodecamp.org/what-can-you-do-with-python-the-3-main-applications-518db9a68a78">https://medium.freecodecamp.org/what-can-you-do-with-python-the-3-main-applications-518db9a68a78</a> </p><h2>hello.c 與 Github</h2>
<p>操作目的:</p>
<p style="padding-left: 30px;">了解如何執行最簡單的 .c 程式, 了解如何修改 .c 程式碼.</p>
<p style="padding-left: 30px;">了解如何利用 git 指令, 在新增、提交、推送不同 .c 版本之後,  如何擷取不同版本 .c 程式碼的資料.</p>
<p style="padding-left: 30px;">了解 Github 所提供的功能與使用方法.</p>
<p>所欲解決問題:</p>
<p style="padding-left: 30px;">程式開發過程, 如何有效管理各階段資料的歷程.  尤其當多人協同進行程式開發時, 如何精確呈現各改版內容間的差異, 讓各成員藉以迅速因應配合.</p>
<p>第一週操作影片拍攝與上傳</p>
<p>下載 USB 可攜檔案</p>
<p>申請 Github 帳號</p>
<p>Github 倉儲設定</p>
<p>建立 Github 倉儲</p>
<p>倉儲分支與 Github Pages (gh-pages 分支特性)</p>
<p>維護 Github 倉儲內容  (網際與單機操作)</p>
<p>利用 SciTE 建立 hello.c</p>
<p>以 SciTE 執行 hello.c</p>
<p>以 gcc 編譯執行 hello.c</p>
<p>將 hello.c 納入倉儲 (了解 .gitignore 與 git config, git add, git commit, git push 指令)</p>
<p>了解 git clone, Github fork 與 forked 倉儲透過 pull requests 正反更新</p>
<p>Github issues 應用</p><h2>hello.c 與 Fossil</h2>
<p>操作目的:</p>
<p style="padding-left: 30px;">讓學員了解除了 git 與 Github 之外, 也可以藉由 Fossil SCM 自行打造近端與遠端的分散式版次管理系統.</p>
<p>所欲解決問題:</p>
<p style="padding-left: 30px;">由於 Github 並未提供原始碼 , 使用者只能決定採用與否 (免費或付費), 若希望自行搭建能完整掌控的分散式版次管理, 可以採用 <a href="https://gitlab.com/gitlab-org/gitlab-ce">gitlab 社群開源版</a> 或 Fossil SCM.</p>
<p><a href="https://www.fossil-scm.org">Fossil SCM</a> 學習</p>
<p>有了 git 與 Github, 為何還需要 <a href="https://www.fossil-scm.org">Fossil SCM</a>?</p>
<p>在此將 Github 視為雲端網站式的分散式版次管理應用, 雖然近端也存有對應版本, 且允許無人數限制的免費協同運作, 但是對於 Github 所提供的各項服務依賴性極高, </p>
<p>若採用 Fossil SCM, 因為檔案小, 使用者的掌握度高, 可以在單機, 區域網路或自架的廣域網路上運行, 適合百人以內的小團隊使用.</p>
<p>建立倉儲</p>
<p style="padding-left: 30px;">fossil init hello.fossil</p>
<p style="padding-left: 30px;">fossil ui hello.fossil 啟動倉儲的近端網際介面</p>
<p>修改倉儲內容</p>
<p style="padding-left: 30px;">fossil sql -R foo.fossil</p>
<p style="padding-left: 30px;">進入 sqlite 指令環境後, 可以利用 .schema user 查驗 user 資料表的欄位設計.</p>
<p style="padding-left: 30px;">以 select login, pw, cap from user;</p>
<p style="padding-left: 30px;">可以查詢目前 foo.fossil 檔案中 user 資料表 login, pw 與 cap 等3個欄位的資料內容.</p>
<p style="padding-left: 30px;">若要更改特定 login 登入帳號的 pw 或 cap 可以使用下列 sqlite3 SQL 語法:</p>
<p style="padding-left: 30px;">update user set pw='mynewpassword' where login='myloginaccount';</p>
<p style="padding-left: 30px;">update user set cap='s' where login='myloginaccount';</p>
<p>倉儲 clone 與 open</p>
<p style="padding-left: 30px;">fossil clone</p>
<p style="padding-left: 30px;">fossil open</p>
<p>倉儲改版新增與 commit</p>
<p style="padding-left: 30px;">fossil add .</p>
<p style="padding-left: 30px;">fossil commit (改版內容將會自動與近端及遠端倉儲同步)</p>
<p>Fossil SCM doc 網際擷取</p>
<p style="padding-left: 30px;">doc/trunk/ 可以擷取 files 檔案, trunk 為最新版本, 也可填入各版次號, 擷取各版次的對應內容</p>
<p>操作步驟:</p>
<p>fossil init hello.fossil</p>
<p>fossil ui hello.fossil</p>
<p>mkdir wd</p>
<p>cd wd</p>
<p>mkdir hello</p>
<p>cd hello</p>
<p>fossil open ./../../hello.fossil</p>
<p>新增 hello.c</p>
<p>以 SciTE Tools-&gt;Go 執行</p>
<p>以 gcc 編譯執行 hello.c</p>
<p>修改 hello.c 後, 以 fossil add . 及 fossil commit -m "改版訊息" 改版</p>
<p>新增 index.html 後, 以 fossil add, commit 改版後, 再以 fossil ui hello.fossil 啟動網際介面後, 以 localhost:8080/doc/trunk/index.html 擷取 index.html 內容.</p>
<p>Fossil SCM 基本設定</p>
<p>Fossil SCM Wiki Timeline 與 upload 檔案</p>
<p>以 C 解最大化問題:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 必須在演算過程中, 設法限制各變數的上下限!
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;
#include &lt;memory.h&gt;
#include &lt;time.h&gt;
 
// 最大族群數, NP
#define MAXPOP  5000
// 最大向量維度, D
#define MAXDIM  35
// MAXIMAPROBLEM =1 最大化 0 最小化
#define MAXIMAPROBLEM 1
// 最大化時 PENALITY 必須為負值, 否則為正值
#define PENALITY -1000
/*
#define MAXIMAPROBLEM 0
#define PENALITY 1000
*/
 
/*------Constants for rnd_uni()--------------------------------------------*/
 
#define IM1 2147483563
#define IM2 2147483399
#define AM (1.0/IM1)
#define IMM1 (IM1-1)
#define IA1 40014
#define IA2 40692
#define IQ1 53668
#define IQ2 52774
#define IR1 12211
#define IR2 3791
#define NTAB 32
#define NDIV (1+IMM1/NTAB)
#define EPS 1.2e-7
#define RNMX (1.0-EPS)
 
/*------------------------Globals---------------------------------------*/
 
long  rnd_uni_init;                 /* serves as a seed for rnd_uni()   */
double c[MAXPOP][MAXDIM], d[MAXPOP][MAXDIM];
double (*pold)[MAXPOP][MAXDIM], (*pnew)[MAXPOP][MAXDIM], (*pswap)[MAXPOP][MAXDIM];
 
/*---------Function declarations----------------------------------------*/
 
void  assignd(int D, double a[], double b[]);
double rnd_uni(long *idum);    /* uniform pseudo random number generator */
double extern evaluate(int D, double tmp[], long *nfeval); /* obj. funct. */
 
/*---------Function definitions-----------------------------------------*/
// 指定向量 b 為 a
void  assignd(int D, double a[], double b[])
{
   int j;
   for (j=0; j&lt;D; j++)
   {
      a[j] = b[j];
   }
}
 
// 產生 0 ~ 1 間的亂數
double rnd_uni(long *idum)
{
  long j;
  long k;
  static long idum2=123456789;
  static long iy=0;
  static long iv[NTAB];
  double temp;
 
  if (*idum &lt;= 0)
  {
    if (-(*idum) &lt; 1) *idum=1;
    else *idum = -(*idum);
    idum2=(*idum);
    for (j=NTAB+7;j&gt;=0;j--)
    {
      k=(*idum)/IQ1;
      *idum=IA1*(*idum-k*IQ1)-k*IR1;
      if (*idum &lt; 0) *idum += IM1;
      if (j &lt; NTAB) iv[j] = *idum;
    }
    iy=iv[0];
  }
  k=(*idum)/IQ1;
  *idum=IA1*(*idum-k*IQ1)-k*IR1;
  if (*idum &lt; 0) *idum += IM1;
  k=idum2/IQ2;
  idum2=IA2*(idum2-k*IQ2)-k*IR2;
  if (idum2 &lt; 0) idum2 += IM2;
  j=iy/NDIV;
  iy=iv[j]-idum2;
  iv[j] = *idum;
  if (iy &lt; 1) iy += IMM1;
  if ((temp=AM*iy) &gt; RNMX) return RNMX;
  else return temp;
 
}/*------End of rnd_uni()--------------------------*/
 
// 將上下限轉為全域變數
double inibound_h;      /* upper parameter bound              */
double inibound_l;      /* lower parameter bound              */
// 與機構合成相關的全域變數
// 宣告一個座標結構
struct Coord {
    double x;
    double y;
  // 這裡保留 double z;
};
 
main(int argc, char *argv[])
{
   char  chr;             /* y/n choice variable                */
   char  *strat[] =       /* strategy-indicator                 */
   {
            "",
            "DE/best/1/exp",
            "DE/rand/1/exp",
            "DE/rand-to-best/1/exp",
            "DE/best/2/exp",
            "DE/rand/2/exp",
            "DE/best/1/bin",
            "DE/rand/1/bin",
            "DE/rand-to-best/1/bin",
            "DE/best/2/bin",
            "DE/rand/2/bin"
   };
 
   int   i, j, L, n;      /* counting variables                 */
   int   r1, r2, r3, r4;  /* placeholders for random indexes    */
   int   r5;              /* placeholders for random indexes    */
   int   D;               /* Dimension of parameter vector      */
   int   NP;              /* number of population members       */
   int   imin;            /* index to member with lowest energy */
   int   refresh;         /* refresh rate of screen output      */
   int   strategy;        /* choice parameter for screen output */
   int   gen, genmax, seed;   
 
   long  nfeval;          /* number of function evaluations     */
 
   double trial_cost;      /* buffer variable                    */
   // 將上下限轉為全域變數, 可能要根據各變數加以設定
   //double inibound_h;      /* upper parameter bound              */
   //double inibound_l;      /* lower parameter bound              */
   double tmp[MAXDIM], best[MAXDIM], bestit[MAXDIM]; /* members  */
   double cost[MAXPOP];    /* obj. funct. values                 */
   double cvar;            /* computes the cost variance         */
   double cmean;           /* mean cost                          */
   double F,CR;            /* control variables of DE            */
   double cmin;            /* help variables                     */
 
   FILE  *fpin_ptr;
   FILE  *fpout_ptr;
 
// 計算執行過程所需時間起點, 需要導入 time.h
  clock_t start = clock();
 
/*------Initializations----------------------------*/
 
// 將結果寫入 out.dat
 fpout_ptr = fopen("out.dat","w");          /* open output file for reading,    */
// 目前已經採用 strategy 3 可以得到最佳結果
  strategy = 3;
  genmax = 2000;
  refresh = 100;
  // 配合機構尺寸合成, 每一個體有 9 個機構尺寸值與 5 個通過點角度值
  D = 2;
  NP = 200;
  inibound_h = 50.;
  inibound_l = 0.;
/*得到最佳解
  F = 0.85;
CR 必須介於 0 to 1. 之間
  CR = 1.;
*/
  F = 0.85;
  CR = 1.;
  seed = 3;
 
 //fclose(fpin_ptr);
 
/*-----Checking input variables for proper range----------------------------*/
 
  if (D &gt; MAXDIM)
  {
     printf("\nError! D=%d &gt; MAXDIM=%d\n",D,MAXDIM);
     exit(1);
  }
  if (D &lt;= 0)
  {
     printf("\nError! D=%d, should be &gt; 0\n",D);
     exit(1);
  }
  if (NP &gt; MAXPOP)
  {
     printf("\nError! NP=%d &gt; MAXPOP=%d\n",NP,MAXPOP);
     exit(1);
  }
  if (NP &lt;= 0)
  {
     printf("\nError! NP=%d, should be &gt; 0\n",NP);
     exit(1);
  }
  if ((CR &lt; 0) || (CR &gt; 1.0))
  {
     printf("\nError! CR=%f, should be ex [0,1]\n",CR);
     exit(1);
  }
  if (seed &lt;= 0)
  {
     printf("\nError! seed=%d, should be &gt; 0\n",seed);
     exit(1);
  }
  if (refresh &lt;= 0)
  {
     printf("\nError! refresh=%d, should be &gt; 0\n",refresh);
     exit(1);
  }
  if (genmax &lt;= 0)
  {
     printf("\nError! genmax=%d, should be &gt; 0\n",genmax);
     exit(1);
  }
  if ((strategy &lt; 0) || (strategy &gt; 10))
  {
     printf("\nError! strategy=%d, should be ex {1,2,3,4,5,6,7,8,9,10}\n",strategy);
     exit(1);
  }
  if (inibound_h &lt; inibound_l)
  {
     printf("\nError! inibound_h=%f &lt; inibound_l=%f\n",inibound_h, inibound_l);
     exit(1);
  }
 
/*-----Initialize random number generator-----------------------------*/
 
 rnd_uni_init = -(long)seed;  /* initialization of rnd_uni() */
 nfeval       =  0;  /* reset number of function evaluations */
 
/*------Initialization------------------------------------------------*/
/*------Right now this part is kept fairly simple and just generates--*/
/*------random numbers in the range [-initfac, +initfac]. You might---*/
/*------want to extend the init part such that you can initialize-----*/
/*------each parameter separately.------------------------------------*/
 
   for (i=0; i&lt;NP; i++)
   {
      for (j=0; j&lt;D; j++) /* spread initial population members */
      {
        c[i][j] = inibound_l + rnd_uni(&amp;rnd_uni_init)*(inibound_h - inibound_l);
      }
      cost[i] = evaluate(D,c[i],&amp;nfeval); /* obj. funct. value */
   }
   cmin = cost[0];
   imin = 0;
   for (i=1; i&lt;NP; i++)
   {
     if(MAXIMAPROBLEM == 1)
     {
       // 改為最大化
        if (cost[i]&gt;cmin)
        {
          cmin = cost[i];
          imin = i;
        }
      }
      else
      {
        // 最小化問題
        if (cost[i]&lt;cmin)
        {
          cmin = cost[i];
          imin = i;
        }
      }
   }
 
   assignd(D,best,c[imin]);            /* save best member ever          */
   assignd(D,bestit,c[imin]);          /* save best member of generation */
 
   pold = &amp;c; /* old population (generation G)   */
   pnew = &amp;d; /* new population (generation G+1) */
 
/*=======================================================================*/
/*=========Iteration loop================================================*/
/*=======================================================================*/
 
   gen = 0;                          /* generation counter reset */
   while ((gen &lt; genmax) /*&amp;&amp; (kbhit() == 0)*/) /* remove comments if conio.h */
   {                                            /* is accepted by compiler    */
      gen++;
      imin = 0;
 
      for (i=0; i&lt;NP; i++)         /* Start of loop through ensemble  */
      {
     do                        /* Pick a random population member */
     {                         /* Endless loop for NP &lt; 2 !!!     */
       r1 = (int)(rnd_uni(&amp;rnd_uni_init)*NP);
     }while(r1==i);            
 
     do                        /* Pick a random population member */
     {                         /* Endless loop for NP &lt; 3 !!!     */
       r2 = (int)(rnd_uni(&amp;rnd_uni_init)*NP);
     }while((r2==i) || (r2==r1));
 
     do                        /* Pick a random population member */
     {                         /* Endless loop for NP &lt; 4 !!!     */
       r3 = (int)(rnd_uni(&amp;rnd_uni_init)*NP);
     }while((r3==i) || (r3==r1) || (r3==r2));
 
     do                        /* Pick a random population member */
     {                         /* Endless loop for NP &lt; 5 !!!     */
       r4 = (int)(rnd_uni(&amp;rnd_uni_init)*NP);
     }while((r4==i) || (r4==r1) || (r4==r2) || (r4==r3));
 
     do                        /* Pick a random population member */
     {                         /* Endless loop for NP &lt; 6 !!!     */
       r5 = (int)(rnd_uni(&amp;rnd_uni_init)*NP);
     }while((r5==i) || (r5==r1) || (r5==r2) || (r5==r3) || (r5==r4));
 
/*=======EXPONENTIAL CROSSOVER============================================================*/
 
/*-------DE/best/1/exp--------------------------------------------------------------------*/
/*-------Our oldest strategy but still not bad. However, we have found several------------*/
/*-------optimization problems where misconvergence occurs.-------------------------------*/
     if (strategy == 1) /* strategy DE0 (not in our paper) */
     {
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D);
       L = 0;
       do
       {                       
         tmp[n] = bestit[n] + F*((*pold)[r2][n]-(*pold)[r3][n]);
         n = (n+1)%D;
         L++;
       }while((rnd_uni(&amp;rnd_uni_init) &lt; CR) &amp;&amp; (L &lt; D));
     }
/*-------DE/rand/1/exp-------------------------------------------------------------------*/
/*-------This is one of my favourite strategies. It works especially well when the-------*/
/*-------"bestit[]"-schemes experience misconvergence. Try e.g. F=0.7 and CR=0.5---------*/
/*-------as a first guess.---------------------------------------------------------------*/
     else if (strategy == 2) /* strategy DE1 in the techreport */
     {
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D);
       L = 0;
       do
       {                       
         tmp[n] = (*pold)[r1][n] + F*((*pold)[r2][n]-(*pold)[r3][n]);
         n = (n+1)%D;
         L++;
       }while((rnd_uni(&amp;rnd_uni_init) &lt; CR) &amp;&amp; (L &lt; D));
     }
/*-------DE/rand-to-best/1/exp-----------------------------------------------------------*/
/*-------This strategy seems to be one of the best strategies. Try F=0.85 and CR=1.------*/
/*-------If you get misconvergence try to increase NP. If this doesn't help you----------*/
/*-------should play around with all three control variables.----------------------------*/
     else if (strategy == 3) /* similiar to DE2 but generally better */
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
       L = 0;
       do
       {                       
         tmp[n] = tmp[n] + F*(bestit[n] - tmp[n]) + F*((*pold)[r1][n]-(*pold)[r2][n]);
         n = (n+1)%D;
         L++;
       }while((rnd_uni(&amp;rnd_uni_init) &lt; CR) &amp;&amp; (L &lt; D));
     }
/*-------DE/best/2/exp is another powerful strategy worth trying--------------------------*/
     else if (strategy == 4)
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
       L = 0;
       do
       {                           
         tmp[n] = bestit[n] + 
              ((*pold)[r1][n]+(*pold)[r2][n]-(*pold)[r3][n]-(*pold)[r4][n])*F;
         n = (n+1)%D;
         L++;
       }while((rnd_uni(&amp;rnd_uni_init) &lt; CR) &amp;&amp; (L &lt; D));
     }
/*-------DE/rand/2/exp seems to be a robust optimizer for many functions-------------------*/
     else if (strategy == 5)
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
       L = 0;
       do
       {                           
         tmp[n] = (*pold)[r5][n] + 
              ((*pold)[r1][n]+(*pold)[r2][n]-(*pold)[r3][n]-(*pold)[r4][n])*F;
         n = (n+1)%D;
         L++;
       }while((rnd_uni(&amp;rnd_uni_init) &lt; CR) &amp;&amp; (L &lt; D));
     }
 
/*=======Essentially same strategies but BINOMIAL CROSSOVER===============================*/
 
/*-------DE/best/1/bin--------------------------------------------------------------------*/
     else if (strategy == 6) 
     {
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
           for (L=0; L&lt;D; L++) /* perform D binomial trials */
           {
         if ((rnd_uni(&amp;rnd_uni_init) &lt; CR) || L == (D-1)) /* change at least one parameter */
         {                       
           tmp[n] = bestit[n] + F*((*pold)[r2][n]-(*pold)[r3][n]);
         }
         n = (n+1)%D;
           }
     }
/*-------DE/rand/1/bin-------------------------------------------------------------------*/
     else if (strategy == 7) 
     {
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
           for (L=0; L&lt;D; L++) /* perform D binomial trials */
           {
         if ((rnd_uni(&amp;rnd_uni_init) &lt; CR) || L == (D-1)) /* change at least one parameter */
         {                       
           tmp[n] = (*pold)[r1][n] + F*((*pold)[r2][n]-(*pold)[r3][n]);
         }
         n = (n+1)%D;
           }
     }
/*-------DE/rand-to-best/1/bin-----------------------------------------------------------*/
     else if (strategy == 8) 
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
           for (L=0; L&lt;D; L++) /* perform D binomial trials */
           {
         if ((rnd_uni(&amp;rnd_uni_init) &lt; CR) || L == (D-1)) /* change at least one parameter */
         {                       
           tmp[n] = tmp[n] + F*(bestit[n] - tmp[n]) + F*((*pold)[r1][n]-(*pold)[r2][n]);
         }
         n = (n+1)%D;
           }
     }
/*-------DE/best/2/bin--------------------------------------------------------------------*/
     else if (strategy == 9)
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
           for (L=0; L&lt;D; L++) /* perform D binomial trials */
           {
         if ((rnd_uni(&amp;rnd_uni_init) &lt; CR) || L == (D-1)) /* change at least one parameter */
         {                       
           tmp[n] = bestit[n] + 
              ((*pold)[r1][n]+(*pold)[r2][n]-(*pold)[r3][n]-(*pold)[r4][n])*F;
         }
         n = (n+1)%D;
           }
     }
/*-------DE/rand/2/bin--------------------------------------------------------------------*/
     else
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
           for (L=0; L&lt;D; L++) /* perform D binomial trials */
           {
         if ((rnd_uni(&amp;rnd_uni_init) &lt; CR) || L == (D-1)) /* change at least one parameter */
         {                       
           tmp[n] = (*pold)[r5][n] + 
              ((*pold)[r1][n]+(*pold)[r2][n]-(*pold)[r3][n]-(*pold)[r4][n])*F;
         }
         n = (n+1)%D;
           }
     }
 
 
/*=======Trial mutation now in tmp[]. Test how good this choice really was.==================*/
 
     trial_cost = evaluate(D,tmp,&amp;nfeval);  /* Evaluate new vector in tmp[] */
   if(MAXIMAPROBLEM == 1)
   {
    // 改為最大化
       if (trial_cost &gt;= cost[i])   /* improved objective function value ? */
       {                                  
          cost[i]=trial_cost;         
          assignd(D,(*pnew)[i],tmp);
          if (trial_cost&gt;cmin)          /* Was this a new minimum? */
          {                               /* if so...*/
             cmin=trial_cost;           /* reset cmin to new low...*/
             imin=i;
             assignd(D,best,tmp);           
          }                           
       }                            
       else
       {
          assignd(D,(*pnew)[i],(*pold)[i]); /* replace target with old value */
       }
    }
    else
    {
          // 最小化問題
       if (trial_cost &lt;= cost[i])   /* improved objective function value ? */
       {                                  
          cost[i]=trial_cost;         
          assignd(D,(*pnew)[i],tmp);
          if (trial_cost&lt;cmin)          /* Was this a new minimum? */
          {                               /* if so...*/
             cmin=trial_cost;           /* reset cmin to new low...*/
             imin=i;
             assignd(D,best,tmp);           
          }                           
       }                            
       else
       {
          assignd(D,(*pnew)[i],(*pold)[i]); /* replace target with old value */
       }
    }
 
      }   /* End mutation loop through pop. */
 
      assignd(D,bestit,best);  /* Save best population member of current iteration */
 
      /* swap population arrays. New generation becomes old one */
 
      pswap = pold;
      pold  = pnew;
      pnew  = pswap;
 
/*----Compute the energy variance (just for monitoring purposes)-----------*/
 
      cmean = 0.;          /* compute the mean value first */
      for (j=0; j&lt;NP; j++)
      {
         cmean += cost[j];
      }
      cmean = cmean/NP;
 
      cvar = 0.;           /* now the variance              */
      for (j=0; j&lt;NP; j++)
      {
         cvar += (cost[j] - cmean)*(cost[j] - cmean);
      }
      cvar = cvar/(NP-1);
 
 
/*----Output part----------------------------------------------------------*/
 
      if (gen%refresh==1)   /* display after every refresh generations */
      { /* ABORT works only if conio.h is accepted by your compiler */
    printf("\n\n                         PRESS ANY KEY TO ABORT"); 
    printf("\n\n\n Best-so-far cost funct. value=%-15.10g\n",cmin);
 
    for (j=0;j&lt;D;j++)
    {
      printf("\n best[%d]=%-15.10g",j,best[j]);
    }
    printf("\n\n Generation=%d  NFEs=%ld   Strategy: %s    ",gen,nfeval,strat[strategy]);
    printf("\n NP=%d    F=%-4.2g    CR=%-4.2g   cost-variance=%-10.5g\n",
               NP,F,CR,cvar);
      }
 
      fprintf(fpout_ptr,"%ld   %-15.10g\n",nfeval,cmin);
   }
/*=======================================================================*/
/*=========End of iteration loop=========================================*/
/*=======================================================================*/
 
/*-------Final output in file-------------------------------------------*/
 
 
   fprintf(fpout_ptr,"\n\n\n Best-so-far obj. funct. value = %-15.10g\n",cmin);
 
   for (j=0;j&lt;D;j++)
   {
     fprintf(fpout_ptr,"\n best[%d]=%-15.10g",j,best[j]);
   }
   fprintf(fpout_ptr,"\n\n Generation=%d  NFEs=%ld   Strategy: %s    ",gen,nfeval,strat[strategy]);
   fprintf(fpout_ptr,"\n NP=%d    F=%-4.2g    CR=%-4.2g    cost-variance=%-10.5g\n",
           NP,F,CR,cvar); 
 
  fclose(fpout_ptr);
 
  /* Code you want timed here */
  printf("Time elapsed: %f\n", ((double)clock() - start) / CLOCKS_PER_SEC);
   return(0);
}
 
/*-----------End of main()------------------------------------------*/
 
// 適應函式 fittness function (cost function)
double evaluate(int D, double tmp[], long *nfeval)
{
   double result=0, surface = 80.0, z, volume, penality;
   (*nfeval)++;
   z = (surface-tmp[0]*tmp[1])/(2.0*(tmp[0]+tmp[1]));
   volume = tmp[0]*tmp[1]*z;
 
  if(volume &lt;= 0){
    return PENALITY;
  }
// 只限制長度與寬度必須大於 0
  if(tmp[0] &lt;= inibound_l){
    return PENALITY;
  }
 
  if(tmp[1] &lt;= inibound_l){
    return PENALITY;
  }
/*
  if((tmp[0] &lt;= inibound_l)|| (tmp[0] &gt;inibound_h)){
    return PENALITY;
  }
 
  if((tmp[1] &lt;= inibound_l) || (tmp[1] &gt;inibound_h)){
    return PENALITY;
  }
  */
  // volume must &gt;0 and max volume
  // 目前為最小化問題
   //return 1+1/(volume*volume);
  return volume;
}
 </pre>
<p></p>
<h2>CMSimfly 操作</h2>
<p>操作目的:</p>
<p style="padding-left: 30px;">讓學員透過 <a href="https://github.com/chiamingyen/cmsimfly">https://github.com/chiamingyen/cmsimfly</a> 的程式編寫架構與使用, 了解如何利用 Python 與  Flask 網際框架, 自行建構網際內容管理系統.</p>
<p>所欲解決問題:</p>
<p style="padding-left: 30px;">機械設計工程師若能將協同產品設計流程搬至網際環境, 將可有效提升設計效能.</p>
<p style="padding-left: 30px;">本課程即使用 CMSimfly 管理與教學內容相關的資料管理.</p>
<p>取得 <a href="https://drive.google.com/file/d/1Pkkjg8RX3pkZkjWEBlQBggw11u5YSn5i/view?usp=sharing">p37.7z</a><span> 檔案後, 解開後容量約 1GB. 放入 USB 隨身碟, 以 start.bat 啟動系統.</span></p>
<p><span>取得 </span><span><a href="https://drive.google.com/file/d/12BLN4daAPlO1KjCTDFi1kqJZ6f5k7Y5k/view?usp=sharing">Qt 可攜系統 .7z</a> 檔案後, 解開後容量約 21 GB. 放入 USB 隨身碟, 以 start.bat (必須配合修改 CMSimfly 所在位置)啟動系統.</span></p>
<p>以瀏覽器開啟 https://localhost:8443 後, 以管理者密碼登入 CMSimfly.</p>
<p>由於 CMSimfly 頁面依照 h1, h2, h3 標註循序存入 content.htm, 使用者必須按照由上到下的順序建立所需頁面.</p>
<p>完成各階段改版後, 必須點擊 generate_pages 進行轉檔, 將 content.htm 內容分頁存靜態網站於 content 目錄中.</p>
<p>CMSimfly 靜態網頁模式將從根目錄的 index.html 跳轉頁面至 content 目錄中的 index.html, 顯示網際內容管理中的資料, 並由 blog 目錄導引網誌內容, reveal 目錄則導引網際投影片內容.</p>
<h4>Python 程式檢定題庫</h4>
<p>來源:  <a href="http://www.im.cyut.edu.tw/html/html/board/p_test/ptest_board.htm">http://www.im.cyut.edu.tw/html/html/board/p_test/ptest_board.htm</a> </p>
<p><a href="/downloads/cyut_python_quiz_1.pdf">cyut_python_quiz_1.pdf</a> (進修部)</p>
<p><a href="/downloads/cyut_python_quiz_2.pdf">cyut_python_quiz_2.pdf</a> (日間部)</p>
<ol>
<li>請日夜間部各計算機程式課程學員, 以學號在 <a href="https://github.com/">Github</a> 登記帳號</li>
<li>建立一個 學號.github.io 倉儲 (<a href="https://guides.github.com/features/pages/">參考</a>)</li>
<li>在倉儲中納入 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> + <a href="https://revealjs.com/#/">reveal.js</a> + <a href="https://blog.getpelican.com/">Pelican blog</a> 系統</li>
<li>啟動 <a href="https://brython.info/">Brython</a> 網際 Python 系統</li>
<li>日間部學員將 <a href="/downloads/cyut_python_quiz_2.pdf">cyut_python_quiz_2.pdf</a> 中各題目的程式配置在個人的 學號.github.io 網頁中</li>
<li>夜間部學員將 <a href="/downloads/cyut_python_quiz_1.pdf">cyut_python_quiz_1.pdf</a> 中各題目的程式配置在個人的 學號.github.io 網頁中</li>
<li>請各學員在每週上課結束後, 利用 學號.github.io/blog/ 紀錄學習歷程</li>
<li>請各學員在每週上課結束後, 利用 學號.github.io/reveal/ 進行網際學習簡報</li>
</ol>
<p>備註:</p>
<p>除了在 <a href="https://github.com/">Github</a> 系統中建立 學號.github.io 網站外, 也可以自行利用 <a href="https://www.fossil-scm.org">Fossil SCM</a>, 在系上協同設計室中的伺服器, 建立與 <a href="https://pages.github.com/">Github Pages</a> 同等功能的 <a href="https://www.fossil-scm.org/xfer/doc/trunk/www/embeddeddoc.wiki">Fossil doc</a> 網站. (欲額外自建伺服器之學員, 請洽計算機程式課程助教)</p>
<p>參考資料</p>
<p>2016 Python Recipes Handbook</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-0241-8">https://link.springer.com/book/10.1007/978-1-4842-0241-8</a> </p>
<p><a href="/downloads/Algorithmic_Problem_Solving_with_Python.pdf">2015 Algorithmic Problem Solving with Python.pdf</a></p>
<p></p>
<p></p><h2>Pygrouf 操作</h2>
<p>操作目的:</p>
<p style="padding-left: 30px;">讓學員了解如何利用 Python、Flask 網際框架與 MySQL (SQLite 或 PostgreSQL) 資料庫管理群組產品開發過程中的資料.</p>
<p>所欲解決的問題:</p>
<p style="padding-left: 30px;">如何透過 oauth2 登入系統, 如何透過 peewee ORM 存取 MySQL, SQLite 或 PostgreSQL 等資料庫內容.</p>
<p style="padding-left: 30px;">如何整合 Flask Server 與 tinymce4 Javascript, 提供群組軟體伺服端與瀏覽器端的資料整合.</p>
<p><a href="https://github.com/chiamingyen/pygrouf">https://github.com/chiamingyen/pygrouf</a> </p>
<p>需要以下模組:</p>
<p>pymysql</p>
<p>authomatic</p>
<p>mako</p>
<p>peewee</p>
<p>oauth2 綁定:</p>
<p>使用 2016springwcm 郵件帳號登記憑證</p>
<p>登入後連結 <a href="https://console.developers.google.com">https://console.developers.google.com</a></p>
<p>以 https://localhost:6443 啟動</p>
<p>若希望在區域或廣域網路啟動, 則需設定啟動 callback 與 /login 連結.</p>
<h2>Pelican 操作</h2>
<p>操作目的:</p>
<p style="padding-left: 30px;">讓學員了解如何利用 Python、Pelican 與 Leo Editor 建立靜態網誌.</p>
<p>所欲解決問題:</p>
<p style="padding-left: 30px;">機械設計工程師如何透過網際日誌, 詳實紀錄與產品開發有關的資料.</p>
<p>位於 markdown 目錄為 Pelican 網誌的原始檔案, 轉檔後將網誌存入 blog 目錄, 並需要 theme 與 plugin 目錄, 以及  local_publishconf.py, pelicanconf.py 與 publishconf.py 等設定檔案.</p>
<p>pelican.leo 位於 config/pelican.leo 目錄, 用於 Pelican 靜態網誌 markdown 目錄中輸入 .md  檔案與 Pelican 設定檔案的編輯管理與轉檔.</p>
<h2>Reveal.js 操作</h2>
<p>操作目的:</p>
<p style="padding-left: 30px;">讓學員能夠利用網際資料進行簡報.</p>
<p>所欲解決問題:</p>
<p style="padding-left: 30px;">如何利用網際無遠弗屆與超文件資料的特性, 有效展示與產品開發有關的簡報資料.</p>
<p>位於 reveal 目錄中為 <a href="https://revealjs.com">reveal.js</a> 網際投影片系統, 改版時利用 cmsimfly.leo 中的 "編輯 reveal" 節點進行.</p>
<p>啟動 Leo Editor, 以 SciTE 編輯器開啟 y:\launchLeo.py 後, 用 Tools -&gt; Go 執行, 接著以 File -&gt; Open-Outline 開啟 cmsimfly.leo</p>
<p>投影片內容:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;</pre>
<p>而 @others  內容:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># 投影片快捷鍵

* 利用箭頭上下前後換頁
* 按 f 鍵進入全螢幕模式 (full screen)
* 按 s 鍵可以顯示投影片筆記 (show)
* 按 o 鍵可以切換單張或全域檢視 (overview)
* 按 b 或 . 鍵可以切換螢幕黑屏 (black)
* 按 Esc 可以退出全螢幕或全域檢視 (Escape)</pre>
<p>其中, 單層 section 標註為向右展開的網際投影片, 而雙層 section 標註的投影片, 則向下展開.</p>
<h2>數值分析</h2>
<p>操作目的:</p>
<p style="padding-left: 30px;">讓學員了解如何利用電腦程式解數學問題.</p>
<p>所欲解決問題:</p>
<p style="padding-left: 30px;">如何結合計算機程式與微積分及工程數學, 解決工程設計所可能面臨的問題.</p>
<p>Numerical Analysis</p>
<p>何謂微分方程 (取自 Wikipedia: <a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B">微分方程</a>)? 如何<a href="https://nile.northampton.ac.uk/bbcswebdav/courses/CFAP02R/Guest%20access%20files/HELM_new/pages/workbooks_1_50_jan2008/Workbook19/19_4_applications_diffrntl_eqns.pdf">應用</a>?</p>
<p>微分方程 (Differential equation) 是一種數學方程, 用來描述某一類函數與其導數之間的關係. 微分方程的解是一個符合方程的函數. </p>
<p>微分方程的應用十分廣泛, 可以解決許多與導數有關的問題. 物理中許多涉及變力的運動學、動力學問題, 如空氣的阻力為速度函數的落體運動等問題, 很多可以用微分方程求解. </p>
<p>只有少數簡單的微分方程可以求得解析解. 不過即使沒有找到其解析解. 仍然可以確認其解的部份性質. 在無法求得解析解時, 可以利用數值分析的方式, 利用電腦來找到其數值解. 動力系統理論強調對於微分方程系統的量化分析. 而許多數值方法可以計算微分方程的數值解, 且有一定的準確度.</p>
<p>解微分方程式:</p>
<p>Euler's Method: <a href="http://tutorial.math.lamar.edu/Classes/DE/EulersMethod.aspx">http://tutorial.math.lamar.edu/Classes/DE/EulersMethod.aspx</a> </p>
<p>Runge-Kutta Method: <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods">https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods</a> </p>
<p>ANSI C 與 <a href="http://www.gnuplot.info/">gnuplot</a>:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Runge Kutta for a set of first order differential equations */
 
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
 
#define N 2 /* number of first order equations */
#define dist 0.1 /* stepsize in t*/
#define MAX 30.0 /* max for t */
 
FILE *output; /* internal filename */
FILE *output1; /* internal filename */
// 利用 pipe 呼叫 gnuplot 繪圖
FILE *pipe;
 
void runge4(double x, double y[], double step); /* Runge-Kutta function */
double f(double x, double y[], int i); /* function for derivatives */
 
void main(){
 
  double t, y[N];
  int j;
 
  output=fopen("osc.dat", "w"); /* external filename */
  output1=fopen("osc1.dat", "w"); /* external filename */
 
  y[0]=1.0; /* initial position */
  y[1]=0.0; /* initial velocity */
 
  //fprintf(output, "0\t%f\n", y[0]);
 
  for (j=1; j*dist&lt;=MAX ;j++) /* time loop */{
 
    t=j*dist;
    runge4(t, y, dist);
    fprintf(output, "%f\t%f\n", t, y[0]);
    fprintf(output1, "%f\t%f\n", t, y[1]);
  }
 
  fclose(output);
  fclose(output1);
 
  pipe = popen("gnuplot -persist","w");
  //fprintf(pipe,"set term png enhanced font \"v:/fireflysung.ttf\" 18 \n");
  fprintf(pipe,"set term png enhanced font \"y:/wqy-microhei.ttc\" 18 \n");
  //fprintf(pipe,"set yrange [68:70]\n");
  fprintf(pipe,"set output \"test.png\"\n");
  fprintf(pipe, "plot \"osc.dat\" title \"位移\" with lines, \"osc1.dat\" title \"速度\" with lines\n");
  fprintf(pipe,"quit\n");

  fprintf(pipe,"quit\n");
  pclose(pipe);
}
 
void runge4(double x, double y[], double step){
 
  double h=step/2.0, /* the midpoint */
  t1[N], t2[N], t3[N], /* temporary storage arrays */
  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */
  int i;
 
  for (i=0;i&lt;N;i++){
 
    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));
  }
 
  for (i=0;i&lt;N;i++){
 
    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));
  }
 
  for (i=0;i&lt;N;i++){
 
    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));
  }
 
  for (i=0;i&lt;N;i++){
 
    k4[i]= step*f(x+step, t3, i);
  }
 
  for (i=0;i&lt;N;i++){
 
    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;
  }
}
 
double f(double x, double y[], int i){
 
  if (i==0)
    x=y[1]; /* derivative of first equation */
  if (i==1)
    x=-y[0]-0.5*y[1];
  return x;
}</pre>
<p>Python:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from math import sqrt
 
def rk4(f, x0, y0, x1, n):
    vx = [0] * (n + 1)
    vy = [0] * (n + 1)
    print(vx, vy)
    h = (x1 - x0) / float(n)
    vx[0] = x = x0
    vy[0] = y = y0
    for i in range(1, n + 1):
        k1 = h * f(x, y)
        k2 = h * f(x + 0.5 * h, y + 0.5 * k1)
        k3 = h * f(x + 0.5 * h, y + 0.5 * k2)
        k4 = h * f(x + h, y + k3)
        vx[i] = x = x0 + i * h
        vy[i] = y = y + (k1 + k2 + k2 + k3 + k3 + k4) / 6
    return vx, vy
 
def f(x, y):
    return x * sqrt(y)
 
vx, vy = rk4(f, 0, 1, 10, 100)
for x, y in list(zip(vx, vy))[::10]:
    print("%4.1f %10.5f %+12.4e" % (x, y, y - (4 + x * x)**2 / 16))</pre>
<p>也是 Python:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def rk4(x, v, a, dt):
    """Returns final (position, velocity) tuple after
    time dt has passed.

    x: initial position (number-like object)
    v: initial velocity (number-like object)
    a: acceleration function a(x,v,dt) (must be callable)
    dt: timestep (number)"""
    x1 = x
    v1 = v
    a1 = a(x1, v1, 0)

    x2 = x + 0.5*v1*dt
    v2 = v + 0.5*a1*dt
    a2 = a(x2, v2, dt/2.0)

    x3 = x + 0.5*v2*dt
    v3 = v + 0.5*a2*dt
    a3 = a(x3, v3, dt/2.0)

    x4 = x + v3*dt
    v4 = v + a3*dt
    a4 = a(x4, v4, dt)

    xf = x + (dt/6.0)*(v1 + 2*v2 + 2*v3 + v4)
    vf = v + (dt/6.0)*(a1 + 2*a2 + 2*a3 + a4)

    return xf, vf
    
def accel(x, v, dt):
    """Determines acceleration from current position,
    velocity, and timestep. This particular acceleration
    function models a spring."""
    stiffness = 1
    damping = -0.005
    return -stiffness*x - damping*v

t = 0
dt = 1.0/4000 # Timestep of 1/40 second
state = 50, 5 # Position, velocity
euler = 50, 5 # For comparison with Euler integration

print("Initial    -position: %6.2f, velocity: %6.2f"%state)

# Run for 100 seconds
while t &lt; 100:
    t += dt
    state = rk4(state[0], state[1], accel, dt)
    #print(t, state)

    # Integrate using Euler's method
    euler = (
        euler[0] + euler[1]*dt,
        euler[1] + accel(euler[0],euler[1],dt)*dt
    )

print("Final RK4  -position: %6.2f, velocity: %6.2f"%state)
print("Final Euler-position: %6.2f, velocity: %6.2f"%euler)</pre>
<p>練習步驟:</p>
<ol>
<li>請說明何謂微分方程式?</li>
<li>微分方程式用在機械設計的哪個領域?</li>
<li>何謂微分方程式的解析解與數值分析解?</li>
<li>請說明何謂 Euler's Method? 如何用來解微分方程式?</li>
<li>請說明何謂 Runge-Kutta Method? 如何用 C 與 Python 編寫 Runge-Kutta 數值分析程式?</li>
<li>請將上述 ANSI C 的程式, 改為 Python, 用 <a href="http://www.gnuplot.info/">gnuplot</a> 繪出位移與速度圖.</li>
</ol>
<p><a href="http://darren1231.pixnet.net/blog/post/328238049-swig%E6%95%99%E5%AD%B8--c%2B%2B%E8%BD%89%E6%88%90python">SWIG C++ 與 Python 實際操作練習</a></p>
<p><a href="https://www.cs.ubc.ca/~gberseth/blog/using-swig-to-wrap-c-for-python.html">SWIG C++ 與 Python 實際操作練習二</a></p>
<p><a href="https://realmike.org/blog/2010/07/18/python-extensions-in-cpp-using-swig/">SWIG 練習三</a></p>
<p>SWIG 練習四 - <a href="https://github.com/KmolYuan/python-solvespace">Python Solvespace</a></p>
<p>利用 <a href="https://en.wikipedia.org/wiki/Differential_evolution">Differential Evolution</a> algorithm 解題:</p>
<p>ANSI C 版本:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 必須在演算過程中, 設法限制各變數的上下限!
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;
#include &lt;memory.h&gt;
#include &lt;time.h&gt;
 
// 最大族群數, NP
#define MAXPOP  5000
// 最大向量維度, D
#define MAXDIM  35
// MAXIMAPROBLEM =1 最大化 0 最小化
#define MAXIMAPROBLEM 1
// 最大化時 PENALITY 必須為負值, 否則為正值
#define PENALITY -1000
/*
#define MAXIMAPROBLEM 0
#define PENALITY 1000
*/
 
/*------Constants for rnd_uni()--------------------------------------------*/
 
#define IM1 2147483563
#define IM2 2147483399
#define AM (1.0/IM1)
#define IMM1 (IM1-1)
#define IA1 40014
#define IA2 40692
#define IQ1 53668
#define IQ2 52774
#define IR1 12211
#define IR2 3791
#define NTAB 32
#define NDIV (1+IMM1/NTAB)
#define EPS 1.2e-7
#define RNMX (1.0-EPS)
 
/*------------------------Globals---------------------------------------*/
 
long  rnd_uni_init;                 /* serves as a seed for rnd_uni()   */
double c[MAXPOP][MAXDIM], d[MAXPOP][MAXDIM];
double (*pold)[MAXPOP][MAXDIM], (*pnew)[MAXPOP][MAXDIM], (*pswap)[MAXPOP][MAXDIM];
 
/*---------Function declarations----------------------------------------*/
 
void  assignd(int D, double a[], double b[]);
double rnd_uni(long *idum);    /* uniform pseudo random number generator */
double extern evaluate(int D, double tmp[], long *nfeval); /* obj. funct. */
 
/*---------Function definitions-----------------------------------------*/
// 指定向量 b 為 a
void  assignd(int D, double a[], double b[])
{
   int j;
   for (j=0; j&lt;D; j++)
   {
      a[j] = b[j];
   }
}
 
// 產生 0 ~ 1 間的亂數
double rnd_uni(long *idum)
{
  long j;
  long k;
  static long idum2=123456789;
  static long iy=0;
  static long iv[NTAB];
  double temp;
 
  if (*idum &lt;= 0)
  {
    if (-(*idum) &lt; 1) *idum=1;
    else *idum = -(*idum);
    idum2=(*idum);
    for (j=NTAB+7;j&gt;=0;j--)
    {
      k=(*idum)/IQ1;
      *idum=IA1*(*idum-k*IQ1)-k*IR1;
      if (*idum &lt; 0) *idum += IM1;
      if (j &lt; NTAB) iv[j] = *idum;
    }
    iy=iv[0];
  }
  k=(*idum)/IQ1;
  *idum=IA1*(*idum-k*IQ1)-k*IR1;
  if (*idum &lt; 0) *idum += IM1;
  k=idum2/IQ2;
  idum2=IA2*(idum2-k*IQ2)-k*IR2;
  if (idum2 &lt; 0) idum2 += IM2;
  j=iy/NDIV;
  iy=iv[j]-idum2;
  iv[j] = *idum;
  if (iy &lt; 1) iy += IMM1;
  if ((temp=AM*iy) &gt; RNMX) return RNMX;
  else return temp;
 
}/*------End of rnd_uni()--------------------------*/
 
// 將上下限轉為全域變數
double inibound_h;      /* upper parameter bound              */
double inibound_l;      /* lower parameter bound              */
// 與機構合成相關的全域變數
// 宣告一個座標結構
struct Coord {
    double x;
    double y;
  // 這裡保留 double z;
};
 
main(int argc, char *argv[])
{
   char  chr;             /* y/n choice variable                */
   char  *strat[] =       /* strategy-indicator                 */
   {
            "",
            "DE/best/1/exp",
            "DE/rand/1/exp",
            "DE/rand-to-best/1/exp",
            "DE/best/2/exp",
            "DE/rand/2/exp",
            "DE/best/1/bin",
            "DE/rand/1/bin",
            "DE/rand-to-best/1/bin",
            "DE/best/2/bin",
            "DE/rand/2/bin"
   };
 
   int   i, j, L, n;      /* counting variables                 */
   int   r1, r2, r3, r4;  /* placeholders for random indexes    */
   int   r5;              /* placeholders for random indexes    */
   int   D;               /* Dimension of parameter vector      */
   int   NP;              /* number of population members       */
   int   imin;            /* index to member with lowest energy */
   int   refresh;         /* refresh rate of screen output      */
   int   strategy;        /* choice parameter for screen output */
   int   gen, genmax, seed;   
 
   long  nfeval;          /* number of function evaluations     */
 
   double trial_cost;      /* buffer variable                    */
   // 將上下限轉為全域變數, 可能要根據各變數加以設定
   //double inibound_h;      /* upper parameter bound              */
   //double inibound_l;      /* lower parameter bound              */
   double tmp[MAXDIM], best[MAXDIM], bestit[MAXDIM]; /* members  */
   double cost[MAXPOP];    /* obj. funct. values                 */
   double cvar;            /* computes the cost variance         */
   double cmean;           /* mean cost                          */
   double F,CR;            /* control variables of DE            */
   double cmin;            /* help variables                     */
 
   FILE  *fpin_ptr;
   FILE  *fpout_ptr;
 
// 計算執行過程所需時間起點, 需要導入 time.h
  clock_t start = clock();
 
/*------Initializations----------------------------*/
 
// 將結果寫入 out.dat
 fpout_ptr = fopen("out.dat","w");          /* open output file for reading,    */
// 目前已經採用 strategy 3 可以得到最佳結果
  strategy = 3;
  genmax = 2000;
  refresh = 100;
  // 配合機構尺寸合成, 每一個體有 9 個機構尺寸值與 5 個通過點角度值
  D = 2;
  NP = 200;
  inibound_h = 50.;
  inibound_l = 0.;
/*得到最佳解
  F = 0.85;
CR 必須介於 0 to 1. 之間
  CR = 1.;
*/
  F = 0.85;
  CR = 1.;
  seed = 3;
 
 //fclose(fpin_ptr);
 
/*-----Checking input variables for proper range----------------------------*/
 
  if (D &gt; MAXDIM)
  {
     printf("\nError! D=%d &gt; MAXDIM=%d\n",D,MAXDIM);
     exit(1);
  }
  if (D &lt;= 0)
  {
     printf("\nError! D=%d, should be &gt; 0\n",D);
     exit(1);
  }
  if (NP &gt; MAXPOP)
  {
     printf("\nError! NP=%d &gt; MAXPOP=%d\n",NP,MAXPOP);
     exit(1);
  }
  if (NP &lt;= 0)
  {
     printf("\nError! NP=%d, should be &gt; 0\n",NP);
     exit(1);
  }
  if ((CR &lt; 0) || (CR &gt; 1.0))
  {
     printf("\nError! CR=%f, should be ex [0,1]\n",CR);
     exit(1);
  }
  if (seed &lt;= 0)
  {
     printf("\nError! seed=%d, should be &gt; 0\n",seed);
     exit(1);
  }
  if (refresh &lt;= 0)
  {
     printf("\nError! refresh=%d, should be &gt; 0\n",refresh);
     exit(1);
  }
  if (genmax &lt;= 0)
  {
     printf("\nError! genmax=%d, should be &gt; 0\n",genmax);
     exit(1);
  }
  if ((strategy &lt; 0) || (strategy &gt; 10))
  {
     printf("\nError! strategy=%d, should be ex {1,2,3,4,5,6,7,8,9,10}\n",strategy);
     exit(1);
  }
  if (inibound_h &lt; inibound_l)
  {
     printf("\nError! inibound_h=%f &lt; inibound_l=%f\n",inibound_h, inibound_l);
     exit(1);
  }
 
/*-----Initialize random number generator-----------------------------*/
 
 rnd_uni_init = -(long)seed;  /* initialization of rnd_uni() */
 nfeval       =  0;  /* reset number of function evaluations */
 
/*------Initialization------------------------------------------------*/
/*------Right now this part is kept fairly simple and just generates--*/
/*------random numbers in the range [-initfac, +initfac]. You might---*/
/*------want to extend the init part such that you can initialize-----*/
/*------each parameter separately.------------------------------------*/
 
   for (i=0; i&lt;NP; i++)
   {
      for (j=0; j&lt;D; j++) /* spread initial population members */
      {
        c[i][j] = inibound_l + rnd_uni(&amp;rnd_uni_init)*(inibound_h - inibound_l);
      }
      cost[i] = evaluate(D,c[i],&amp;nfeval); /* obj. funct. value */
   }
   cmin = cost[0];
   imin = 0;
   for (i=1; i&lt;NP; i++)
   {
     if(MAXIMAPROBLEM == 1)
     {
       // 改為最大化
        if (cost[i]&gt;cmin)
        {
          cmin = cost[i];
          imin = i;
        }
      }
      else
      {
        // 最小化問題
        if (cost[i]&lt;cmin)
        {
          cmin = cost[i];
          imin = i;
        }
      }
   }
 
   assignd(D,best,c[imin]);            /* save best member ever          */
   assignd(D,bestit,c[imin]);          /* save best member of generation */
 
   pold = &amp;c; /* old population (generation G)   */
   pnew = &amp;d; /* new population (generation G+1) */
 
/*=======================================================================*/
/*=========Iteration loop================================================*/
/*=======================================================================*/
 
   gen = 0;                          /* generation counter reset */
   while ((gen &lt; genmax) /*&amp;&amp; (kbhit() == 0)*/) /* remove comments if conio.h */
   {                                            /* is accepted by compiler    */
      gen++;
      imin = 0;
 
      for (i=0; i&lt;NP; i++)         /* Start of loop through ensemble  */
      {
     do                        /* Pick a random population member */
     {                         /* Endless loop for NP &lt; 2 !!!     */
       r1 = (int)(rnd_uni(&amp;rnd_uni_init)*NP);
     }while(r1==i);            
 
     do                        /* Pick a random population member */
     {                         /* Endless loop for NP &lt; 3 !!!     */
       r2 = (int)(rnd_uni(&amp;rnd_uni_init)*NP);
     }while((r2==i) || (r2==r1));
 
     do                        /* Pick a random population member */
     {                         /* Endless loop for NP &lt; 4 !!!     */
       r3 = (int)(rnd_uni(&amp;rnd_uni_init)*NP);
     }while((r3==i) || (r3==r1) || (r3==r2));
 
     do                        /* Pick a random population member */
     {                         /* Endless loop for NP &lt; 5 !!!     */
       r4 = (int)(rnd_uni(&amp;rnd_uni_init)*NP);
     }while((r4==i) || (r4==r1) || (r4==r2) || (r4==r3));
 
     do                        /* Pick a random population member */
     {                         /* Endless loop for NP &lt; 6 !!!     */
       r5 = (int)(rnd_uni(&amp;rnd_uni_init)*NP);
     }while((r5==i) || (r5==r1) || (r5==r2) || (r5==r3) || (r5==r4));
 
/*=======EXPONENTIAL CROSSOVER============================================================*/
 
/*-------DE/best/1/exp--------------------------------------------------------------------*/
/*-------Our oldest strategy but still not bad. However, we have found several------------*/
/*-------optimization problems where misconvergence occurs.-------------------------------*/
     if (strategy == 1) /* strategy DE0 (not in our paper) */
     {
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D);
       L = 0;
       do
       {                       
         tmp[n] = bestit[n] + F*((*pold)[r2][n]-(*pold)[r3][n]);
         n = (n+1)%D;
         L++;
       }while((rnd_uni(&amp;rnd_uni_init) &lt; CR) &amp;&amp; (L &lt; D));
     }
/*-------DE/rand/1/exp-------------------------------------------------------------------*/
/*-------This is one of my favourite strategies. It works especially well when the-------*/
/*-------"bestit[]"-schemes experience misconvergence. Try e.g. F=0.7 and CR=0.5---------*/
/*-------as a first guess.---------------------------------------------------------------*/
     else if (strategy == 2) /* strategy DE1 in the techreport */
     {
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D);
       L = 0;
       do
       {                       
         tmp[n] = (*pold)[r1][n] + F*((*pold)[r2][n]-(*pold)[r3][n]);
         n = (n+1)%D;
         L++;
       }while((rnd_uni(&amp;rnd_uni_init) &lt; CR) &amp;&amp; (L &lt; D));
     }
/*-------DE/rand-to-best/1/exp-----------------------------------------------------------*/
/*-------This strategy seems to be one of the best strategies. Try F=0.85 and CR=1.------*/
/*-------If you get misconvergence try to increase NP. If this doesn't help you----------*/
/*-------should play around with all three control variables.----------------------------*/
     else if (strategy == 3) /* similiar to DE2 but generally better */
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
       L = 0;
       do
       {                       
         tmp[n] = tmp[n] + F*(bestit[n] - tmp[n]) + F*((*pold)[r1][n]-(*pold)[r2][n]);
         n = (n+1)%D;
         L++;
       }while((rnd_uni(&amp;rnd_uni_init) &lt; CR) &amp;&amp; (L &lt; D));
     }
/*-------DE/best/2/exp is another powerful strategy worth trying--------------------------*/
     else if (strategy == 4)
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
       L = 0;
       do
       {                           
         tmp[n] = bestit[n] + 
              ((*pold)[r1][n]+(*pold)[r2][n]-(*pold)[r3][n]-(*pold)[r4][n])*F;
         n = (n+1)%D;
         L++;
       }while((rnd_uni(&amp;rnd_uni_init) &lt; CR) &amp;&amp; (L &lt; D));
     }
/*-------DE/rand/2/exp seems to be a robust optimizer for many functions-------------------*/
     else if (strategy == 5)
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
       L = 0;
       do
       {                           
         tmp[n] = (*pold)[r5][n] + 
              ((*pold)[r1][n]+(*pold)[r2][n]-(*pold)[r3][n]-(*pold)[r4][n])*F;
         n = (n+1)%D;
         L++;
       }while((rnd_uni(&amp;rnd_uni_init) &lt; CR) &amp;&amp; (L &lt; D));
     }
 
/*=======Essentially same strategies but BINOMIAL CROSSOVER===============================*/
 
/*-------DE/best/1/bin--------------------------------------------------------------------*/
     else if (strategy == 6) 
     {
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
           for (L=0; L&lt;D; L++) /* perform D binomial trials */
           {
         if ((rnd_uni(&amp;rnd_uni_init) &lt; CR) || L == (D-1)) /* change at least one parameter */
         {                       
           tmp[n] = bestit[n] + F*((*pold)[r2][n]-(*pold)[r3][n]);
         }
         n = (n+1)%D;
           }
     }
/*-------DE/rand/1/bin-------------------------------------------------------------------*/
     else if (strategy == 7) 
     {
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
           for (L=0; L&lt;D; L++) /* perform D binomial trials */
           {
         if ((rnd_uni(&amp;rnd_uni_init) &lt; CR) || L == (D-1)) /* change at least one parameter */
         {                       
           tmp[n] = (*pold)[r1][n] + F*((*pold)[r2][n]-(*pold)[r3][n]);
         }
         n = (n+1)%D;
           }
     }
/*-------DE/rand-to-best/1/bin-----------------------------------------------------------*/
     else if (strategy == 8) 
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
           for (L=0; L&lt;D; L++) /* perform D binomial trials */
           {
         if ((rnd_uni(&amp;rnd_uni_init) &lt; CR) || L == (D-1)) /* change at least one parameter */
         {                       
           tmp[n] = tmp[n] + F*(bestit[n] - tmp[n]) + F*((*pold)[r1][n]-(*pold)[r2][n]);
         }
         n = (n+1)%D;
           }
     }
/*-------DE/best/2/bin--------------------------------------------------------------------*/
     else if (strategy == 9)
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
           for (L=0; L&lt;D; L++) /* perform D binomial trials */
           {
         if ((rnd_uni(&amp;rnd_uni_init) &lt; CR) || L == (D-1)) /* change at least one parameter */
         {                       
           tmp[n] = bestit[n] + 
              ((*pold)[r1][n]+(*pold)[r2][n]-(*pold)[r3][n]-(*pold)[r4][n])*F;
         }
         n = (n+1)%D;
           }
     }
/*-------DE/rand/2/bin--------------------------------------------------------------------*/
     else
     { 
       assignd(D,tmp,(*pold)[i]);
       n = (int)(rnd_uni(&amp;rnd_uni_init)*D); 
           for (L=0; L&lt;D; L++) /* perform D binomial trials */
           {
         if ((rnd_uni(&amp;rnd_uni_init) &lt; CR) || L == (D-1)) /* change at least one parameter */
         {                       
           tmp[n] = (*pold)[r5][n] + 
              ((*pold)[r1][n]+(*pold)[r2][n]-(*pold)[r3][n]-(*pold)[r4][n])*F;
         }
         n = (n+1)%D;
           }
     }
 
 
/*=======Trial mutation now in tmp[]. Test how good this choice really was.==================*/
 
     trial_cost = evaluate(D,tmp,&amp;nfeval);  /* Evaluate new vector in tmp[] */
   if(MAXIMAPROBLEM == 1)
   {
    // 改為最大化
       if (trial_cost &gt;= cost[i])   /* improved objective function value ? */
       {                                  
          cost[i]=trial_cost;         
          assignd(D,(*pnew)[i],tmp);
          if (trial_cost&gt;cmin)          /* Was this a new minimum? */
          {                               /* if so...*/
             cmin=trial_cost;           /* reset cmin to new low...*/
             imin=i;
             assignd(D,best,tmp);           
          }                           
       }                            
       else
       {
          assignd(D,(*pnew)[i],(*pold)[i]); /* replace target with old value */
       }
    }
    else
    {
          // 最小化問題
       if (trial_cost &lt;= cost[i])   /* improved objective function value ? */
       {                                  
          cost[i]=trial_cost;         
          assignd(D,(*pnew)[i],tmp);
          if (trial_cost&lt;cmin)          /* Was this a new minimum? */
          {                               /* if so...*/
             cmin=trial_cost;           /* reset cmin to new low...*/
             imin=i;
             assignd(D,best,tmp);           
          }                           
       }                            
       else
       {
          assignd(D,(*pnew)[i],(*pold)[i]); /* replace target with old value */
       }
    }
 
      }   /* End mutation loop through pop. */
 
      assignd(D,bestit,best);  /* Save best population member of current iteration */
 
      /* swap population arrays. New generation becomes old one */
 
      pswap = pold;
      pold  = pnew;
      pnew  = pswap;
 
/*----Compute the energy variance (just for monitoring purposes)-----------*/
 
      cmean = 0.;          /* compute the mean value first */
      for (j=0; j&lt;NP; j++)
      {
         cmean += cost[j];
      }
      cmean = cmean/NP;
 
      cvar = 0.;           /* now the variance              */
      for (j=0; j&lt;NP; j++)
      {
         cvar += (cost[j] - cmean)*(cost[j] - cmean);
      }
      cvar = cvar/(NP-1);
 
 
/*----Output part----------------------------------------------------------*/
 
      if (gen%refresh==1)   /* display after every refresh generations */
      { /* ABORT works only if conio.h is accepted by your compiler */
    printf("\n\n                         PRESS ANY KEY TO ABORT"); 
    printf("\n\n\n Best-so-far cost funct. value=%-15.10g\n",cmin);
 
    for (j=0;j&lt;D;j++)
    {
      printf("\n best[%d]=%-15.10g",j,best[j]);
    }
    printf("\n\n Generation=%d  NFEs=%ld   Strategy: %s    ",gen,nfeval,strat[strategy]);
    printf("\n NP=%d    F=%-4.2g    CR=%-4.2g   cost-variance=%-10.5g\n",
               NP,F,CR,cvar);
      }
 
      fprintf(fpout_ptr,"%ld   %-15.10g\n",nfeval,cmin);
   }
/*=======================================================================*/
/*=========End of iteration loop=========================================*/
/*=======================================================================*/
 
/*-------Final output in file-------------------------------------------*/
 
 
   fprintf(fpout_ptr,"\n\n\n Best-so-far obj. funct. value = %-15.10g\n",cmin);
 
   for (j=0;j&lt;D;j++)
   {
     fprintf(fpout_ptr,"\n best[%d]=%-15.10g",j,best[j]);
   }
   fprintf(fpout_ptr,"\n\n Generation=%d  NFEs=%ld   Strategy: %s    ",gen,nfeval,strat[strategy]);
   fprintf(fpout_ptr,"\n NP=%d    F=%-4.2g    CR=%-4.2g    cost-variance=%-10.5g\n",
           NP,F,CR,cvar); 
 
  fclose(fpout_ptr);
 
  /* Code you want timed here */
  printf("Time elapsed: %f\n", ((double)clock() - start) / CLOCKS_PER_SEC);
   return(0);
}
 
/*-----------End of main()------------------------------------------*/
 
// 適應函式 fittness function (cost function)
double evaluate(int D, double tmp[], long *nfeval)
{
   double result=0, surface = 80.0, z, volume, penality;
   (*nfeval)++;
   z = (surface-tmp[0]*tmp[1])/(2.0*(tmp[0]+tmp[1]));
   volume = tmp[0]*tmp[1]*z;
 
  if(volume &lt;= 0){
    return PENALITY;
  }
// 只限制長度與寬度必須大於 0
  if(tmp[0] &lt;= inibound_l){
    return PENALITY;
  }
 
  if(tmp[1] &lt;= inibound_l){
    return PENALITY;
  }
/*
  if((tmp[0] &lt;= inibound_l)|| (tmp[0] &gt;inibound_h)){
    return PENALITY;
  }
 
  if((tmp[1] &lt;= inibound_l) || (tmp[1] &gt;inibound_h)){
    return PENALITY;
  }
  */
  // volume must &gt;0 and max volume
  // 目前為最小化問題
   //return 1+1/(volume*volume);
  return volume;
}
 </pre>
<p>Python 版本:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import random

class Chromosome(object):

    """
    just copy the idea of genetic algorithm, pretty similar..
    """
    def __init__(self, n):
        """
        int n, dimension of question
        """
        # dimension
        self.n = n
        # the gene
        self.v = [0] * n
        # the fitness value
        self.f = 0

    def assign(self, obj):
        """
        Chromosome obj

        copy all attribute from obj to itself
        """
        self.n = obj.n
        self.v = obj.v[:]
        self.f = obj.f


class DiffertialEvolution(object):

    def __init__(self,Func, pType, strategy, D, NP, F, CR, lower, upper, maxGen, report):
        # if pType = 1 it is maximization  otherwise is minimization problem
        self.pType = pType
        # strategy 1~10, choice what strategy to generate new member in temporary
        self.strategy = strategy
        # dimesion of quesiton
        self.D = D
        # population size
        # To start off NP = 10*D is a reasonable choice. Increase NP if misconvergence
        self.NP = NP
        # weight factor
        # F is usually between 0.5 and 1 (in rare cases &gt; 1)
        self.F = F
        # crossover possible
        # CR in [0,1]
        self.CR = CR
        # lower bound array
        self.lb = lower[:]
        # upper bound array
        self.ub = upper[:]
        # maximum generation
        self.maxGen = maxGen
        # how many generation report once
        self.rpt = report
        # object function, or enviorment
        self.f = Func
        # check parameter is set properly
        self.checkParameter()

        # generation pool, depend on population size
        self.pop = [Chromosome(D) for i in range(NP)]
        # last generation best member
        self.lastgenbest = Chromosome(D)
        # current best member
        self.currentbest = Chromosome(D)
        # the generation count
        self.gen = 0
        # the vector
        self.r1 = 0
        self.r2 = 0
        self.r3 = 0
        self.r4 = 0
        self.r5 = 0

    def checkParameter(self):
        """
        check parameter is set properly
        """
        if (type(self.D) is not int) and self.D &lt;= 0:
            raise Exception('D shoud be integer and larger than 0')
        if (type(self.NP) is not int) and self.NP &lt;= 0:
            raise Exception('NP shoud be integer and larger than 0')
        if self.CR &lt; 0 or self.CR &gt; 1:
            raise Exception('CR should be [0,1]')
        if self.maxGen &lt;= 0:
            raise Exception('generation should larger than 0')
        if self.rpt &lt;= 0 or self.rpt &gt; self.maxGen:
            raise Exception('report should be larger than 0 and less than max genration')
        if self.strategy &lt; 1 or self.strategy &gt; 10:
            raise Exception('strategy should be [1,10]')
        for lower, upper in zip(self.lb, self.ub):
            if lower &gt; upper:
                raise Exception('upper bound should be larger than lower bound')

    def init(self):
        """
        init population
        """
        for i in range(self.NP):
            for j in range(self.D):
                self.pop[i].v[j] = self.lb[j] + random.random()*(self.ub[j] - self.lb[j])
            self.pop[i].f = self.evalute(self.pop[i])

    def evalute(self, p):
        """
        evalute the member in enviorment
        """
        return self.f(p.v)

    def findBest(self):
        """
        find member that have minimum fitness value from pool
        """
        if self.pType == 1:
            return max(self.pop, key=lambda chrom:chrom.f)
        else:
            return min(self.pop, key=lambda chrom:chrom.f)

    def generateRandomVector(self, i):
        """
        generate new vector
        """
        while True:
            self.r1 = int(random.random() * self.NP)
            if not (self.r1 == i):
                break

        while True:
            self.r2 = int(random.random() * self.NP)
            if not ((self.r2 == i) or (self.r2 == self.r1)):
                break

        while True:
            self.r3 = int(random.random() * self.NP)
            if not ((self.r3 == i) or (self.r3 == self.r1) or (self.r3 == self.r2)):
                break

        while True:
            self.r4 = int(random.random() * self.NP)
            if not ((self.r4 == i) or (self.r4 == self.r1) or (self.r4 == self.r2) or (self.r4 == self.r3)):
                break

        while True:
            self.r5 = int(random.random() * self.NP)
            if not ((self.r5 == i) or (self.r5 == self.r1) or (self.r5 == self.r2) or (self.r5 == self.r3) or (self.r5 == self.r4)):
                break

    def recombination(self, i):
        """
        use new vector, recombination the new one member to tmp
        """
        tmp = Chromosome(self.D)

        if self.strategy == 1:
            tmp.assign(self.pop[i])
            n = int(random.random() * self.D)
            L = 0
            while True:
                tmp.v[n] = self.lastgenbest.v[n] + self.F*(self.pop[self.r2].v[n] - self.pop[self.r3].v[n])
                n = (n + 1) % self.D
                L += 1
                if not ((random.random() &lt; self.CR) and (L &lt; self.D)):
                    break

        elif self.strategy == 2:
            tmp.assign(self.pop[i])
            n = int(random.random() * self.D)
            L = 0
            while True:
                tmp.v[n] = self.pop[self.r1].v[n] + self.F*(self.pop[self.r2].v[n] - self.pop[self.r3].v[n])
                n = (n + 1) % self.D
                L += 1
                if not ((random.random() &lt; self.CR) and (L &lt; self.D)):
                    break

        elif (self.strategy == 3):
            tmp.assign(self.pop[i])
            n = int(random.random() * self.D)
            L = 0
            while True:
                tmp.v[n] = tmp.v[n] + self.F*(self.lastgenbest.v[n] - tmp.v[n]) + self.F*(self.pop[self.r1].v[n] - self.pop[self.r2].v[n])
                n = (n + 1) % self.D
                L += 1
                if not ((random.random() &lt; self.CR) and (L &lt; self.D)):
                    break

        elif (self.strategy == 4):
            tmp.assign(self.pop[i])

            n = int(random.random() * self.D)

            L = 0
            while True:
                tmp.v[n] = self.lastgenbest.v[n] + (self.pop[self.r1].v[n] + self.pop[self.r2].v[n] - self.pop[self.r3].v[n] - self.pop[self.r4].v[n]) * self.F
                n = (n + 1) % self.D
                L += 1
                if not ((random.random() &lt; self.CR) and (L &lt; self.D)):
                    break

        elif (self.strategy == 5):
            tmp.assign(self.pop[i])
            n = int(random.random() * self.D)
            L = 0
            while True:
                tmp.v[n] = self.pop[self.r5].v[n] + (self.pop[self.r1].v[n] + self.pop[self.r2].v[n] - self.pop[self.r3].v[n] - self.pop[self.r4].v[n]) * self.F
                n = (n + 1) % self.D
                L += 1
                if not ((random.random() &lt; self.CR) and (L &lt; self.D)):
                    break

        elif (self.strategy == 6):
            tmp.assign(self.pop[i])
            n = int(random.random() * self.D)
            for L in range(self.D):
                if ((random.random() &lt; self.CR) or L == (self.D - 1)):
                    tmp.v[n] = self.lastgenbest.v[n] + self.F*(self.pop[self.r2].v[n] - self.pop[self.r3].v[n])
                n = (n + 1) % self.D

        elif (self.strategy == 7):
            tmp.assign(self.pop[i])
            n = int(random.random() * self.D)
            for L in range(self.D):
                if ((random.random() &lt; self.CR) or L == (self.D - 1)):
                    tmp.v[n] = self.pop[self.r1].v[n] + self.F*(self.pop[self.r2].v[n] - self.pop[self.r3].v[n])

                n = (n + 1) % self.D

        elif (self.strategy == 8):
            tmp.assign(self.pop[i])
            n = int(random.random() * self.D)
            for L in range(self.D):
                if ((random.random() &lt; self.CR) or L == (self.D - 1)):
                    tmp.v[n] = tmp.v[n] + self.F*(self.lastgenbest.v[n] - tmp.v[n]) + self.F*(self.pop[self.r1].v[n] - self.pop[self.r2].v[n])

                n = (n + 1) % self.D

        elif (self.strategy == 9):
            tmp.assign(self.pop[i])
            n = int(random.random() * self.D)
            for L in range(self.D):
                if ((random.random() &lt; self.CR) or L == (self.D - 1)):
                    tmp.v[n] = self.lastgenbest.v[n] + (self.pop[self.r1].v[n] + self.pop[self.r2].v[n] - self.pop[self.r3].v[n] - self.pop[self.r4].v[n]) * self.F

                n = (n + 1) % self.D

        else:
            tmp.assign(self.pop[i])
            n = int(random.random() * self.D)
            for L in range(self.D):
                if ((random.random() &lt; self.CR) or L == (self.D - 1)):
                    tmp.v[n] = self.pop[self.r5].v[n] + (self.pop[self.r1].v[n] + self.pop[self.r2].v[n] - self.pop[self.r3].v[n] - self.pop[self.r4].v[n]) * self.F
                n = (n + 1) % self.D
        return tmp

    def report(self):
        """
        report current generation status
        """
        if self.gen == 0:
            print("DiffertialEvolution results - init pop")
        elif self.gen == self.maxGen:
            print("Final DiffertialEvolution results at", self.gen, "generations")
        else:
            print("DiffertialEvolution results after", self.gen, "generations")
        print("Function : %.6f" % (self.currentbest.f))
        for i, v in enumerate(self.currentbest.v, start=1):
            print("Var", i, ":", v)

    def overbound(self, member):
        """
        check the member's chromosome that is out of bound?
        """
        for i in range(self.D):
            if member.v[i] &gt; self.ub[i] or member.v[i] &lt; self.lb[i]:
                return True
        return False

    def run(self):
        """
        run the algorithm...
        """
        # initial step
        # generation 0
        self.gen = 0
        # init the member's chromsome
        self.init()
        # find the best one(smallest fitness value)
        tmp = self.findBest()
        # copy to lastgenbest
        self.lastgenbest.assign(tmp)
        # copy to currentbest
        self.currentbest.assign(tmp)
        # report status
        self.report()
        # end initial step

        # the evolution journey is beggin...
        for self.gen in range(1, self.maxGen + 1):
            for i in range(self.NP):
                # generate new vector
                self.generateRandomVector(i)
                # use the vector recombine the member to temporary
                tmp = self.recombination(i)
                # check the one is out of bound?
                if self.overbound(tmp):
                    # if it is, then ignore
                    continue
                # is not out of bound, that mean it's quilify of enviorment
                # then evalute the one
                tmp.f = self.evalute(tmp)
                # if temporary one is better than origin(fitness value is larger or smaller)
                # pType is 1, the problem is maximization type
                if self.pType == 1:
                    if tmp.f &gt;= self.pop[i].f:
                        # copy the temporary one to origin member
                        self.pop[i].assign(tmp)
                        # check the temporary one is better than the currentbest
                        if tmp.f &gt; self.currentbest.f:
                            # copy the temporary one to currentbest
                            self.currentbest.assign(tmp)
                else:
                    if tmp.f &lt;= self.pop[i].f:
                        # copy the temporary one to origin member
                        self.pop[i].assign(tmp)
                        # check the temporary one is better than the currentbest
                        if tmp.f &lt; self.currentbest.f:
                            # copy the temporary one to currentbest
                            self.currentbest.assign(tmp)
            # copy the currentbest to lastgenbest
            self.lastgenbest.assign(self.currentbest)
            # if report generation is set, report
            if self.rpt != 0:
                if self.gen % self.rpt == 0:
                    self.report()
        # the evolution journey is done, report the final status
        self.report()

#fittness function (cost function)
def evaluate(designVariablel):
    surface = 80.0
    # if pType is 1, the penality is negative (maximization problem)
    # if pType is 0, the penality is positive (minimization problem)
    penality = -1000

    z = (surface-designVariablel[0]*designVariablel[1])/(2.0*(designVariablel[0]\
         +designVariablel[1]))
    volume = designVariablel[0]*designVariablel[1]*z
  
    if(volume &lt;= 0):
        return penality

    # box length and width need to be larger than 0
    if(designVariablel[0] &lt;= 0):
        return penality

    if(designVariablel[1] &lt;= 0):
        return penality
    return volume
#volume = DiffertialEvolution((self,Func, max, strategy, D, NP, F, CR, lower, upper, maxGen, report)
volume = DiffertialEvolution(evaluate, 1, 3, 2, 100, 0.6, 0.85, [0, 0], [50, 50], 100, 10)
volume.run()
</pre>
<p>將上述 Python 轉為 Cython 格式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#import random
from cpython cimport bool
#from array import array
import numpy as np
cimport numpy as np
from libc.stdlib cimport rand, RAND_MAX, srand
from libc.time cimport time

# make true it is random everytime
srand(time(NULL))

cdef double randV():
    return rand()*1.0 / RAND_MAX

cdef class Chromosome(object):
    """
    just copy the idea of genetic algorithm, pretty similar..
    """
    cdef public int n
    cdef public double f
    cdef public np.ndarray v

    def __cinit__(self, int n):
        """
        int n, dimension of question
        """
        # dimension
        self.n = n
        # the gene
        self.v = np.zeros(n)
        # the fitness value
        self.f = 0

    def assign(self, Chromosome obj):
        """
        Chromosome obj
        copy all attribute from obj to itself
        """
        self.n = obj.n
        self.v[:] = obj.v
        self.f = obj.f


cdef class DiffertialEvolution(object):

    cdef:
        int strategy, D, NP, maxGen, rpt, gen, r1, r2, r3, r4, r5
        double F, CR
        np.ndarray lb, ub, pop
        object f
        Chromosome lastgenbest, currentbest

    def __cinit__(self, object Func, int strategy, int D, int NP, double F, double CR, object lower, object upper, int maxGen, int report):
        # strategy 1~10, choice what strategy to generate new member in temporary
        self.strategy = strategy
        # dimesion of quesiton
        self.D = D
        # population size
        # To start off NP = 10*D is a reasonable choice. Increase NP if misconvergence
        self.NP = NP
        # weight factor
        # F is usually between 0.5 and 1 (in rare cases &gt; 1)
        self.F = F
        # crossover possible
        # CR in [0,1]
        self.CR = CR
        # low bound
        self.lb = np.array(lower[:])
        # up bound
        self.ub = np.array(upper[:])
        # maximum generation
        self.maxGen = maxGen
        # how many generation report once
        self.rpt = report
        # object function, or enviorment
        self.f = Func
        # check parameter is set properly
        self.checkParameter()

        # generation pool, depend on population size
        #self.pop = [Chromosome(self.D) for i in range(self.NP)]
        self.pop = np.ndarray((NP,),dtype=np.object)
        for i in range(NP):
            self.pop[i] = Chromosome(self.D)
        # last generation best member
        self.lastgenbest = Chromosome(D)
        # current best member
        self.currentbest = Chromosome(D)
        # the generation count
        self.gen = 0
        # the vector
        self.r1 = 0
        self.r2 = 0
        self.r3 = 0
        self.r4 = 0
        self.r5 = 0

    cdef void checkParameter(self):
        """
        check parameter is set properly
        """
        if (type(self.D) is not int) and self.D &lt;= 0:
            raise Exception('D shoud be integer and larger than 0')
        if (type(self.NP) is not int) and self.NP &lt;= 0:
            raise Exception('NP shoud be integer and larger than 0')
        if self.CR &lt; 0 or self.CR &gt; 1:
            raise Exception('CR should be [0,1]')
        if self.maxGen &lt;= 0:
            raise Exception('generation should larger than 0')
        if self.rpt &lt;= 0 or self.rpt &gt; self.maxGen:
            raise Exception('report should be larger than 0 and less than max genration')
        if self.strategy &lt; 1 or self.strategy &gt; 10:
            raise Exception('strategy should be [1,10]')
        for lower, upper in zip(self.lb, self.ub):
            if lower &gt; upper:
                raise Exception('upper bound should be larger than lower bound')

    cdef void init(self):
        """
        init population
        """
        cdef int i, j

        for i in range(self.NP):
            for j in range(self.D):
                self.pop[i].v[j] = self.lb[j] + randV()*(self.ub[j] - self.lb[j])
            self.pop[i].f = self.evalute(self.pop[i])

    cdef double evalute(self, Chromosome member):
        """
        evalute the member in enviorment
        """
        return self.f(member.v)

    cdef Chromosome findBest(self):
        """
        find member that have minimum fitness value from pool
        """
        return min(self.pop, key=lambda chrom:chrom.f)

    cdef void generateRandomVector(self, i):
        """
        generate new vector
        """
        while True:
            self.r1 = int(randV() * self.NP)
            if not (self.r1 == i):
                break

        while True:
            self.r2 = int(randV() * self.NP)
            if not ((self.r2 == i) or (self.r2 == self.r1)):
                break

        while True:
            self.r3 = int(randV() * self.NP)
            if not ((self.r3 == i) or (self.r3 == self.r1) or (self.r3 == self.r2)):
                break

        while True:
            self.r4 = int(randV() * self.NP)
            if not ((self.r4 == i) or (self.r4 == self.r1) or (self.r4 == self.r2) or (self.r4 == self.r3)):
                break

        while True:
            self.r5 = int(randV() * self.NP)
            if not ((self.r5 == i) or (self.r5 == self.r1) or (self.r5 == self.r2) or (self.r5 == self.r3) or (self.r5 == self.r4)):
                break

    cdef Chromosome recombination(self, int i):
        """
        use new vector, recombination the new one member to tmp
        """
        cdef Chromosome tmp
        cdef int n, L

        tmp = Chromosome(self.D)

        if self.strategy == 1:
            tmp.assign(self.pop[i])
            n = int(randV() * self.D)
            L = 0
            while True:
                tmp.v[n] = self.lastgenbest.v[n] + self.F*(self.pop[self.r2].v[n] - self.pop[self.r3].v[n])
                n = (n + 1) % self.D
                L += 1
                if not ((randV() &lt; self.CR) and (L &lt; self.D)):
                    break

        elif self.strategy == 2:
            tmp.assign(self.pop[i])
            n = int(randV() * self.D)
            L = 0
            while True:
                tmp.v[n] = self.pop[self.r1].v[n] + self.F*(self.pop[self.r2].v[n] - self.pop[self.r3].v[n])
                n = (n + 1) % self.D
                L += 1
                if not ((randV() &lt; self.CR) and (L &lt; self.D)):
                    break

        elif (self.strategy == 3):
            tmp.assign(self.pop[i])
            n = int(randV() * self.D)
            L = 0
            while True:
                tmp.v[n] = tmp.v[n] + self.F*(self.lastgenbest.v[n] - tmp.v[n]) + self.F*(self.pop[self.r1].v[n] - self.pop[self.r2].v[n])
                n = (n + 1) % self.D
                L += 1
                if not ((randV() &lt; self.CR) and (L &lt; self.D)):
                    break

        elif (self.strategy == 4):
            tmp.assign(self.pop[i])
            n = int(randV() * self.D)
            L = 0
            while True:
                tmp.v[n] = self.lastgenbest.v[n] + (self.pop[self.r1].v[n] + self.pop[self.r2].v[n] - self.pop[self.r3].v[n] - self.pop[self.r4].v[n]) * self.F
                n = (n + 1) % self.D
                L += 1
                if not ((randV() &lt; self.CR) and (L &lt; self.D)):
                    break

        elif (self.strategy == 5):
            tmp.assign(self.pop[i])
            n = int(randV() * self.D)
            L = 0
            while True:
                tmp.v[n] = self.pop[self.r5].v[n] + (self.pop[self.r1].v[n] + self.pop[self.r2].v[n] - self.pop[self.r3].v[n] - self.pop[self.r4].v[n]) * self.F
                n = (n + 1) % self.D
                L += 1
                if not ((randV() &lt; self.CR) and (L &lt; self.D)):
                    break

        elif (self.strategy == 6):
            tmp.assign(self.pop[i])
            n = int(randV() * self.D)
            for L in range(self.D):
                if ((randV() &lt; self.CR) or L == (self.D - 1)):
                    tmp.v[n] = self.lastgenbest.v[n] + self.F*(self.pop[self.r2].v[n] - self.pop[self.r3].v[n])
                n = (n + 1) % self.D

        elif (self.strategy == 7):
            tmp.assign(self.pop[i])
            n = int(randV() * self.D)
            for L in range(self.D):
                if ((randV() &lt; self.CR) or L == (self.D - 1)):
                    tmp.v[n] = self.pop[self.r1].v[n] + self.F*(self.pop[self.r2].v[n] - self.pop[self.r3].v[n])
                n = (n + 1) % self.D

        elif (self.strategy == 8):
            tmp.assign(self.pop[i])
            n = int(randV() * self.D)
            for L in range(self.D):
                if ((randV() &lt; self.CR) or L == (self.D - 1)):
                    tmp.v[n] = tmp.v[n] + self.F*(self.lastgenbest.v[n] - tmp.v[n]) + self.F*(self.pop[self.r1].v[n] - self.pop[self.r2].v[n])
                n = (n + 1) % self.D

        elif (self.strategy == 9):
            tmp.assign(self.pop[i])
            n = int(randV() * self.D)
            for L in range(self.D):
                if ((randV() &lt; self.CR) or L == (self.D - 1)):
                    tmp.v[n] = self.lastgenbest.v[n] + (self.pop[self.r1].v[n] + self.pop[self.r2].v[n] - self.pop[self.r3].v[n] - self.pop[self.r4].v[n]) * self.F
                n = (n + 1) % self.D

        else:
            tmp.assign(self.pop[i])
            n = int(randV() * self.D)
            for L in range(self.D):
                if ((randV() &lt; self.CR) or L == (self.D - 1)):
                    tmp.v[n] = self.pop[self.r5].v[n] + (self.pop[self.r1].v[n] + self.pop[self.r2].v[n] - self.pop[self.r3].v[n] - self.pop[self.r4].v[n]) * self.F
                n = (n + 1) % self.D
        return tmp

    cdef void report(self):
        """
        report current generation status
        """
        cdef int i
        cdef double v

        if self.gen == 0:
            print("DiffertialEvolution results - init pop")
        elif self.gen == self.maxGen:
            print("Final DiffertialEvolution results at %d generations"%(self.gen,))
        else:
            print("DiffertialEvolution results after %d generations"%(self.gen,))
        print("Function : %.6f" % (self.currentbest.f))
        for i, v in enumerate(self.currentbest.v.flat, start=1):
            print("Var %d : %.4f"%(i, v))

    cdef bool overbound(self, Chromosome member):
        """
        check the member's chromosome that is out of bound?
        """
        cdef int i

        for i in range(self.D):
            if member.v[i] &gt; self.ub[i] or member.v[i] &lt; self.lb[i]:
                return True
        return False

    cdef void run(self):
        """
        run the algorithm...
        """
        cdef Chromosome tmp
        cdef int i

        # initial step
        # generation 0
        self.gen = 0
        # init the member's chromsome
        self.init()
        # find the best one(smallest fitness value)
        tmp = self.findBest()
        # copy to lastgenbest
        self.lastgenbest.assign(tmp)
        # copy to currentbest
        self.currentbest.assign(tmp)
        # report status
        self.report()
        # end initial step

        # the evolution journey is beggin...
        for self.gen in range(1, self.maxGen + 1):
            for i in range(self.NP):
                # generate new vector
                self.generateRandomVector(i)
                # use the vector recombine the member to temporary
                tmp = self.recombination(i)
                # check the one is out of bound?
                if self.overbound(tmp):
                    # if it is, then abandon it
                    continue
                # is not out of bound, that mean it's quilify of enviorment
                # then evalute the one
                tmp.f = self.evalute(tmp)
                # if temporary one is better than origin(fitness value is smaller)
                if tmp.f &lt;= self.pop[i].f:
                    # copy the temporary one to origin member
                    self.pop[i].assign(tmp)
                    # check the temporary one is better than the currentbest
                    if tmp.f &lt; self.currentbest.f:
                        # copy the temporary one to currentbest
                        self.currentbest.assign(tmp)
            # copy the currentbest to lastgenbest
            self.lastgenbest.assign(self.currentbest)
            # if report generation is set, report
            if self.rpt != 0:
                if self.gen % self.rpt == 0:
                    self.report()
        # the evolution journey is done, report the final status
        self.report()</pre>
<p><span>使用 Real-coded Genetic algorithm 解題:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import time
import math


class Chromosome(object):

    def __init__(self, n=None):
        self.np = n if n &gt; 0 else 2
        self.f = 0.0
        self.v = [0.0] * n

    def cp(self, obj):
        """
        copy all atribute from another chromsome object
        """
        self.np = obj.np
        self.f = obj.f
        self.v = obj.v[:]

    def get_v(self, i):
        return self.v[i]

    def is_self(self, obj):
        """
        check the object is self?
        """
        return obj is self

    def assign(self, obj):
        if not self.is_self(obj):
            self.cp(obj)


class Genetic(object):

    def __init__(self, func, pType, nParm, nPop, pCross, pMute, pWin, bDelta, upper, lower):
        """
        init(function func)
        """
        self.func=func
        self.pType = pType
        self.nParm=nParm
        self.nPop=nPop
        self.pCross=pCross
        self.pMute=pMute
        self.pWin=pWin
        self.bDelta=bDelta

        self.chrom = [Chromosome(nParm) for i in range(nPop)]
        self.newChrom = [Chromosome(nParm) for i in range(nPop)]
        self.babyChrom = [Chromosome(nParm) for i in range(3)]
        self.chromElite = [Chromosome(nParm)]
        self.chromBest = [Chromosome(nParm)]
        self.maxLimit = upper[:]
        self.minLimit = lower[:]

        self.maxGen = None
        self.gen = None

        self.seed = 0.0
        self.iseed = 470211272.0
        self.mask = 2147483647

    def check(self, i, v):
        """
        If a variable is out of bound,
        replace it with a random value
        """
        if (v &gt; self.maxLimit[i]) or (v &lt; self.minLimit[i]):
            return self.randVal(self.minLimit[i], self.maxLimit[i])
        return v

    def crossOver(self):
        for i in range(0, self.nPop-1, 2):
            # crossover
            if(self.rnd() &lt; self.pCross):
                for s in range(self.nParm):
                    # first baby, half father half mother
                    self.babyChrom[0].v[s] = 0.5 * self.chrom[i].v[s] + 0.5*self.chrom[i+1].v[s];
                    # second baby, three quaters of fater and quater of mother
                    self.babyChrom[1].v[s] = self.check(s, 1.5 * self.chrom[i].v[s] - 0.5*self.chrom[i+1].v[s])
                    # third baby, quater of fater and three quaters of mother
                    self.babyChrom[2].v[s] = self.check(s,-0.5 * self.chrom[i].v[s] + 1.5*self.chrom[i+1].v[s]);

                for j in range(3):
                    self.babyChrom[j].f = self.func(self.babyChrom[j].v)
                # maximization
                if self.pType == 1:
                    
                    if self.babyChrom[1].f &gt; self.babyChrom[0].f:
                        self.babyChrom[0], self.babyChrom[1] = self.babyChrom[1], self.babyChrom[0]

                    if self.babyChrom[2].f &gt; self.babyChrom[0].f:
                        self.babyChrom[2], self.babyChrom[0] = self.babyChrom[0], self.babyChrom[2]

                    if self.babyChrom[2].f &gt; self.babyChrom[1].f:
                        self.babyChrom[2], self.babyChrom[1] = self.babyChrom[1], self.babyChrom[2]

                else:
                    
                    if self.babyChrom[1].f &lt; self.babyChrom[0].f:
                        self.babyChrom[0], self.babyChrom[1] = self.babyChrom[1], self.babyChrom[0]

                    if self.babyChrom[2].f &lt; self.babyChrom[0].f:
                        self.babyChrom[2], self.babyChrom[0] = self.babyChrom[0], self.babyChrom[2]

                    if self.babyChrom[2].f &lt; self.babyChrom[1].f:
                        self.babyChrom[2], self.babyChrom[1] = self.babyChrom[1], self.babyChrom[2]

                # replace first two baby to parent, another one will be
                self.chrom[i].assign(self.babyChrom[0])
                self.chrom[i+1].assign(self.babyChrom[1])

    def delta(self, y):
        r = float(self.gen) / self.maxGen;
        return y*self.rnd()*math.pow(1.0-r, self.bDelta)

    def fitness(self):
        for j in range(self.nPop):
            self.chrom[j].f = self.func(self.chrom[j].v)

        self.chromBest[0].assign(self.chrom[0])

        for j in range(self.nPop):
            if self.pType == 1:
                if(self.chrom[j].f &gt; self.chromBest[0].f):
                    self.chromBest[0].assign(self.chrom[j])
            else:
                if(self.chrom[j].f &lt; self.chromBest[0].f):
                    self.chromBest[0].assign(self.chrom[j])
        if self.pType == 1:
            if(self.chromBest[0].f &gt; self.chromElite[0].f):
                self.chromElite[0].assign(self.chromBest[0])
        else:
            if(self.chromBest[0].f &lt; self.chromElite[0].f):
                self.chromElite[0].assign(self.chromBest[0])

    def initialPop(self):
        for j in range(self.nPop):
            for i in range(self.nParm):
                self.chrom[j].v[i] = self.randVal(self.minLimit[i], self.maxLimit[i])

    def mutate(self):
        for i in range(self.nPop):
            if self.rnd() &lt; self.pMute:
                s = self.random(self.nParm)
                if (self.random(2) == 0):
                    self.chrom[i].v[s] += self.delta(self.maxLimit[s]-self.chrom[i].v[s])
                else:
                    self.chrom[i].v[s] -= self.delta(self.chrom[i].v[s]-self.minLimit[s])

    def report(self):
        if self.gen == 0:
            print("Genetik results - Initial population")
        elif self.gen == self.maxGen:
            print("Final Genetik results at", self.gen, "generations")
        else:
            print("Genetik results after", self.gen, "generations")

        print("Function : %.6f" % (self.chromElite[0].f))
        for i, p in enumerate(self.chromElite[0].v):
            print("Var", i+1, ":", p)

    def select(self):
        """
        roulette wheel selection
        """
        for i in range(self.nPop):
            j = self.random(self.nPop)
            k = self.random(self.nPop)
            self.newChrom[i].assign(self.chrom[j])
            if self.pType == 1:
                if(self.chrom[k].f &gt; self.chrom[j].f) and (self.rnd() &gt; self.pWin):
                    self.newChrom[i].assign(self.chrom[k])
            else:
                if(self.chrom[k].f &lt; self.chrom[j].f) and (self.rnd() &lt; self.pWin):
                    self.newChrom[i].assign(self.chrom[k])
        # in this stage, newChrom is select finish
        # now replace origin chrom
        for i in range(self.nPop):
            self.chrom[i].assign(self.newChrom[i])

        # select random one chrom to be best chrom, make best chrom still exist
        j = self.random(self.nPop);
        self.chrom[j].assign(self.chromElite[0])

    def run(self, mxg, rp):
        """
        // **** Init and run GA for maxGen times
        // **** mxg : maximum generation
        // **** rp  : report cycle, 0 for final report or
        // ****       report each mxg modulo rp
        """
        self.maxGen = mxg
        self.rpt = rp

        self.randomize()
        self.initialPop()
        self.chrom[0].f = self.func(self.chrom[0].v)
        self.chromElite[0].assign(self.chrom[0])

        self.gen = 0
        self.fitness()
        self.report()

        for self.gen in range(1, self.maxGen + 1):
            self.select()
            self.crossOver()
            self.mutate()
            self.fitness()
            if rp != 0:
                if self.gen % self.rpt == 0:
                    self.report()
        self.report()

    def newSeed(self):
        if(self.seed == 0.0):
            self.seed=self.iseed
        else:
            self.seed *= 16807.0
            self.seed = math.fmod(self.seed, self.mask)

    def rnd(self):
        self.newSeed()
        return self.seed/self.mask

    def randomize(self):
        self.seed = time.time()

    def random(self, k):
        return int(self.rnd()*k)

    def randVal(self, low, high):
        number_types = (int, float)
        if isinstance(low, number_types) and isinstance(high, number_types):
            return self.rnd()*(high-low)+low
        raise ValueError
        
#fittness function (cost function)
def evaluate(designVariablel):
    surface = 80.0
    # if pType is 1, the penality is negative (maximization problem)
    # if pType is 0, the penality is positive (minimization problem)
    penality = -1000

    z = (surface-designVariablel[0]*designVariablel[1])/(2.0*(designVariablel[0]\
         +designVariablel[1]))
    volume = designVariablel[0]*designVariablel[1]*z
  
    if(volume &lt;= 0):
        return penality

    # box length and width need to be larger than 0
    if(designVariablel[0] &lt;= 0):
        return penality

    if(designVariablel[1] &lt;= 0):
        return penality
    #return 1+1/(volume*volume)
    return volume

#volume = Genetic(self, func, pType, nParm, nPop, pCross, pMute, pWin, bDelta, upper, lower):
volume = Genetic(evaluate, 1, 2, 1000, 0.95, 0.05, 0.95, 5, [0, 0], [50, 50])
volume.run(1000, 50)
</pre>
<h4>參考資料</h4>
<p>Genetic Algorithm Essentials</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-52156-5">https://link.springer.com/book/10.1007/978-3-319-52156-5</a> </p>
<p>Differential Evolution in Electromagnetics</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-642-12869-1">https://link.springer.com/book/10.1007/978-3-642-12869-1</a> </p>
<h2>Qt C++ 計算器程式</h2>
<p><a href="/downloads/qt5_calculator_proj.7z">Ｑt5 Calculator project.7z</a></p>
<p><img alt="" height="455" src="/images/Qt5_creator_calculator_proj.png" width="600"/></p>
<p>calculator.pro</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#-------------------------------------------------
#
# Project created by QtCreator 2018-07-07T23:49:39
#
#-------------------------------------------------
greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

TARGET = calculator
TEMPLATE = app

# The following define makes your compiler emit warnings if you use
# any feature of Qt which has been marked as deprecated (the exact warnings
# depend on your compiler). Please consult the documentation of the
# deprecated API in order to know how to port your code away from it.
DEFINES += QT_DEPRECATED_WARNINGS

# You can also make your code fail to compile if you use deprecated APIs.
# In order to do so, uncomment the following line.
# You can also select to disable deprecated APIs only up to a certain version of Qt.
#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0


SOURCES += \
        main.cpp \
    button.cpp \
    calculator.cpp

HEADERS += \
    button.h \
    calculator.h</pre>
<p>main.cpp</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include "calculator.h"
#include &lt;QApplication&gt;

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    Calculator w;
    w.show();

    return a.exec();
}</pre>
<p>button.h</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#ifndef BUTTON_H
#define BUTTON_H

#include &lt;QToolButton&gt;

class Button : public QToolButton
{
    Q_OBJECT

public:
    explicit Button(const QString &amp;text, QWidget *parent = 0);

    QSize sizeHint() const override;
};

#endif</pre>
<p>calculator.h</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#ifndef CALCULATOR_H
#define CALCULATOR_H

#include &lt;QWidget&gt;

class QLineEdit;

class Button;

class Calculator : public QWidget
{
    Q_OBJECT

public:
    Calculator(QWidget *parent = 0);

private slots:
    void digitClicked();
    void unaryOperatorClicked();
    void additiveOperatorClicked();
    void multiplicativeOperatorClicked();
    void equalClicked();
    void pointClicked();
    void changeSignClicked();
    void backspaceClicked();
    void clear();
    void clearAll();
    void clearMemory();
    void readMemory();
    void setMemory();
    void addToMemory();

private:
    Button *createButton(const QString &amp;text, const char *member);
    void abortOperation();
    bool calculate(double rightOperand, const QString &amp;pendingOperator);

    double sumInMemory;
    double sumSoFar;
    double factorSoFar;
    QString pendingAdditiveOperator;
    QString pendingMultiplicativeOperator;
    bool waitingForOperand;

    QLineEdit *display;

    enum { NumDigitButtons = 10 };
    Button *digitButtons[NumDigitButtons];
};

#endif</pre>
<p>button.cpp</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;QtWidgets&gt;

#include "button.h"

Button::Button(const QString &amp;text, QWidget *parent)
    : QToolButton(parent)
{
    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);
    setText(text);
}

QSize Button::sizeHint() const
{
    QSize size = QToolButton::sizeHint();
    size.rheight() += 20;
    size.rwidth() = qMax(size.width(), size.height());
    return size;
}</pre>
<p>calculator.cpp</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;QtWidgets&gt;

#include &lt;cmath&gt;

#include "button.h"
#include "calculator.h"

Calculator::Calculator(QWidget *parent)
    : QWidget(parent)
{
    sumInMemory = 0.0;
    sumSoFar = 0.0;
    factorSoFar = 0.0;
    waitingForOperand = true;

    display = new QLineEdit("0");
    display-&gt;setReadOnly(true);
    display-&gt;setAlignment(Qt::AlignRight);
    display-&gt;setMaxLength(15);

    QFont font = display-&gt;font();
    font.setPointSize(font.pointSize() + 8);
    display-&gt;setFont(font);

    for (int i = 0; i &lt; NumDigitButtons; ++i) {
        digitButtons[i] = createButton(QString::number(i), SLOT(digitClicked()));
    }

    Button *pointButton = createButton(tr("."), SLOT(pointClicked()));
    Button *changeSignButton = createButton(tr("\302\261"), SLOT(changeSignClicked()));

    Button *backspaceButton = createButton(tr("Backspace"), SLOT(backspaceClicked()));
    Button *clearButton = createButton(tr("Clear"), SLOT(clear()));
    Button *clearAllButton = createButton(tr("Clear All"), SLOT(clearAll()));

    Button *clearMemoryButton = createButton(tr("MC"), SLOT(clearMemory()));
    Button *readMemoryButton = createButton(tr("MR"), SLOT(readMemory()));
    Button *setMemoryButton = createButton(tr("MS"), SLOT(setMemory()));
    Button *addToMemoryButton = createButton(tr("M+"), SLOT(addToMemory()));

    Button *divisionButton = createButton(tr("\303\267"), SLOT(multiplicativeOperatorClicked()));
    Button *timesButton = createButton(tr("\303\227"), SLOT(multiplicativeOperatorClicked()));
    Button *minusButton = createButton(tr("-"), SLOT(additiveOperatorClicked()));
    Button *plusButton = createButton(tr("+"), SLOT(additiveOperatorClicked()));

    Button *squareRootButton = createButton(tr("Sqrt"), SLOT(unaryOperatorClicked()));
    Button *powerButton = createButton(tr("x\302\262"), SLOT(unaryOperatorClicked()));
    Button *reciprocalButton = createButton(tr("1/x"), SLOT(unaryOperatorClicked()));
    Button *equalButton = createButton(tr("="), SLOT(equalClicked()));

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&gt;setSizeConstraint(QLayout::SetFixedSize);
    mainLayout-&gt;addWidget(display, 0, 0, 1, 6);
    mainLayout-&gt;addWidget(backspaceButton, 1, 0, 1, 2);
    mainLayout-&gt;addWidget(clearButton, 1, 2, 1, 2);
    mainLayout-&gt;addWidget(clearAllButton, 1, 4, 1, 2);

    mainLayout-&gt;addWidget(clearMemoryButton, 2, 0);
    mainLayout-&gt;addWidget(readMemoryButton, 3, 0);
    mainLayout-&gt;addWidget(setMemoryButton, 4, 0);
    mainLayout-&gt;addWidget(addToMemoryButton, 5, 0);

    for (int i = 1; i &lt; NumDigitButtons; ++i) {
        int row = ((9 - i) / 3) + 2;
        int column = ((i - 1) % 3) + 1;
        mainLayout-&gt;addWidget(digitButtons[i], row, column);
    }

    mainLayout-&gt;addWidget(digitButtons[0], 5, 1);
    mainLayout-&gt;addWidget(pointButton, 5, 2);
    mainLayout-&gt;addWidget(changeSignButton, 5, 3);

    mainLayout-&gt;addWidget(divisionButton, 2, 4);
    mainLayout-&gt;addWidget(timesButton, 3, 4);
    mainLayout-&gt;addWidget(minusButton, 4, 4);
    mainLayout-&gt;addWidget(plusButton, 5, 4);

    mainLayout-&gt;addWidget(squareRootButton, 2, 5);
    mainLayout-&gt;addWidget(powerButton, 3, 5);
    mainLayout-&gt;addWidget(reciprocalButton, 4, 5);
    mainLayout-&gt;addWidget(equalButton, 5, 5);
    setLayout(mainLayout);

    setWindowTitle(tr("Calculator"));
}

void Calculator::digitClicked()
{
    Button *clickedButton = qobject_cast&lt;Button *&gt;(sender());
    int digitValue = clickedButton-&gt;text().toInt();
    if (display-&gt;text() == "0" &amp;&amp; digitValue == 0.0)
        return;

    if (waitingForOperand) {
        display-&gt;clear();
        waitingForOperand = false;
    }
    display-&gt;setText(display-&gt;text() + QString::number(digitValue));
}

void Calculator::unaryOperatorClicked()
{
    Button *clickedButton = qobject_cast&lt;Button *&gt;(sender());
    QString clickedOperator = clickedButton-&gt;text();
    double operand = display-&gt;text().toDouble();
    double result = 0.0;

    if (clickedOperator == tr("Sqrt")) {
        if (operand &lt; 0.0) {
            abortOperation();
            return;
        }
        result = std::sqrt(operand);
    } else if (clickedOperator == tr("x\302\262")) {
        result = std::pow(operand, 2.0);
    } else if (clickedOperator == tr("1/x")) {
        if (operand == 0.0) {
            abortOperation();
            return;
        }
        result = 1.0 / operand;
    }
    display-&gt;setText(QString::number(result));
    waitingForOperand = true;
}

void Calculator::additiveOperatorClicked()
{
    Button *clickedButton = qobject_cast&lt;Button *&gt;(sender());
    QString clickedOperator = clickedButton-&gt;text();
    double operand = display-&gt;text().toDouble();

    if (!pendingMultiplicativeOperator.isEmpty()) {
        if (!calculate(operand, pendingMultiplicativeOperator)) {
            abortOperation();
            return;
        }
        display-&gt;setText(QString::number(factorSoFar));
        operand = factorSoFar;
        factorSoFar = 0.0;
        pendingMultiplicativeOperator.clear();
    }

    if (!pendingAdditiveOperator.isEmpty()) {
        if (!calculate(operand, pendingAdditiveOperator)) {
            abortOperation();
            return;
        }
        display-&gt;setText(QString::number(sumSoFar));
    } else {
        sumSoFar = operand;
    }

    pendingAdditiveOperator = clickedOperator;
    waitingForOperand = true;
}

void Calculator::multiplicativeOperatorClicked()
{
    Button *clickedButton = qobject_cast&lt;Button *&gt;(sender());
    QString clickedOperator = clickedButton-&gt;text();
    double operand = display-&gt;text().toDouble();

    if (!pendingMultiplicativeOperator.isEmpty()) {
        if (!calculate(operand, pendingMultiplicativeOperator)) {
            abortOperation();
            return;
        }
        display-&gt;setText(QString::number(factorSoFar));
    } else {
        factorSoFar = operand;
    }

    pendingMultiplicativeOperator = clickedOperator;
    waitingForOperand = true;
}

void Calculator::equalClicked()
{
    double operand = display-&gt;text().toDouble();

    if (!pendingMultiplicativeOperator.isEmpty()) {
        if (!calculate(operand, pendingMultiplicativeOperator)) {
            abortOperation();
            return;
        }
        operand = factorSoFar;
        factorSoFar = 0.0;
        pendingMultiplicativeOperator.clear();
    }
    if (!pendingAdditiveOperator.isEmpty()) {
        if (!calculate(operand, pendingAdditiveOperator)) {
            abortOperation();
            return;
        }
        pendingAdditiveOperator.clear();
    } else {
        sumSoFar = operand;
    }

    display-&gt;setText(QString::number(sumSoFar));
    sumSoFar = 0.0;
    waitingForOperand = true;
}

void Calculator::pointClicked()
{
    if (waitingForOperand)
        display-&gt;setText("0");
    if (!display-&gt;text().contains('.'))
        display-&gt;setText(display-&gt;text() + tr("."));
    waitingForOperand = false;
}

void Calculator::changeSignClicked()
{
    QString text = display-&gt;text();
    double value = text.toDouble();

    if (value &gt; 0.0) {
        text.prepend(tr("-"));
    } else if (value &lt; 0.0) {
        text.remove(0, 1);
    }
    display-&gt;setText(text);
}

void Calculator::backspaceClicked()
{
    if (waitingForOperand)
        return;

    QString text = display-&gt;text();
    text.chop(1);
    if (text.isEmpty()) {
        text = "0";
        waitingForOperand = true;
    }
    display-&gt;setText(text);
}

void Calculator::clear()
{
    if (waitingForOperand)
        return;

    display-&gt;setText("0");
    waitingForOperand = true;
}

void Calculator::clearAll()
{
    sumSoFar = 0.0;
    factorSoFar = 0.0;
    pendingAdditiveOperator.clear();
    pendingMultiplicativeOperator.clear();
    display-&gt;setText("0");
    waitingForOperand = true;
}

void Calculator::clearMemory()
{
    sumInMemory = 0.0;
}

void Calculator::readMemory()
{
    display-&gt;setText(QString::number(sumInMemory));
    waitingForOperand = true;
}

void Calculator::setMemory()
{
    equalClicked();
    sumInMemory = display-&gt;text().toDouble();
}

void Calculator::addToMemory()
{
    equalClicked();
    sumInMemory += display-&gt;text().toDouble();
}
Button *Calculator::createButton(const QString &amp;text, const char *member)
{
    Button *button = new Button(text);
    connect(button, SIGNAL(clicked()), this, member);
    return button;
}

void Calculator::abortOperation()
{
    clearAll();
    display-&gt;setText(tr("####"));
}

bool Calculator::calculate(double rightOperand, const QString &amp;pendingOperator)
{
    if (pendingOperator == tr("+")) {
        sumSoFar += rightOperand;
    } else if (pendingOperator == tr("-")) {
        sumSoFar -= rightOperand;
    } else if (pendingOperator == tr("\303\227")) {
        factorSoFar *= rightOperand;
    } else if (pendingOperator == tr("\303\267")) {
        if (rightOperand == 0.0)
            return false;
        factorSoFar /= rightOperand;
    }
    return true;
}</pre>
<h3>Qt5 Tutorial</h3>
<p><a href="http://www.bogotobogo.com/Qt/Qt5_Creating_QtQuick2_QML_Application_Animation_A.php">http://www.bogotobogo.com/Qt/Qt5_Creating_QtQuick2_QML_Application_Animation_A.php</a> </p>
<p>Qt5 編程指南: <a href="https://qtguide.ustclug.org/">https://qtguide.ustclug.org/</a></p>
<p>Qt5 PDF viewer: <a href="https://github.com/yshurik/qpdfjs">https://github.com/yshurik/qpdfjs</a></p>
<p>Qt5 瀏覽器: <a href="https://otter-browser.org/">https://otter-browser.org/</a> </p>
<h2>PyQt 計算器程式</h2>
<p>PyQt Version History</p>
<p>1994, Qt</p>
<p>November 1998 SIP, and released PyQt 0.1 supporting Qt 1.41</p>
<p>2000, PyQt 2.0 supported Qt 2.2 on both Linux and Windows</p>
<p>2001, Qt 3 support</p>
<p>2002, Mac OS X support</p>
<p>June 2006, PyQt 4.0 with support for Qt 4</p>
<p>2008, Trolltech acquired by Nokia</p>
<p>August 2009, Nokia released PySide</p>
<p>Sep 2009, PyQt 4.6</p>
<p>Jan 2010, PyQt 4.7</p>
<p>Nov 2010, PyQt 4.8.1</p>
<p>2011, Qt Commercial business acquired by Digia</p>
<p>2012, Qt business acquired by Digia from Nokia</p>
<p>Oct 2013, PyQt 5.1</p>
<p>July 2015, PyQt 5.5</p>
<p>Dec 2016, PyQt 5.7.1</p>
<p>March 30, 2017, PyQt 5.8.2</p>
<p><a href="/downloads/cpw10.7z">cpw10_calculator.7z</a></p>
<p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer">一甲第十週第三部分</yt-formatted-string></p>
<p><iframe allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/CK96oD_N73M" width="560"></iframe></p>
<p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer">一乙第十週第二部分</yt-formatted-string></p>
<p><iframe allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Da3Semv29xY" width="560"></iframe></p>
<p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer">一甲第十二週第一部分</yt-formatted-string></p>
<p><iframe allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/MVza-xSJNAM" width="560"></iframe></p>
<p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer">一甲第十二週第二部分</yt-formatted-string></p>
<p><iframe allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/6khFEGRDQ7E" width="560"></iframe></p>
<p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer">一乙第十二週第二部分</yt-formatted-string></p>
<p><iframe allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/jdzFJs-dSJg" width="560"></iframe></p>
<p>參考資料:</p>
<p><a href="https://www.e-education.psu.edu/geog489/l2.html">https://www.e-education.psu.edu/geog489/l2.html</a> </p>
<h3>PyQt5 實際操作</h3>
<p><a href="/downloads/Algorithmic_Problem_Solving_with_Python.pdf">Algorithmic Problem Solving with Python.pdf</a></p>
<p><a href="https://pythonprogramming.net/basic-gui-pyqt-tutorial/">https://pythonprogramming.net/basic-gui-pyqt-tutorial/</a>  (for PyQt4)</p>
<p><a href="https://github.com/kenwaldek/pythonprogramming">https://github.com/kenwaldek/pythonprogramming</a>  (PyQt5 examples)</p>
<p><a href="https://blog.csdn.net/c3060911030/article/category/6247011/1">https://blog.csdn.net/c3060911030/article/category/6247011/1</a> (PyQt5 教程)</p>
<p><a href="/downloads/pyqt5tutorial_201603.pdf">pyqt5tutorial_201603.pdf</a> (PyQt5 Tutorial Documentation)</p>
<p><a href="https://pythonspot.com/pyqt5/">https://pythonspot.com/pyqt5/</a>  (Collection of PyQt5 articles)</p>
<p><a href="/downloads/pyqt5_intro1.pdf">pyqt5_intro1.pdf</a> (<a href="/downloads/pyqt5_intro1_french.pdf">法文原稿</a>)</p>
<p><a href="/downloads/pyqt5_intro2.pdf">pyqt5_intro2.pdf</a> (<a href="/downloads/pyqt5_intro2_french.pdf">法文原稿</a>)</p>
<p><a href="http://pyqt.sourceforge.net/Docs/PyQt5/class_reference.html">PyQt5 class reference</a></p>
<p>以 QWidget 建立視窗:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sys
from PyQt5.QtWidgets import QApplication, QWidget

# 利用 QApplication 類別建立案例
app = QApplication(sys.argv)

# 無 parent 的部件為視窗
window = QWidget()
# 設定視窗屬性
window.setGeometry(50, 50, 500, 300)
window.setWindowTitle('第一個 PyQt5 程式')

# 顯示視窗
window.show()
# 執行應用程式, 若按右上方 close 按鈕可以 exit
sys.exit(app.exec())</pre>
<p>改寫為自建視窗類別物件:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sys
from PyQt5.QtWidgets import QApplication, QWidget

class window(QWidget):

    def __init__(self):
        # 啟始時先執行父物件 (即 QWidget) 的建構子
        super().__init__()
        self.setGeometry(50, 50, 500, 300)
        self.setWindowTitle('第一個 PyQt5 程式')
        # 案例建立時直接顯示, 也可以建立案例後再顯示
        self.show()

app = QApplication(sys.argv)
Gui = window()
sys.exit(app.exec())</pre>
<p>以 QMainWindow  類別建立視窗:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sys
from PyQt5.QtCore import QCoreApplication
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QPushButton


class window(QMainWindow):

    def __init__(self):
        super().__init__()
        self.setGeometry(50, 50, 500, 300)
        self.setWindowTitle('第一個 PyQt5 程式')
        self.addExitButton()

    def addExitButton(self):
        btn = QPushButton('退出', self)
        btn.clicked.connect(QCoreApplication.instance().quit)
        btn.resize(100, 100)
        btn.move(100, 100)
        # 顯示 window
        self.show()

def run():
    app = QApplication(sys.argv)
    Gui = window()
    sys.exit(app.exec())

run()</pre>
<p>視窗關閉時列印訊息:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sys
from PyQt5.QtCore import QCoreApplication
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QPushButton


class window(QMainWindow):

    def __init__(self):
        super().__init__()
        self.setGeometry(50, 50, 500, 300)
        self.setWindowTitle('第一個 PyQt5 程式')
        self.addQuitButton()

    def addQuitButton(self):
        btn = QPushButton('退出', self)
        btn.clicked.connect(self.close_application)

        btn.resize(btn.sizeHint())  #set to acceptable size automatic
        btn.move(0, 0)
        self.show()

    def close_application(self):
        print('關閉應用程式')
        sys.exit()

def run():
    app = QApplication(sys.argv)
    Gui = window()
    sys.exit(app.exec())

run()</pre>
<p><a href="http://zetcode.com/gui/pyqt5/">http://zetcode.com/gui/pyqt5/</a> </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/python3

import sys
from PyQt5.QtCore import QDateTime, Qt
# stage 1
#from PyQt5.QtWidgets import QApplication, QWidget
# stage 2
#from PyQt5.QtWidgets import QMainWindow, QAction, qApp, QApplication
# stage 3
from PyQt5.QtWidgets import QMainWindow, QAction, qApp, QApplication, QMenu
from PyQt5.QtGui import QIcon

now = QDateTime.currentDateTime()

print("Today:", now.toString(Qt.ISODate))
print("Adding 12 days: {0}".format(now.addDays(12).toString(Qt.ISODate)))
print("Subtracting 22 days: {0}".format(now.addDays(-22).toString(Qt.ISODate)))

print("Adding 50 seconds: {0}".format(now.addSecs(50).toString(Qt.ISODate)))
print("Adding 3 months: {0}".format(now.addMonths(3).toString(Qt.ISODate)))
print("Adding 12 years: {0}".format(now.addYears(12).toString(Qt.ISODate)))

class Example(QMainWindow):
    
    def __init__(self):
        super().__init__()
        self.initUI()
        
        
    def initUI(self):               
        '''
        # stage 1
        self.statusBar().showMessage('Ready')
        
        self.setGeometry(300, 300, 250, 150)
        self.setWindowTitle('Statusbar')    
        self.show()
        '''
        
        '''
        # stage 2
        exitAct = QAction(QIcon('exit.png'), '&amp;Exit', self)        
        exitAct.setShortcut('Ctrl+Q')
        exitAct.setStatusTip('Exit application')
        exitAct.triggered.connect(qApp.quit)

        self.statusBar()

        menubar = self.menuBar()
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(exitAct)
        
        self.setGeometry(300, 300, 300, 200)
        self.setWindowTitle('Simple menu')    
        self.show()
        '''
        
        menubar = self.menuBar()
        fileMenu = menubar.addMenu('File')
        
        impMenu = QMenu('Import', self)
        impAct = QAction('Import mail', self) 
        impMenu.addAction(impAct)
        
        # 加入 QAction
        newAct = QAction('New', self)        
        fileMenu.addAction(newAct)
        
        newAct1 = QAction('New1', self)        
        fileMenu.addAction(newAct1)
        
        # 加入 QMenu
        fileMenu.addMenu(impMenu)
        
        self.setGeometry(300, 300, 300, 200)
        self.setWindowTitle('Submenu')    
        self.show()


if __name__ == '__main__':
    '''
    app = QApplication(sys.argv)

    w = QWidget()
    w.resize(250, 150)
    w.move(300, 300)
    w.setWindowTitle('Simple')
    w.show()
    '''
    app = QApplication(sys.argv)
    ex = Example()
    
    sys.exit(app.exec())<br/><br/><br/>
</pre>
<p>有關  if __name__ == '__main__':</p>
<p><a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">https://stackoverflow.com/questions/419163/what-does-if-name-main-do</a> </p>
<p>當 Python 解譯器讀取原始碼時, 會執行其中的所有程式碼. 而在執行這些程式碼之前, 會定義一些特殊變數的值, 例如: 當該程式碼執行時, 是以主程式的位階直接執行時, Python 就會將 __name__ 這個變數設為 __main__.</p>
<p>假如這個程式碼檔案並非以主程式的位階直接執行, 而是被導入其他程式中, 以模組的位階執行,  __name__ 變數就會被設為該模組的名稱.</p>
<h2>Flask 網際程式</h2>
<p>Flask Hello World 程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入 Flask 類別
from flask import Flask
'''
If you are using a single module (as in this
example), you should use __name__ because depending on if it’s started as application
or imported as module the name will be different ('__main__' versus
the actual import name). This is needed so that Flask knows where to look for
templates, static files, and so on. For more information have a look at the Flask
documentation.
'''
# 利用 Flask 類別建立 app 案例
app = Flask(__name__)

'''
The route decorator is used to register a view function for a given URL rule.
This does the same thing as add_url_rule() but is intended for decorator.
'''
# 利用 decorator 設定 URL 連結
@app.route('/')
def hello_world():
    # 傳回字串
    return 'Hello, World!'

# app 在本機埠號 5000 執行, 且開啟 debug 模式
app.run(host='127.0.0.1', port=5000, debug=True)</pre>
<p>有關 decorator: </p>
<p><a href="https://realpython.com/primer-on-python-decorators/">https://realpython.com/primer-on-python-decorators/</a> </p>
<p>根據 <a href="https://blog.techbridge.cc/2018/06/15/python-decorator-introduction/">https://blog.techbridge.cc/2018/06/15/python-decorator-introduction/</a> 說明:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@my_decorator
def my_func(stuff):
    do_things()</pre>
<p>等同</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def my_func(stuff):
    do_things()
my_func = my_decorator(my_func)</pre>
<p>因此可以先編寫:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import abort
# wraps 是一個製作 Decorator 好工具，也可以把參數傳入
from functools import wraps
def check_login():
    # 做一些檢查
def login_required(fun):
    """
    Required user to login
    """
    @wraps(fun)
    # wraps 可協助傳入參數做操作
    def wrapper(*args, **kwds):
        if check_login() is None:
            return abort(403)
        return fun(*args, **kwds)
    return wrapper</pre>
<p>然後再透過 decorator 設計下列程式, 代表有驗證登入者才能看到該頁面:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@payment_blueprint.route('/payment')
@login_required
def get_payment_page():
    return render_template('payment/index.html')</pre>
<p>oauth2 模組:</p>
<p><a href="https://github.com/requests/requests-oauthlib">https://github.com/requests/requests-oauthlib</a>  (<a href="https://requests-oauthlib.readthedocs.io/en/latest/">doc</a>)</p>
<p>or</p>
<p>google-api-python-client</p>
<p>google-auth</p>
<p>google-auth-httplib2</p>
<p>google-auth-oauthlib<br/><br/>使用 requests-oauthlib 模組:</p>
<p>參考: <a href="https://medium.com/@bittu/add-google-oauth2-login-in-your-flask-web-app-9f455695341e">https://medium.com/@bittu/add-google-oauth2-login-in-your-flask-web-app-9f455695341e</a> </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
import json
import datetime

from flask import Flask, url_for, redirect, \
    render_template, session, request
from flask.ext.sqlalchemy import SQLAlchemy
from flask.ext.login import LoginManager, login_required, login_user, \
    logout_user, current_user, UserMixin
from requests_oauthlib import OAuth2Session
from requests.exceptions import HTTPError

basedir = os.path.abspath(os.path.dirname(__file__))

"""App Configuration"""


class Auth:
    """Google Project Credentials"""
    CLIENT_ID = ('688061596571-3c13n0uho6qe34hjqj2apincmqk86ddj'
                 '.apps.googleusercontent.com')
    CLIENT_SECRET = 'JXf7Ic_jfCam1S7lBJalDyPZ'
    REDIRECT_URI = 'https://localhost:5000/gCallback'
    AUTH_URI = 'https://accounts.google.com/o/oauth2/auth'
    TOKEN_URI = 'https://accounts.google.com/o/oauth2/token'
    USER_INFO = 'https://www.googleapis.com/userinfo/v2/me'
    SCOPE = ['profile', 'email']


class Config:
    """Base config"""
    APP_NAME = "Test Google Login"
    SECRET_KEY = os.environ.get("SECRET_KEY") or "somethingsecret"


class DevConfig(Config):
    """Dev config"""
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, "test.db")


class ProdConfig(Config):
    """Production config"""
    DEBUG = False
    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, "prod.db")


config = {
    "dev": DevConfig,
    "prod": ProdConfig,
    "default": DevConfig
}

"""APP creation and configuration"""
app = Flask(__name__)
app.config.from_object(config['dev'])
db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = "login"
login_manager.session_protection = "strong"

""" DB Models """


class User(db.Model, UserMixin):
    __tablename__ = "users"
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(100), unique=True, nullable=False)
    name = db.Column(db.String(100), nullable=True)
    avatar = db.Column(db.String(200))
    tokens = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.datetime.utcnow())


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))
""" OAuth Session creation """


def get_google_auth(state=None, token=None):
    if token:
        return OAuth2Session(Auth.CLIENT_ID, token=token)
    if state:
        return OAuth2Session(
            Auth.CLIENT_ID,
            state=state,
            redirect_uri=Auth.REDIRECT_URI)
    oauth = OAuth2Session(
        Auth.CLIENT_ID,
        redirect_uri=Auth.REDIRECT_URI,
        scope=Auth.SCOPE)
    return oauth


@app.route('/')
@login_required
def index():
    return render_template('index.html')


@app.route('/login')
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    google = get_google_auth()
    auth_url, state = google.authorization_url(
        Auth.AUTH_URI, access_type='offline')
    session['oauth_state'] = state
    return render_template('login.html', auth_url=auth_url)


@app.route('/gCallback')
def callback():
    if current_user is not None and current_user.is_authenticated:
        return redirect(url_for('index'))
    if 'error' in request.args:
        if request.args.get('error') == 'access_denied':
            return 'You denied access.'
        return 'Error encountered.'
    if 'code' not in request.args and 'state' not in request.args:
        return redirect(url_for('login'))
    else:
        google = get_google_auth(state=session['oauth_state'])
        try:
            token = google.fetch_token(
                Auth.TOKEN_URI,
                client_secret=Auth.CLIENT_SECRET,
                authorization_response=request.url)
        except HTTPError:
            return 'HTTPError occurred.'
        google = get_google_auth(token=token)
        resp = google.get(Auth.USER_INFO)
        if resp.status_code == 200:
            user_data = resp.json()
            email = user_data['email']
            user = User.query.filter_by(email=email).first()
            if user is None:
                user = User()
                user.email = email
            user.name = user_data['name']
            print(token)
            user.tokens = json.dumps(token)
            user.avatar = user_data['picture']
            db.session.add(user)
            db.session.commit()
            login_user(user)
            return redirect(url_for('index'))
        return 'Could not fetch your information.'


@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))</pre>
<p>使用 google 相關模組, 擷取 google drive 資料:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># -*- coding: utf-8 -*-

import os
import flask
import requests

import google.oauth2.credentials
import google_auth_oauthlib.flow
import googleapiclient.discovery
import ssl

# 即使在近端仍希望以 https 模式下執行
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
context.load_cert_chain('localhost.crt', 'localhost.key')

# This variable specifies the name of a file that contains the OAuth 2.0
# information for this application, including its client_id and client_secret.
CLIENT_SECRETS_FILE = "client_secret.json"

# This OAuth 2.0 access scope allows for full read/write access to the
# authenticated user's account and requires requests to use an SSL connection.
SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly']
API_SERVICE_NAME = 'drive'
API_VERSION = 'v2'

app = flask.Flask(__name__)
# Note: A secret key is included in the sample so that it works.
# If you use this code in your application, replace this with a truly secret
# key. See http://flask.pocoo.org/docs/0.12/quickstart/#sessions.
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'


@app.route('/')
def index():
  return print_index_table()

@app.route('/test')
def test_api_request():
  if 'credentials' not in flask.session:
    return flask.redirect('authorize')

  # Load credentials from the session.
  credentials = google.oauth2.credentials.Credentials(
      **flask.session['credentials'])

  drive = googleapiclient.discovery.build(
      API_SERVICE_NAME, API_VERSION, credentials=credentials)

  files = drive.files().list().execute()

  # Save credentials back to session in case access token was refreshed.
  # ACTION ITEM: In a production app, you likely want to save these
  #              credentials in a persistent database instead.
  flask.session['credentials'] = credentials_to_dict(credentials)

  return flask.jsonify(**files)


@app.route('/authorize')
def authorize():
  # Create flow instance to manage the OAuth 2.0 Authorization Grant Flow steps.
  flow = google_auth_oauthlib.flow.Flow.from_client_secrets_file(
      CLIENT_SECRETS_FILE, scopes=SCOPES)

  flow.redirect_uri = flask.url_for('callback', _external=True)

  authorization_url, state = flow.authorization_url(
      # Enable offline access so that you can refresh an access token without
      # re-prompting the user for permission. Recommended for web server apps.
      access_type='offline',
      # Enable incremental authorization. Recommended as a best practice.
      include_granted_scopes='true')

  # Store the state so the callback can verify the auth server response.
  flask.session['state'] = state

  return flask.redirect(authorization_url)


@app.route('/callback')
def callback():
  # Specify the state when creating the flow in the callback so that it can
  # verified in the authorization server response.
  state = flask.session['state']

  flow = google_auth_oauthlib.flow.Flow.from_client_secrets_file(
      CLIENT_SECRETS_FILE, scopes=SCOPES, state=state)
  flow.redirect_uri = flask.url_for('callback', _external=True)

  # Use the authorization server's response to fetch the OAuth 2.0 tokens.
  authorization_response = flask.request.url
  flow.fetch_token(authorization_response=authorization_response)

  # Store credentials in the session.
  # ACTION ITEM: In a production app, you likely want to save these
  #              credentials in a persistent database instead.
  credentials = flow.credentials
  flask.session['credentials'] = credentials_to_dict(credentials)

  return flask.redirect(flask.url_for('test_api_request'))


@app.route('/revoke')
def revoke():
  if 'credentials' not in flask.session:
    return ('You need to &lt;a href="/authorize"&gt;authorize&lt;/a&gt; before ' +
            'testing the code to revoke credentials.')

  credentials = google.oauth2.credentials.Credentials(
    **flask.session['credentials'])

  revoke = requests.post('https://accounts.google.com/o/oauth2/revoke',
      params={'token': credentials.token},
      headers = {'content-type': 'application/x-www-form-urlencoded'})

  status_code = getattr(revoke, 'status_code')
  if status_code == 200:
    return('Credentials successfully revoked.' + print_index_table())
  else:
    return('An error occurred.' + print_index_table())


@app.route('/clear')
def clear_credentials():
  if 'credentials' in flask.session:
    del flask.session['credentials']
  return ('Credentials have been cleared.&lt;br&gt;&lt;br&gt;' +
          print_index_table())


def credentials_to_dict(credentials):
  return {'token': credentials.token,
          'refresh_token': credentials.refresh_token,
          'token_uri': credentials.token_uri,
          'client_id': credentials.client_id,
          'client_secret': credentials.client_secret,
          'scopes': credentials.scopes}

def print_index_table():
  return ('&lt;table&gt;' +
          '&lt;tr&gt;&lt;td&gt;&lt;a href="/test"&gt;Test an API request&lt;/a&gt;&lt;/td&gt;' +
          '&lt;td&gt;Submit an API request and see a formatted JSON response. ' +
          '    Go through the authorization flow if there are no stored ' +
          '    credentials for the user.&lt;/td&gt;&lt;/tr&gt;' +
          '&lt;tr&gt;&lt;td&gt;&lt;a href="/authorize"&gt;Test the auth flow directly&lt;/a&gt;&lt;/td&gt;' +
          '&lt;td&gt;Go directly to the authorization flow. If there are stored ' +
          '    credentials, you still might not be prompted to reauthorize ' +
          '    the application.&lt;/td&gt;&lt;/tr&gt;' +
          '&lt;tr&gt;&lt;td&gt;&lt;a href="/revoke"&gt;Revoke current credentials&lt;/a&gt;&lt;/td&gt;' +
          '&lt;td&gt;Revoke the access token associated with the current user ' +
          '    session. After revoking credentials, if you go to the test ' +
          '    page, you should see an &lt;code&gt;invalid_grant&lt;/code&gt; error.' +
          '&lt;/td&gt;&lt;/tr&gt;' +
          '&lt;tr&gt;&lt;td&gt;&lt;a href="/clear"&gt;Clear Flask session credentials&lt;/a&gt;&lt;/td&gt;' +
          '&lt;td&gt;Clear the access token currently stored in the user session. ' +
          '    After clearing the token, if you &lt;a href="/test"&gt;test the ' +
          '    API request&lt;/a&gt; again, you should go back to the auth flow.' +
          '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;')


if __name__ == '__main__':
  # When running locally, disable OAuthlib's HTTPs verification.
  # ACTION ITEM for developers:
  #     When running in production *do not* leave this option enabled.
  os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'

  # Specify a hostname and port that are set as a valid redirect URI
  # for your API project in the Google API Console.
  app.run('localhost', 7443, debug=True, ssl_context=context)</pre>
<p>因為在此要使用 SQLite 資料庫, 可以使用 <a href="https://portableapps.com/apps/development/sqlite_database_browser_portable">https://portableapps.com/apps/development/sqlite_database_browser_portable</a> 開啟 SQLite 資料庫檔案.</p>
<p>利用 pybean 建立 user 資料表:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
from pybean import Store, SQLiteWriter
# if no content.db, create database file with cms table
data_dir = "./"
if not os.path.isfile(data_dir+"content.db"):
    library = Store(SQLiteWriter(data_dir+"content.db", frozen=False))
    # 資料表 user
    user = library.new("user")
    user.studid = "123"
    user.password = "123"
    user.memo = "user 123"
    library.save(user)
    library.commit()</pre>
<p>操作步驟:</p>
<p><a href="https://console.developers.google.com/">https://console.developers.google.com/</a> </p>
<p> 建立專案,  <span>APIs and Auth -&gt; Credentials,  Add Credentials and then select OAuth 2.0 client ID</span></p>
<p><span>get client id and client secret.</span></p>
<p><span>python -m pip install Flask-Login</span></p>
<p><span>之後可以使用:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask_login import LoginManager, login_required, login_user, \
    logout_user, current_user, UserMixin</pre>
<p></p>
<h1>應用範例</h1>
<p>學習計算機程式的目的在利用數位科技技術解決問題, 所謂數位科技技術包括程式套件、網路與資料庫等元件的組合.</p>
<p>基本流程為:</p>
<ol>
<li>如何取得、傳輸並處理資料?</li>
<li>如何儲存資料?</li>
<li>如何呈現資料?</li>
</ol>
<p>處理資料的過程依賴數學模型、演算法與資料結構</p>
<p>取得與傳輸資料則依賴網路</p>
<p>至於資料的呈現則涵蓋 2D/3D 動態與靜態格式處理</p>
<ol>
<li>Tinkercad Circuit - Arduino 控制卡與電子致動與感測元件線路的模擬</li>
<li>網頁資料解讀與任務派送 - 計算機程式對特定格式資料的分析後, 依照循環與亂數流程進行分配</li>
<li>V-rep - 利用各種程式介面與延伸程式的設計, 讓使用者設計、控制並模擬各種機器人模型</li>
<li>輔助設計套件 - 利用計算機圖學與視窗介面, 讓使用者完成設想中的機械零組件設計, 並進行功能模擬</li>
</ol>
<h2>計算器</h2>
<p>PyQt5 計算機程式說明</p>
<p>按鍵分類</p>
<ul>
<li>0 ~9 數字按建, 點按後由 digitClicked() 方法槽承接處理</li>
<li>直接運算元, 包括 Sqrt, x^2 與 1/x, 點按後由 unaryOperatorClicked() 方法槽承接處理</li>
<li>加或減運算元, 包括 + 與 - 運算, 點按後由 additiveOperatorClicked() 方法槽承接處理</li>
<li>乘或除運算元, 包括 * 與 / 運算, 點按後由 multiplicativeOperatorClicked() 方法槽承接處理</li>
<li>其餘按鍵則各自以特定的方法槽承接處理</li>
</ul>
<p>變數與運算流程考量</p>
<ul>
<li>數字按鍵以 zero, one, two, three, four, five, six, seven, eight, nine 命名</li>
<li>顯示幕以 display 命名</li>
<li>等號以 equalButton 命名</li>
<li>與 MS, M+, 或 MC 按鍵相關的計算機記憶體數值, 存入 sumInMemory 變數對應的記憶空間</li>
<li>以 sumSoFar 儲存累計數值, 使用者按下等號後, sumSoFar 重新計算結果, 並顯示在 display 幕, Clear All 按鍵則重置 sumSoFar 為 0</li>
<li>以 factorSoFar 儲存乘或除運算子運算過程所得的暫存數值</li>
<li>以 pendingAdditiveOperator 儲存使用者最後點按的加或減運算子字串</li>
<li>以 pendingMultiplicativeOperator 儲存使用者最後點按的乘或除運算子字串</li>
<li>以 waitingForOperand 界定使用者是否處理運算數輸入階段, 若 waitingForOperand 為 True, 表示計算機正在等待使用者"開始"輸入運算數</li>
<li>waitingForOperand 起始值為 True, 只有重新進入 digitClicked 方法, display 才會 clear(), 否則在顯示幕非為 0 的情況下, 將堆疊數字字串</li>
<li>因為考量先乘除後加減運算順序, 將加減與乘除處理方法分開, 若使用者輸入加減運算子後, 緊接乘除運算子, 計算機會先乘除運算後再加減</li>
<li>直接運算元可以在使用者按下按鍵後, 直接對 display 中的數值進行處理, 無需其他暫存需求</li>
<li>pendingAdditiveOperator, pendingMultiplicativeOperator, sumSoFar, factorSoFar 與 waitingForOperand, 在 Dialog 類別建構子中設定起始值</li>
</ul>
<p>數字按鍵點按處理</p>
<ul>
<li>使用者點按數字按鍵, 將會送出該按鍵的 clicked() 訊號</li>
<li>按鍵的 clicked() 訊號將會根據設定, 觸發 digitClicked() 方法槽</li>
<li>由於 PyQt5 的 Push Button 以 Qt5 中的 QObject::sender() 送出訊號, 此函式會傳回 sender 作為 QObject 的指標</li>
<li>因為此一與 Push Button 配合的 sender 為 Button 物件, 因此可以在 digitClicked() 函式中, 利用 sender().text() 取得按鍵的 text 字串</li>
<li>假如使用者點按 0, display 顯示字串 0, 但是若一開始輸入兩個以上的 0, digitClicked() 應該仍只顯示 0 字串</li>
<li>但是若計算機處於等待新運算數輸入時 (以 waitingForOperand 判定), 新數字在顯示前, display 應該要清除先前所顯示的數字</li>
<li>最後, 除了在顯示幕為 0 之後的 0 按鍵輸入, digitClicked() 方法槽不會繼續判定是否清除顯示幕或堆疊數字字串外, 所按的數字將會堆疊顯示</li>
</ul>
<p>直接運算按鍵處理</p>
<ul>
<li>Sqrt, x^2 與 1/x 等按鍵的處理方法為 unaryOperatorClicked(), 與數字按鍵的點按回應相同, 透過 sender().text() 取得按鍵上的 text 字串</li>
<li>unaryOperatorClicked() 方法隨後根據 text 判定運算子後, 利用 display 上的運算數進行運算後, 再將結果顯示在 display 顯示幕</li>
<li>若進行運算 Sqrt 求數值的平方根時, 顯示幕中為負值, 或 1/x 運算時, x 為 0, 都視為無法處理的情況, 以呼叫 abortOperation() 處理</li>
<li>abortOperation() 方法則重置所有起始變數, 並在 display 中顯示 "####"</li>
<li>直接運算子處理結束前, 運算結果會顯示在 display 中, 而且運算至此告一段落, 計算機狀態應該要回復到等待新運算數的階段, 因此 waitingForOperand 要重置為 True</li>
</ul>
<p>加或減按鍵處理</p>
<ul>
<li>使用者按下加或減運算子按鍵時, 程式設定以 additiveOperatorClicked() 處理</li>
<li>進入 additiveOperatorClicked() 後, 必須先查是否有尚未運算的乘或除運算子, 因為必須先乘除後才能加減</li>
<li>先處理乘與除運算後, 再處理加或減運算後, 將 sumSoFar 顯示在 display 後, 必須重置 sumSoFar 為 0, 表示運算告一段落</li>
</ul>
<p>乘或除按鍵處理</p>
<ul>
<li>使用者按下乘或除運算子按鍵時, 程式設定以 multiplicativeOperatorClicked() 處理</li>
<li>進入 multiplicativeOperatorClicked() 後, 無需檢查是否有尚未運算的加或減運算子, 因為乘除運算有優先權</li>
<li>先處理乘與除運算後, 再處理加或減運算, 將 sumSoFar 顯示在 display 後, 必須重置 sumSoFar 為 0, 表示運算告一段落</li>
</ul>
<p>小數點按鍵處理</p>
<ul>
<li>使用者按下小數點按鍵後, 以 pointClicked() 方法處理, 直接在 display 字串中加上 "." 字串</li>
</ul>
<p>數值變號按鍵處理</p>
<ul>
<li>使用者按下變號按鍵後, 由 changeSignClicked() 處理, 若顯示幕上為正值, 則在 display 字串最前面, 疊上 "-" 字串</li>
<li>假如顯示幕上為負值, 則設法移除 display 上字串最前方的 "-" 字元</li>
</ul>
<p>退格按鍵處理</p>
<ul>
<li>使用者按下退格按鍵後, 由 backspaceClicked() 處理, 這時可以利用 Python 字串數列中的 [:-1], 保留除了最後一個字元的字串</li>
<li>離開 backspaceClicked() 前 ,將顯示幕中原有字串的 [:-1] 字串, 顯示在 display 上</li>
<li>若退格後 display 上為空字串, 則顯示 0, 並且將 waitingForOperand 起始設為 True, 表示等待新運算數中</li>
</ul>
<p>清除按鍵處理</p>
<ul>
<li>使用者按下 Clear 按鍵後, 以 clear() 方法處理, 進入函式後, 將現有的運算數重置為 0</li>
<li>離開 clear() 前, 將 waitingForOperand 起始設為 True, 表示等待新運算數中</li>
<li>ClearAll 按鍵, 則將所有變數全部重置為起始狀態</li>
</ul>
<p>記憶體按鍵處理</p>
<ul>
<li>clearMemory() 方法與 "MC" 按鍵對應, 清除記憶體中所存 sumInMemory 設為 0</li>
<li>readMemory() 方法與 "MR" 按鍵對應, 功能為讀取記憶體中的數值, 因此將 sumInMemory 顯示在 display, 作為運算數</li>
<li>setMemory() 方法則與 "MS" 按鍵對應, 功能為設定記憶體中的數值，因此取 display 中的數字, 存入 sumInMemory</li>
<li>addToMemory() 方法與 "M+" 按鍵對應, 功能為加上記憶體中的數值, 因此將 sumInMemory 加上 display 中的數值</li>
<li>因為 setMemory() 與 addToMemory() 方法, 都需要取用 display 上的數值, 因此必須先呼叫 equalClicked(), 以更新 sumSoFar 與 display 上的數值</li>
</ul>
<p>calculate() 方法</p>
<ul>
<li>calculate() 方法中的運算, 以 rightOperand 為右運算數</li>
<li>當執行加或減運算時, 左運算數為 sumSoFar</li>
<li>當執行乘或除運算時, 左運算數為 factorSoFar</li>
<li>若運算過程出現除與 0 時, 將會回傳 False</li>
</ul>
<p><img alt="" height="346" src="/images/calculator_button_types.png" width="500"/></p>
<p>Qt5 -<span> </span><a href="http://doc.qt.io/qt-5/qobject.html#sender">sender()</a></p>
<p>sip -<span> </span><a href="https://github.com/kmolab/web_repository/blob/master/PyQt5_gpl-5.9.2/sip/QtCore/qobject.sip">sip: sender()</a></p>
<p>PyQt5 計算機程式原始碼</p>
<p>Dialog.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># -*- coding: utf-8 -*-

"""
Module implementing Dialog.
"""

from PyQt5.QtCore import pyqtSlot
from PyQt5.QtWidgets import QDialog

from .Ui_Dialog import Ui_Dialog


# Dialog 類別同時繼承 QDialog 與 Ui_Dialog 類別
class Dialog(QDialog, Ui_Dialog):
    """
    Class documentation goes here. (若有類別相關說明文件內容, 放在此處)
    """
    def __init__(self, parent=None):
        """
        Constructor (類別建構子)
        
        @param parent reference to the parent widget
        @type QWidget
        """
        # 利用 super 類別調用 parent 類別中的建構子
        super(Dialog, self).__init__(parent)
        # 上一行在 Python3 可以寫為 super().__init__()
        # 利用 Ui_Dialog 類別中的 setupUi 方法, 以 self 視窗部件建立使用者介面
        self.setupUi(self)
        # 以上程式碼由 Eric6 表單頁面中的滑鼠右鍵, Generate Dialog Code 指令產生
        # 當多個 signal 同時指向同一個 slot 處理時, 採用 for loop
        num_button = [self.one,  self.two,  \
        self.three,  self.four,  self.five,  self.six,  self.seven,  self.eight,  self.nine,  self.zero]
        # 用於產生加號與減號 signals 與 slots 用的數列
        plus_minus = [self.plus,  self.minus]
        # 用於產生乘號與除號 signals 與 slots 用的數列
        multiply_divide = [self.multiply,  self.divide]
        #self.one.clicked.connect(self.number)
        # 數字按鍵的 signals 與 slots 設定
        for i in num_button:
            i.clicked.connect(self.number)
        
        # 加減鍵的 signals 與 slogts 設定
        for i in plus_minus:
            i.clicked.connect(self.additiveOperatorClicked)
        
        # 等於按鍵的 signal 與 slot 設定
        self.equal.clicked.connect(self.equalClicked)
        
        # 乘與除按建的 signals 與 slots 設定
        for i in multiply_divide:
            i.clicked.connect(self.multiplicativeOperatorClicked)
        
        # 等待運算的加或減
        self.pendingAdditiveOperator = ''
        
        # sumSoFar 儲存運算流程中所累計的數值
        # 當使用者按下 = 後, sumSoFar 重新計算並將數字顯示在 display 區
        # 當使用者按下 Clear All, sumSoFar 將重置回 0
        self.sumSoFar = 0.0
        # 起始時, 等待使用者輸入運算數值變數為真
        self.waitingForOperand = True
        
        # sumInMemory 儲存計算機記憶體中的值, 配合 MS, M+, 或 MC 按鈕使用
        self.sumInMemory = 0.0
        # factorSoFar 暫存按下乘或除運算時的數值
        self.factorSoFar = 0.0
        # 等待運算的乘或除
        self.pendingMultiplicativeOperator = ''

    def number(self):
        # sender() 為使用者點擊按鈕時送出的按鈕指標類別, 在此利用此按鍵類別建立案例
        # 所建立的 clickedButton 即為當下使用者所按下的按鈕物件
        clickedButton = self.sender()
        # text() 為利用按鈕物件的 text 方法取得該按鈕上所顯示的 text 字串
        digitValue = int(clickedButton.text())
        # when user clicks 0.0
        if self.display.text() == '0' and digitValue == 0.0:
            return
        
        # if under digit input process, clear display for the very first beginning
        # waitingForOperand 為 True 已經點按運算數值按鈕
        if self.waitingForOperand:
            # 清除 display 
            self.display.clear()
            # 將判斷是否已經點按運算數值按鈕的判斷變數重新設為  False
            self.waitingForOperand = False
        # 利用 setText() 設定 LineEdit 元件顯示字串, 利用 text() 取出目前所顯示的字串, 同時也可利用 text() 擷取按鈕物件上顯示的字串
        #self.display.setText(self.display.text() + self.sender().text())
        self.display.setText(self.display.text() + str(digitValue))
        
    def additiveOperatorClicked(self):
        # 確定按下加或減
        clickedButton = self.sender()
        # 確定運算子, 為加或減
        clickedOperator = clickedButton.text()
        # 點按運算子之前在 display 上的數字, 為運算數
        operand = float(self.display.text())
        
        # 納入乘與除之後的先乘除後加減運算邏輯, 且納入連續按下乘或除可累計運算
        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return

            self.display.setText(str(self.factorSoFar))
            operand = self.factorSoFar
            self.factorSoFar = 0.0
            self.pendingMultiplicativeOperator = ''
            
            
        # 假如有等待運算的加或減, 進入執行運算
        # 且納入連續按下加或減時, 可以目前的運算數及運算子累計運算
        if self.pendingAdditiveOperator:
            if not self.calculate(operand, self.pendingAdditiveOperator):
                self.abortOperation()
                return
            # 顯示目前的運算結果
            self.display.setText(str(self.sumSoFar))
        else:
            # 假如 self.pendingAdditiveOperator 為 False, 則將運算數與 self.fumSoFar 對應
            self.sumSoFar = operand
            
        # 能夠重複按下加或減, 以目前的運算數值執行重複運算
        self.pendingAdditiveOperator = clickedOperator
        # 進入等待另外一個運算數值的階段, 設為 True 才會清空 LineEdit
        self.waitingForOperand = True

    # 處理使用者按下乘或除按鍵時的 slot 方法
    def multiplicativeOperatorClicked(self):
        clickedButton = self.sender()
        clickedOperator = clickedButton.text()
        # 將按鈕顯示的 text 轉為浮點數
        operand = float(self.display.text())

        # 若連續按下乘或除, 則以目前的運算數與運算子執行運算
        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return

            # 將目前乘或除的累計運算數顯示在 display 上
            self.display.setText(str(self.factorSoFar))
        else:
            self.factorSoFar = operand

        # 能夠重複按下乘或除, 以目前的運算數值執行重複運算
        self.pendingMultiplicativeOperator = clickedOperator
        self.waitingForOperand = True
    
    def equalClicked(self):
        # 從 display 取的運算數值
        operand = float(self.display.text())
        
        # 先乘除的運算處理
        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return
            # factorSoFar 為乘或除運算所得之暫存數值
            operand = self.factorSoFar
            self.factorSoFar = 0.0
            self.pendingMultiplicativeOperator = ''
        
        # 若有等待加或減的運算子, 執行運算
        if self.pendingAdditiveOperator:
            if not self.calculate(operand, self.pendingAdditiveOperator):
                self.abortOperation()
                return

            self.pendingAdditiveOperator = ''
        else:
            self.sumSoFar = operand

        self.display.setText(str(self.sumSoFar))
        self.sumSoFar = 0.0
        self.waitingForOperand = True

    # 右運算數與等待運算子當作輸入
    def calculate(self, rightOperand, pendingOperator):
        # 進入計算流程時, 用目前輸入的運算數值與 self.sumSoFar 執行計算
        if pendingOperator == "+":
            self.sumSoFar += rightOperand
        elif pendingOperator == "-":
            self.sumSoFar -= rightOperand

        elif pendingOperator == "*":
            self.factorSoFar *= rightOperand
        elif pendingOperator == "/":
            if rightOperand == 0.0:
                return False

            self.factorSoFar /= rightOperand

        return True</pre>
<p>run.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入 sys 模組, 主要用於 sys.argv 成員變數
import sys
# 從 PQt5 模組導入 QtWidgets 模組類別
from PyQt5 import QtWidgets
# 從 ui 目錄導入 Dialog.py, Python 程式檔案本身就是一個模組, 且文件名就是模組名
from ui import Dialog
 
# 每一個 Python 程式都可以直接被執行, 或者被導入其他程式中, 當成導入模組執行
# 假如程式檔案直接被執行時, 全域變數 __name__ 就會等於 "__main__" 字串
# 因此, 以下的判斷式的意思是, 若本檔案直接被執行時, 就會執行以下內縮程式區段
if __name__ == "__main__":
    # 利用 QtWidgets.QApplication 類別建立案例物件, 且以 sys.argv 作為輸入
    app = QtWidgets.QApplication(sys.argv)
    # 利用所導入的 Dialog 模組中的 Dialog 類別建立物件案例, 對應的變數名稱設為 win
    win = Dialog.Dialog()
    # 執行 win 物件中的 show() 方法, 因為所有 Qt5 部件內定為不顯示
    win.show()
    # 執行 app 物件的 exec() 方法, 表示進入視窗事件重複迴圈, 等待使用者滑鼠輸入
    # 將 app.exec() 當作 sys.exit() 執行輸入, 表示使用者可以透過視窗的 x 按鈕結束執行
    sys.exit(app.exec())</pre>
<p>上述完整的程式專案倉儲: <a href="https://github.com/kmolab/pymcadp/tree/gh-pages/2017fall">https://github.com/kmolab/pymcadp/tree/gh-pages/2017fall</a> </p>
<p><a href="http://lab.kmol.info/2017fall/blog/kmol-2017-fall-windows-calculator-development.html">視窗計算機程式開發</a></p>
<p><a href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-pyqt5-1.html">PyQt5 視窗程式一</a></p>
<p><a href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-pyqt5-2.html">PyQt5 視窗程式二</a></p>
<p><a href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-event-driven-programming-design.html">事件導向程式設計</a></p>
<p>完整的視窗計算器程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python

import math

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QApplication, QGridLayout, QLayout, QLineEdit,
        QSizePolicy, QToolButton, QWidget)


class Button(QToolButton):
    '''
    def __init__(self, text, parent=None):
        super(Button, self).__init__(parent)
    '''
    # for Python 3
    def __init__(self, text):
        super().__init__()

        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        self.setText(text)

    def sizeHint(self):
        size = super(Button, self).sizeHint()
        size.setHeight(size.height() + 20)
        size.setWidth(max(size.width(), size.height()))
        return size


class Calculator(QWidget):
    NumDigitButtons = 10
    
    '''    
    def __init__(self, parent=None):
        super(Calculator, self).__init__(parent)
    '''
    def __init__(self):
        super().__init__()

        self.pendingAdditiveOperator = ''
        self.pendingMultiplicativeOperator = ''

        self.sumInMemory = 0.0
        self.sumSoFar = 0.0
        self.factorSoFar = 0.0
        self.waitingForOperand = True

        self.display = QLineEdit('0')
        self.display.setReadOnly(True)
        self.display.setAlignment(Qt.AlignRight)
        self.display.setMaxLength(15)

        font = self.display.font()
        font.setPointSize(font.pointSize() + 8)
        self.display.setFont(font)

        self.digitButtons = []
        
        for i in range(Calculator.NumDigitButtons):
            self.digitButtons.append(self.createButton(str(i),
                    self.digitClicked))

        self.pointButton = self.createButton(".", self.pointClicked)
        self.changeSignButton = self.createButton(u"\N{PLUS-MINUS SIGN}",
                self.changeSignClicked)

        self.backspaceButton = self.createButton("Backspace",
                self.backspaceClicked)
        self.clearButton = self.createButton("Clear", self.clear)
        self.clearAllButton = self.createButton("Clear All", self.clearAll)

        self.clearMemoryButton = self.createButton("MC", self.clearMemory)
        self.readMemoryButton = self.createButton("MR", self.readMemory)
        self.setMemoryButton = self.createButton("MS", self.setMemory)
        self.addToMemoryButton = self.createButton("M+", self.addToMemory)

        self.divisionButton = self.createButton(u"\N{DIVISION SIGN}",
                self.multiplicativeOperatorClicked)
        self.timesButton = self.createButton(u"\N{MULTIPLICATION SIGN}",
                self.multiplicativeOperatorClicked)
        self.minusButton = self.createButton("-", self.additiveOperatorClicked)
        self.plusButton = self.createButton("+", self.additiveOperatorClicked)

        self.squareRootButton = self.createButton("Sqrt",
                self.unaryOperatorClicked)
        self.powerButton = self.createButton(u"x\N{SUPERSCRIPT TWO}",
                self.unaryOperatorClicked)
        self.reciprocalButton = self.createButton("1/x",
                self.unaryOperatorClicked)
        self.equalButton = self.createButton("=", self.equalClicked)

        mainLayout = QGridLayout()
        mainLayout.setSizeConstraint(QLayout.SetFixedSize)

        mainLayout.addWidget(self.display, 0, 0, 1, 6)
        mainLayout.addWidget(self.backspaceButton, 1, 0, 1, 2)
        mainLayout.addWidget(self.clearButton, 1, 2, 1, 2)
        mainLayout.addWidget(self.clearAllButton, 1, 4, 1, 2)

        mainLayout.addWidget(self.clearMemoryButton, 2, 0)
        mainLayout.addWidget(self.readMemoryButton, 3, 0)
        mainLayout.addWidget(self.setMemoryButton, 4, 0)
        mainLayout.addWidget(self.addToMemoryButton, 5, 0)

        for i in range(1, Calculator.NumDigitButtons):
            row = ((9 - i) / 3) + 2
            column = ((i - 1) % 3) + 1
            mainLayout.addWidget(self.digitButtons[i], row, column)

        mainLayout.addWidget(self.digitButtons[0], 5, 1)
        mainLayout.addWidget(self.pointButton, 5, 2)
        mainLayout.addWidget(self.changeSignButton, 5, 3)

        mainLayout.addWidget(self.divisionButton, 2, 4)
        mainLayout.addWidget(self.timesButton, 3, 4)
        mainLayout.addWidget(self.minusButton, 4, 4)
        mainLayout.addWidget(self.plusButton, 5, 4)

        mainLayout.addWidget(self.squareRootButton, 2, 5)
        mainLayout.addWidget(self.powerButton, 3, 5)
        mainLayout.addWidget(self.reciprocalButton, 4, 5)
        mainLayout.addWidget(self.equalButton, 5, 5)
        self.setLayout(mainLayout)

        self.setWindowTitle("Calculator")

    def digitClicked(self):
        clickedButton = self.sender()
        digitValue = int(clickedButton.text())

        if self.display.text() == '0' and digitValue == 0.0:
            return

        if self.waitingForOperand:
            self.display.clear()
            self.waitingForOperand = False

        self.display.setText(self.display.text() + str(digitValue))

    def unaryOperatorClicked(self):
        clickedButton = self.sender()
        clickedOperator = clickedButton.text()
        operand = float(self.display.text())

        if clickedOperator == "Sqrt":
            if operand &lt; 0.0:
                self.abortOperation()
                return

            result = math.sqrt(operand)
        elif clickedOperator == u"x\N{SUPERSCRIPT TWO}":
            result = math.pow(operand, 2.0)
        elif clickedOperator == "1/x":
            if operand == 0.0:
                self.abortOperation()
                return

            result = 1.0 / operand

        self.display.setText(str(result))
        self.waitingForOperand = True

    def additiveOperatorClicked(self):
        clickedButton = self.sender()
        clickedOperator = clickedButton.text()
        operand = float(self.display.text())

        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return

            self.display.setText(str(self.factorSoFar))
            operand = self.factorSoFar
            self.factorSoFar = 0.0
            self.pendingMultiplicativeOperator = ''

        if self.pendingAdditiveOperator:
            if not self.calculate(operand, self.pendingAdditiveOperator):
                self.abortOperation()
                return

            self.display.setText(str(self.sumSoFar))
        else:
            self.sumSoFar = operand

        self.pendingAdditiveOperator = clickedOperator
        self.waitingForOperand = True

    def multiplicativeOperatorClicked(self):
        clickedButton = self.sender()
        clickedOperator = clickedButton.text()
        operand = float(self.display.text())

        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return

            self.display.setText(str(self.factorSoFar))
        else:
            self.factorSoFar = operand

        self.pendingMultiplicativeOperator = clickedOperator
        self.waitingForOperand = True

    def equalClicked(self):
        operand = float(self.display.text())

        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return

            operand = self.factorSoFar
            self.factorSoFar = 0.0
            self.pendingMultiplicativeOperator = ''

        if self.pendingAdditiveOperator:
            if not self.calculate(operand, self.pendingAdditiveOperator):
                self.abortOperation()
                return

            self.pendingAdditiveOperator = ''
        else:
            self.sumSoFar = operand

        self.display.setText(str(self.sumSoFar))
        self.sumSoFar = 0.0
        self.waitingForOperand = True

    def pointClicked(self):
        if self.waitingForOperand:
            self.display.setText('0')

        if "." not in self.display.text():
            self.display.setText(self.display.text() + ".")

        self.waitingForOperand = False

    def changeSignClicked(self):
        text = self.display.text()
        value = float(text)

        if value &gt; 0.0:
            text = "-" + text
        elif value &lt; 0.0:
            text = text[1:]

        self.display.setText(text)

    def backspaceClicked(self):
        if self.waitingForOperand:
            return

        text = self.display.text()[:-1]
        if not text:
            text = '0'
            self.waitingForOperand = True

        self.display.setText(text)

    def clear(self):
        if self.waitingForOperand:
            return

        self.display.setText('0')
        self.waitingForOperand = True

    def clearAll(self):
        self.sumSoFar = 0.0
        self.factorSoFar = 0.0
        self.pendingAdditiveOperator = ''
        self.pendingMultiplicativeOperator = ''
        self.display.setText('0')
        self.waitingForOperand = True

    def clearMemory(self):
        self.sumInMemory = 0.0

    def readMemory(self):
        self.display.setText(str(self.sumInMemory))
        self.waitingForOperand = True

    def setMemory(self):
        self.equalClicked()
        self.sumInMemory = float(self.display.text())

    def addToMemory(self):
        self.equalClicked()
        self.sumInMemory += float(self.display.text())

    def createButton(self, text, member):
        button = Button(text)
        button.clicked.connect(member)
        return button

    def abortOperation(self):
        self.clearAll()
        self.display.setText("####")

    def calculate(self, rightOperand, pendingOperator):
        if pendingOperator == "+":
            self.sumSoFar += rightOperand
        elif pendingOperator == "-":
            self.sumSoFar -= rightOperand
        elif pendingOperator == u"\N{MULTIPLICATION SIGN}":
            self.factorSoFar *= rightOperand
        elif pendingOperator == u"\N{DIVISION SIGN}":
            if rightOperand == 0.0:
                return False

            self.factorSoFar /= rightOperand

        return True


if __name__ == '__main__':

    import sys

    app = QApplication(sys.argv)
    calc = Calculator()
    calc.show()
    sys.exit(app.exec_())</pre>
<p>參考資料:</p>
<p><a href="http://doc.qt.io/qt-5/qapplication.html">QApplication</a></p>
<p><a href="http://doc.qt.io/qt-5/qtwidgets-module.html">QtWidgets</a></p>
<p><a href="http://doc.qt.io/qt-5/qdialog.html">QDialog</a></p>
<p><a href="https://pythonspot.com/en/pyqt5-signals-and-slots/">PyQt5 Signals and Slots</a></p>
<p><a href="http://doc.qt.io/qt-5/qtwidgets-widgets-calculator-example.html">Qt 視窗計算器程式</a> (以 C++ 編寫)</p>
<h2>Tinkercad</h2>
<p>註冊 AutoDesk TinkerCAD 帳號</p>
<p>為了在實體 Arduino Uno 控制板連線操作之前, 可以利用網際 Auduino 控制板與電子元件系統進行模擬, 請各學員至<span> </span><a href="https://www.tinkercad.com/">https://www.tinkercad.com</a><span> </span>登記帳號, 登入後選擇左上角的 TinkerCAD 標誌連結後, 選擇 Circuits 進入電路設計與模擬, 操作畫面如下圖所示:</p>
<p><img alt="" height="373" src="/images/circuits_on_tinkercad.png" width="700"/></p>
<p><span>接著選擇 Arudino Uno 控制板與 Servo Motor, 然後接上電源與地線, 並將控制訊號接到 Auduino Uno 控制板的 PWM pin 9, 利用 Code Editor 納入下列 Arduino 程式, 再利用 upload and run 將程式編譯後上傳到虛擬的 Arduino Uno 控制板上執行, 就可以模擬 Servo Motor 持續左右各旋轉 180 度. 操作畫面如下圖所示: </span></p>
<p><span><img alt="" height="373" src="/images/arduino_uno_servo_on_tinkercad.png" width="700"/></span></p>
<p>實體 Arduino Servo Motor Control</p>
<p>完成上述以 TinkerCAD 模擬伺服馬達的接線與程式執行之後, 接著操作實體 Arduino 控制板與 Servo Motor 的控制, 首先利用電腦驅動 Arduino 控制板, 然後再利用板子上的脈衝寬度調變 (PWM, Pulse Width Modulation) 訊號控制伺服馬達, 之後再利用傳動機構與資訊控制介面, 製作所需的機電資整合系統. 電子電機系統除了可以方便感測各種物理化學量外, 還能夠快速傳遞感測與命令訊號, 而機械系統則透過機構元件的組合, 扮演傳遞功率致動或抵抗外力撞擊與疲勞破壞的角色, 至於資訊系統則用來整合各種資訊, 用更友善的人機介面, 讓使用者更有效能地運用機電資系統產品.</p>
<p><a href="https://mde1a1.kmol.info/2017fall/raw/arduino-1.8.5-windows.zip?name=4aee6f20d04156a10d1739e40f54cda7ef1b0e0e">arduino-1.8.4-windows.zip</a><span> </span>下載 (或直至<span> </span><a href="https://www.arduino.cc/en/Main/Software">https://www.arduino.cc/en/Main/Software</a><span> </span>下載)</p>
<p>控制台 - 硬體與音效 - 裝置管理員 利用解開的 arduino driver 程式驅動 Arduino Uno 控制板, 並取得 COM 對應號碼, 例如: COM7, 之後的 Arduino 編譯後可以透過此 COM 埠號將程式上傳到控制板上執行.</p>
<p>MG996R 伺服馬達</p>
<p>棕色線 GND</p>
<p>紅色線 V+5V</p>
<p>橘色線 PWM</p>
<p>控制程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;Servo.h&gt;
Servo myservo;  // 建立一個 servo 物件，最多可建立 12個 servo

int pos = 0;    // 設定 Servo 位置的變數

void setup() {
  myservo.attach(9);  // 將 servo 物件連接到 pin 9
}

void loop() {
  // 正轉 180度
  for (pos = 0; pos &lt;= 180; pos += 1) // 從 0 度旋轉到 180 度，每次 1 度 
  {     
    myservo.write(pos);               // 告訴 servo 走到 'pos' 的位置
    delay(15);                        // 等待 15ms 讓 servo 走到指定位置
  }

// 反轉 180度
  for (pos = 180; pos &gt;= 0; pos -= 1) // 從 180 度旋轉到 0 度，每次 1 度 
  { 
    myservo.write(pos);               // 告訴 servo 走到 'pos' 的位置

delay(15);                        // 等待 15ms 讓 servo 走到指定位置
  }
}</pre>
<p>參考資料:</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-3241-4">Beginning Arduino</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-3778-5">Beginning Arduino Programming</a></p>
<p><a href="http://www.playrobot.com/20kgf-cm/1150-standard-servo-mg996r.html">http://www.playrobot.com/20kgf-cm/1150-standard-servo-mg996r.html</a></p>
<p><a href="http://www.playrobot.com/freedownload/Arduino_Happy%20Learning_DEMO.pdf">http://www.playrobot.com/freedownload/Arduino_Happy%20Learning_DEMO.pdf</a></p>
<p><a href="http://atceiling.blogspot.tw/2017/03/arduino.html">http://atceiling.blogspot.tw/2017/03/arduino.html</a></p>
<p>Python, Arduino and VPython:</p>
<p><a href="http://www.toptechboy.com/arduino-lessons/">http://www.toptechboy.com/arduino-lessons/</a></p>
<p><a href="https://create.arduino.cc/projecthub/chanhj/magnetic-levitation-8c3ad0">Arduino Magnetic Levitation System</a></p>
<p><a href="http://www.instructables.com/id/Magnetic-Levitation/">http://www.instructables.com/id/Magnetic-Levitation/</a><span> </span>(<a href="https://www.amazon.com/Electromagnet-Solenoid-Electric-Mechanical-Experimental/dp/B008OENGU0/">電磁鐵1</a>,<span> </span><a href="http://goods.ruten.com.tw/item/show?21620739232041">電磁鐵2</a>)</p>
<p><a href="http://embeddedlaboratory.blogspot.tw/2017/04/design-gui-in-python-using-pyqt5.html">Arduino and PyQt5</a></p>
<p><a href="http://embeddedlaboratory.blogspot.tw/search/label/Arduino">http://embeddedlaboratory.blogspot.tw/search/label/Arduino</a></p>
<p><a href="http://electronut.in/plotting-real-time-data-from-arduino-using-python/">Arduino and Matplotlib</a></p>
<h2>讀寫網頁內容</h2>
<p>Onshape 教學影片</p>
<p><a href="https://www.onshape.com/video">https://www.onshape.com/video</a><span> </span>為 Onshpae 官方網站所提供的教學影片區, 請各班以每人兩個影片的方式進行分配, 分別以中文說明影片內容操作過程, 並上傳到個人的 Vimeo 與 Youtube 影片區.</p>
<p>預計分配的影片:</p>
<p><a href="https://www.onshape.com/videos/topic/tech-tips">https://www.onshape.com/videos/topic/tech-tips</a></p>
<p><a href="https://www.onshape.com/videos/topic/intro-to-cad">https://www.onshape.com/videos/topic/intro-to-cad</a></p>
<p><a href="https://www.onshape.com/videos/topic/tutorials">https://www.onshape.com/videos/topic/tutorials</a></p>
<p><a href="https://www.onshape.com/videos/topic/essential-training">https://www.onshape.com/videos/topic/essential-training</a></p>
<p><a href="https://www.onshape.com/videos/topic/drawings">https://www.onshape.com/videos/topic/drawings</a></p>
<p>請各組討論:</p>
<p>如何分配影片?如何集合管理各學員所上傳的教學操作影片?</p>
<p>利用 Python3, urllib 與 bs4 解讀上述網頁內容, 取出各影片的連結, 然後放入數列中:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from urllib.request import urlopen
from bs4 import BeautifulSoup

file = urlopen("https://www.onshape.com/videos/topic/intro-to-cad")
#print(file.read().decode())

soup = BeautifulSoup(file, 'html.parser')

links = []
for link in soup.find_all('a', href=True):
    if 'videos' in link['href']:
        if 'https' in link['href']:
            #print(link['href'])
            links.append(link['href'])
result = list(set(links))
for i in range(len(result)):
    print(i+1, result[i])</pre>
<p><span>納入上述所有影片網頁連結, 利用程式取出各影片的連結字串:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 從 urllib 模組中導入 urlopen
from urllib.request import urlopen
# 從 bs4 模組中導入 BeautirulSoup
from bs4 import BeautifulSoup

# 將要取出影片連結的網站 url,  放入數列中, 取名為 sources
sources = ['https://www.onshape.com/videos/topic/tech-tips', 'https://www.onshape.com/videos/topic/intro-to-cad', 'https://www.onshape.com/videos/topic/tutorials', 'https://www.onshape.com/videos/topic/essential-training', 'https://www.onshape.com/videos/topic/drawings']

#tech-tips (60)
#intro-to-cad (26)
#tutorials (14)
#essential-training (6)
#drawings (5)

# 按照網頁中的影片數計算, 共有 111 部影片, 但分類中可能重複
print(60+26+14+6+5)

# 設 links 變數與空數列對應
links = []
# 利用 for 迴圈一一取出各網頁的 html 後, 進行解讀
# 只取出有 videos 與 https 連結的資料, 但避開 all 與 topic 類別連結
for url in sources:
    file = urlopen(url)
    # 因為 urlopen 出來的資料為二位元檔案, 若要讀出列印
    # 必須要先 decode() 為字串
    #print(file.read().decode())
    # 使用 html 解讀各連結的網頁內容
    soup = BeautifulSoup(file, 'html.parser')
    # 利用 Beautifulsoup 物件中的 find_all 方法尋找 anchor
    for link in soup.find_all('a', href=True):
        # 從各 anchor 資料篩選所需的影片連結
        if ('videos' or 'https') in link['href']:
            if 'all' not in link['href']:
                if 'topic' not in link['href']:
                    links.append(link['href'])
                    
# 為避免列出重複資料, 將數列轉為集合後, 再轉回數列
result = list(set(links))
# 逐一列出所取得的影片連結
for i in range(len(result)):
    print(i+1, result[i])</pre>
<p>從<span> </span><a href="http://www.rfc-editor.org/search/rfc_search_detail.php?page=All&amp;title=ipv6&amp;pubstatus%5B%5D=Any&amp;pub_date_type=any&amp;sortkey=Number&amp;sorting=ASC%22">IPV6 相關 RFCs 查詢</a>得到的資料中, 如何在各組的網誌中整理一份能夠連結到各個未過時 (non-obsolete) 的 RFC 文件?</p>
<p>參考程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">data = open("midterm_list.txt").read()
line_list = data.splitlines()
count = 0
for line in line_list:
    each_line_list = line.split("\t")
    try:
        if "Obsoleted" in each_line_list[5]:
            count = count + 1
            print(each_line_list[0])
    except:
        pass
print(count)</pre>
<p>若以 Brython 改寫, 可以直接將結果列在網頁上:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;div id="container"&gt;&lt;/div&gt;
 
&lt;script type="text/python3" id="script1"&gt;
from browser import document, html
container = document['container']
data = open("./../midterm_list.txt").read()
line_list = data.splitlines()
count = 0
output = ""
for line in line_list:
    each_line_list = line.split("\t")
    try:
        if "Obsoleted" not in each_line_list[5]:
            count = count + 1
            output += html.A(each_line_list[0], href="http://www.rfc-editor.org/info/"+ each_line_list[0].lower().replace(" ", "")) + " | "
            if count%10 == 0:
                output += html.BR()
    except:
        pass
output += html.BR() + html.BR()  + "共有 " + str(count)+ " 份文件尚未失效!"
container &lt;= output
&lt;/script&gt;</pre>
<p>以下則利用 Brython 讀取網站上的資料檔, 進行處理後, 將結果插入網頁:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 導入 Brython 標準程式庫 --&gt;
&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;
 
&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
 
&lt;!-- 以下利用 Brython 程式執行檔案讀取與比對流程 --&gt;
&lt;!-- 假如需要用圖型表示數字, 則利用 canvas 繪圖 --&gt;
&lt;!-- &lt;canvas id="plotarea" width="600" height="400"&gt;&lt;/canvas&gt; --&gt;
 
甲班學員投影片:
 
&lt;div id="container1"&gt;&lt;/div&gt;
 
&lt;script type="text/python3" id="script1"&gt;
from browser import document, html
container1 = document['container1']
adata = open("./../users/a.txt").read()
alist = adata.splitlines()
n = 0
for stud_num in alist:
    if stud_num == "40523148":
        mlink = html.A(stud_num, href="http://ss"+str(stud_num)+".github.io/2016fallcp_hw")
    else:
        mlink = html.A(stud_num, href="http://s"+str(stud_num)+".github.io/2016fallcp_hw")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container1 &lt;= mlink
&lt;/script&gt;
 
&lt;br&gt;
甲班學員網誌:
 
&lt;div id="container2"&gt;&lt;/div&gt;
 
&lt;script type="text/python3" id="script2"&gt;
from browser import document, html
# 學員選課名單直接從 id 為 script1 的程式段中導入
from script1 import alist
container2 = document['container2']
n = 0
for stud_num in alist:
    if stud_num == "40523148":
        mlink = html.A(stud_num, href="http://ss"+str(stud_num)+".github.io/2016fallcp_hw/blog")
    else:
        mlink = html.A(stud_num, href="http://s"+str(stud_num)+".github.io/2016fallcp_hw/blog")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container2 &lt;= mlink
&lt;/script&gt;</pre>
<p>參考資料:</p>
<p>網頁選色: <a href="http://paletton.com">http://paletton.com</a> </p>
<p>顏色轉換: <a href="https://www.w3schools.com/colors/colors_converter.asp">https://www.w3schools.com/colors/colors_converter.asp</a> </p>
<h2>查英文單字</h2>
<p>利用 Python 程式協助查英文單字</p>
<p>查單字程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import urllib.request
from bs4 import BeautifulSoup
import sys, codecs
# 將系統輸出語系編碼設為 utf8
sys.stdout = codecs.getwriter("utf8")(sys.stdout.detach())
# 表示要讀入的文章檔名為 wed.txt
filename = "wed"

"""
 Project: Concordancer Jr.
 File name: concordance.py
 Description:  Counts up the number of each unique word in a block of plain text.

 Copyright (C) 2010 Steve Osborne, srosborne (at) gmail.com
 http://yakinikuman.wordpress.com/
 *******
 This program is free software; you can redistribute it and/or modify 
 it under the terms of the GNU General Public License as published by 
 the Free Software Foundation; either version 2 of the License, or 
 (at your option) any later version.

 This program is distributed in the hope that it will be useful, but 
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

 *******
 Version history:
 1.0   Oct 27 2010
 2.0      Nov 11, 2010 - put into a class.  Can now be called with any block of text.

"""

class Concordancer:
    def __init__(self):
        #from http://www.duboislc.org/EducationWatch/First100Words.html
        #some common words a little fishy... "water"? "oil"??  But no "am"???
        self.common = ['the','of','and','a','to','in','is','you','that','it',
            'he','was','for','on','are','as','with','his','they','i',
            'at','be','this','have','from','or','one','had','by','word',
            'but','not','what','all','were','we','when','your','can','said',
            'there','use','an','each','which','she','do','how','their','if',
            'will','up','other','about','out','many','then','them','these','so',
            'some','her','would','make','like','him','into','time','has','look',
            'two','more','write','go','see','number','no','way','could','people',
            'my','than','first','water','been','call','who','oil','its','now',
            'find','long','down','day','did','get','come','made','may','part']

        self.wordIndex = dict() #will be a count of each word in the input text
        self.total = 0 #total words
        self.unique = 0 #unique words

    def getCommon(self):
        return self.common

    def updateCommon(self,newCommon):
        #newCommon is a list of words to be used on future calls to topWordsNotCommon
        self.common = newCommon

    def extendCommon(self,newCommon):
        #newCommon is a list of words to be added to self.common
        self.common.extend(newCommon)

    def populateIndex(self,data):
        #data is a block of text
        #splits up data and adds each word to the index
        #repeated calls to populateIndex will NOT clear the index - will just keep adding up words in new block of text
        for word in data.split():#splits at and removes whitespace
            self.addword(word)
        self.calculateUniqueWords()
        self.calculateTotalWords()

    def addword(self,word):
        word = word.translate("0123456789.!?,;:*\)\(\[\]\\\n/'\"")#remove punctuation, numbers, and newlines

        if len(word) &gt; 5 and word.isalpha():
            word = word.lower()#convert to lower case
            #special case of dashes "--": separate into two words
            if "--" in word:
                words = word.replace('--',' ')
                for w in words.split():
                    self.addword(w)
            elif word in self.wordIndex:
                self.wordIndex[word] = self.wordIndex[word] + 1
            else:
                self.wordIndex[word] = 1

    def getSortedIndex(self):
        #note - sorted returns a list of tuples, not a dictionary
        s1 = sorted(list(self.wordIndex.items()),key=lambda item:item[0]) #secondary key: sort alphabetically
        s2 = sorted(s1,key=lambda item:item[1], reverse=True) #primary key: sort by count
        return s2

    def calculateUniqueWords(self):
        self.unique = len(self.wordIndex)

    def calculateTotalWords(self):
        total = 0
        for word in list(self.wordIndex.keys()):
            total = total + self.wordIndex[word]
        self.total = total

    def topWords(self,n,fExcludeCommon=1):
        #run only after "populateIndex" for meaningful output
        #returns list of top min(n,unique) words in the index
        #fExcludeCommon: if 1 [default], excludes any words in self.common.  Set to 0 to include all words.
        #returns list of (word,count) pairs for the top n words.  'count' is the count of that word.
        s2 = self.getSortedIndex()
        lwords = []
        i = 0
        while len(lwords) &lt; n and i &lt; self.unique:
            key = s2[i][0]
            value = s2[i][1]
            item = (key,value)
            if fExcludeCommon:
                if key not in self.common:
                    lwords.append(item)
            else:
                lwords.append(item)
            i = i + 1
        return lwords

# 以上為統計文章中單字出現次數的類別

def chk_dict(單字):
    url = 'http://dictionary.sina.com.tw/word/ec/'
    response = urllib.request.urlopen(url+單字)
    text = response.read()
    try:
        html_doc = text.decode("utf-8")
    except:
        html_doc = text.decode("latin-1")
    return html_doc

def parse_doc(網頁超文件):
    all_text = ""
    soup = BeautifulSoup(網頁超文件)
    div_tag = soup.findAll('div',{'class',"word_text1"})
    for i in range(len(div_tag)):
        all_text += div_tag[i].get_text()
    return all_text+"\n"

# 用來統計單字次序的全域變數
word_count = 0

def 查單字(單字):
    global word_count
    html_doc = chk_dict(單字)
    our_text = parse_doc(html_doc)
    if our_text == "\n":
        word_def = "查不到與 "+單字+" 有關的資料\n"
    else:
        word_count += 1
        word_def = str(word_count)+". "+單字+":\n"
        word_def += our_text
    word_def += "_"*50+"\n"
    return word_def

# 檔案是要將結果存檔用的 handle
檔案 = open("words_"+filename+".txt", "w", encoding="UTF-8")

# 以下為統計文章單字用的程式呼叫
concord = Concordancer()
file = filename+'.txt'
f = open(file,'rt',encoding="utf-8")
data = f.read()#the whole file as one big string
concord.populateIndex(data)

n = concord.unique
print("Top %s words:" % n)
top = concord.topWords(n)

# 隨後的 key 就是單字
order = 0
all_text = ""
for item in top:
    order += 1
    key = item[0]
    value = item[1]
    #print(order,"%s:%s" % (key,value))
    print(order,key,value)
    all_text += 查單字(key)

檔案.write(all_text)
print("done")</pre>
<h4>英文字典檔案處理</h4>
<p><a href="https://github.com/mdecourse/2016fallcadp/blob/gh-pages/data/WebsterUnabridgedDictionary.txt">WebsterUnabridgedDictionary.txt</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#coding: utf-8
# 檔案內容讀取範例
檔案 = open("WebsterUnabridgedDictionary.txt",encoding="UTF-8")
count = 0
所有資料 = 檔案.readlines()
print("這個檔案共有:"+str(len(所有資料))+"行")

for 行數 in range(len(所有資料)):
    # 若該行的所有字母都是大寫, 表示為單字開頭
    行資料 = 所有資料[行數].rstrip()
    if(行資料.isupper()):
        # 列出單字
        #print(行資料.encode("UTF-8"))
        count += 1
    else:
        # 列出單字的所屬解釋
        #print("解釋", end="")
        #print(行資料.encode("UTF-8"))
        continue

print("單字數共有:"+str(count)+"個")
檔案.close() # 關閉檔案
</pre>
<p></p>
<h2>docx 轉 pdf</h2>
<p>用來學習 Onshape 的教學檔案格式為 docx, 以下使用 Windows 環境下的 Python3 程式, 自動進入各教學檔案目錄, 將 docx 轉為 pdf</p>
<p>首先必須以 pip install comtypes 安裝 comtypes 模組, 然後以 SciTE, 在教學檔案目錄中, 利用以下程式碼建立 docx2pdf.py 後執行, 即可將所有 56 個 docx 轉出 pdf 檔案. 之後, 可以再設法利用 <a href="https://github.com/coolwanglu/pdf2htmlEX">https://github.com/coolwanglu/pdf2htmlEX</a> 以程式方法, 直接將 pdf 轉為 html. </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sys
import os
import comtypes.client
 
wdFormatPDF = 17
 
#in_file = input("input docx")
#out_file = input("output filename")
 
def docx2pdf(in_file, out_file):
    word = comtypes.client.CreateObject('Word.Application')
    doc = word.Documents.Open(in_file)
    doc.SaveAs(out_file, FileFormat=wdFormatPDF)
    doc.Close()
    word.Quit()
 
count = 0
# traverse root directory, and list directories as dirs and files as files
for root, dirs, files in os.walk(os.getcwd()):
    #print(root)
    path = root.split('/')
    #print(path)
    #print((len(path) - 1) * '---', os.path.basename(root))
    #print(files)
    for file in files:
        #print(len(path) * '---', file)
        file_ext = file.split(".")[1]
        file_name = file.split(".")[0]
        #print(file_ext)
        if file_ext == "docx":
            count = count + 1
            in_file = path[0] + "/" + file
            #print(count,":", in_file)
            out_file = path[0] + "/" + file_name + ".pdf"
            #print(out_file)
            docx2pdf(in_file, out_file)
 
#print(count)
#docx2pdf(in_file, out_file)
print("done")</pre>
<p></p>
<h2>網際繪圖</h2>
<p>網頁中有三種基本元素 HTML5, CSS 與 Javascript, 透過 <a href="https://brython.info/">Brython</a> 或 <a href="https://github.com/fengari-lua/fengari-web">Fengari-web</a>, 使用者可以使用 Python 及 Lua 替代 Javascript.</p>
<h4>Canvas 程式庫:</h4>
<p><a href="https://github.com/konvajs/konva">https://github.com/konvajs/konva</a></p>
<p><a href="https://konvajs.github.io/docs/">https://konvajs.github.io/docs/</a></p>
<p><a href="https://www.arc.id.au/CanvasGraphics.html">https://www.arc.id.au/CanvasGraphics.html</a></p>
<p>參考資料: </p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-2463-2">Pro HTML5 with CSS, JavaScript, and Multimedia.pdf</a></p>
<p><a href="/downloads/Web%20Technology.pdf">web technology.pdf</a></p>
<p><a href="http://worrydream.com/#!/LearnableProgramming">http://worrydream.com/#!/LearnableProgramming</a> </p>
<!-- 啟動 brython() 暫時不用
<p>
<script>
window.onload=function(){
brython(1);
}
</script>
--><!-- 以下利用 Brython 程式執行繪圖 暫時不用
<p><canvas id="taiwan_flag" width="300" height="200"></canvas></p>
<p>
<script type="text/python3">
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
-->
<p><img alt="" height="333" src="/images/taiwan_flag.png" width="500"/></p>
<p>上圖原始碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- for Brython --&gt;
&lt;script src="https://scrum-3.github.io/web/brython/brython.js"&gt;&lt;/script&gt;
&lt;script src="https://scrum-3.github.io/web/brython/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;!-- 啟動 brython() --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 以下利用 Brython 程式執行繪圖 --&gt;
&lt;p&gt;&lt;canvas id="taiwan_flag" width="300" height="200"&gt;&lt;/canvas&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
&lt;/script&gt;
&lt;/p&gt;</pre>
<p>擷取網際資料:</p>
<p><a href="https://www.e-education.psu.edu/geog489/node/2331">https://www.e-education.psu.edu/geog489/node/2331</a> </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests 
from bs4 import BeautifulSoup 
 
url = "https://mdecourse.github.io/cp2018/content/index.html"
response = requests.get(url) 
soup = BeautifulSoup(response.text, 'html.parser') 
 
print(soup.find('title'))</pre>
<p>Brython 日期列印程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="https://scrum-3.github.io/web/brython/brython.js"&gt;&lt;/script&gt;
&lt;script src="https://scrum-3.github.io/web/brython/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;div id="cal2"&gt;&lt;/div&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
&lt;script type="text/python3"&gt;
from browser import document, html
import calendar
import locale
 
cal2 = document["cal2"]
 
def getClassdate(year=2018, startM=9, startD=10, w=0, note=""):
    # w=0 表示課程排在星期一
    # startM 表示開學月份, startD 表示開學日
    # note 為課程初始告示
    # default calendar MONDAY is the first day of the week
    # 每學期共有 18 週
    totalW = 18
    count = 0
    # output = "2017 Spring 2bCD (三) 08:10-12:00 各週上課日期: "
    output = note + html.BR()
    # 若必須全年搜尋則 7 改為 12, 但是因為只有 18 週, 因此邏輯要修改讓程式較快結束
    for month in range(startM, 13):
        monthArray = calendar.monthcalendar(2018, month)
        for week in range(len(monthArray)):
            weekArray = monthArray[week]
            # 只需要列出星期 (w+1)
            if weekArray[w] != 0:
                if month == startM:
                    if weekArray[w] &gt; startD:
                        count += 1
                        if count &lt;= totalW:
                            if month == 3 and weekArray[w] == 31:
                                output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + "(放假), "
                            else:
                                output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + ", "
                else:
                    count += 1
                    if count &lt;=  totalW:
                        if month == 3 and weekArray[w] == 31:
                            output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + "(放假), "
                        else:
                            output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + ", "
    cal2 &lt;= output
 
# 2b 電腦輔助設計實習 (一 w=0)
getClassdate(year=2018, startM=9, startD=9, w=0, note="2018 Fall 2bCADP (一) 09:10-12:00 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
# 1b 計算機程式 (一 w=0)
getClassdate(year=2018, startM=9, startD=9, w=0, note="2018 Fall 1bCP (一) 13:20-16:10 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
# 2a 電腦輔助設計實習 (五 w=4)
getClassdate(year=2018, startM=9, startD=9, w=4, note="2018 Fall 2aCADP (五) 09:10-12:00 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
# 1a 計算機程式 (五 w=4)
getClassdate(year=2018, startM=9, startD=9, w=4, note="2018 Fall 1aCP (五) 13:20-16:10 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
# ve1a 計算機程式 (五 w=4)
getClassdate(year=2018, startM=9, startD=9, w=4, note="2018 Fall ve1aCP (五) 18:30-20:00 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
&lt;/script&gt;</pre>
<p>
<script src="/static/konva.min.js"></script>
</p>
<div id="container1">列印結果:</div>
<div></div>
<div>
<p>2018 Fall 2bCADP (一) 09:10-12:00 各週上課日期: <br/>w1-9/10, w2-9/17, w3-9/24, w4-10/1, w5-10/8, w6-10/15, w7-10/22, w8-10/29, w9-11/5, w10-11/12, w11-11/19, w12-11/26, w13-12/3, w14-12/10, w15-12/17, w16-12/24, w17-12/31,</p>
<p>2018 Fall 1bCP (一) 13:20-16:10 各週上課日期: <br/>w1-9/10, w2-9/17, w3-9/24, w4-10/1, w5-10/8, w6-10/15, w7-10/22, w8-10/29, w9-11/5, w10-11/12, w11-11/19, w12-11/26, w13-12/3, w14-12/10, w15-12/17, w16-12/24, w17-12/31,</p>
<p>2018 Fall 2aCADP (五) 09:10-12:00 各週上課日期: <br/>w1-9/14, w2-9/21, w3-9/28, w4-10/5, w5-10/12, w6-10/19, w7-10/26, w8-11/2, w9-11/9, w10-11/16, w11-11/23, w12-11/30, w13-12/7, w14-12/14, w15-12/21, w16-12/28,</p>
<p>2018 Fall 1aCP (五) 13:20-16:10 各週上課日期: <br/>w1-9/14, w2-9/21, w3-9/28, w4-10/5, w5-10/12, w6-10/19, w7-10/26, w8-11/2, w9-11/9, w10-11/16, w11-11/23, w12-11/30, w13-12/7, w14-12/14, w15-12/21, w16-12/28,</p>
<p>2018 Fall ve1aCP (五) 18:30-20:00 各週上課日期: <br/>w1-9/14, w2-9/21, w3-9/28, w4-10/5, w5-10/12, w6-10/19, w7-10/26, w8-11/2, w9-11/9, w10-11/16, w11-11/23, w12-11/30, w13-12/7, w14-12/14, w15-12/21, w16-12/28,</p>
</div>
<p>
<script>
    var width = window.innerWidth;
    var height = window.innerHeight;

    var stage = new Konva.Stage({
      container: 'container1',
      width: 200,
      height: 200
    });

    var layer = new Konva.Layer();

    var rect = new Konva.Rect({
      x: 50,
      y: 50,
      width: 100,
      height: 50,
      fill: 'green',
      stroke: 'black',
      strokeWidth: 4
    });

    // add the shape to the layer
    layer.add(rect);

    // add the layer to the stage
    stage.add(layer);
  </script>
</p>
<div id="container2"></div>
<p>
<script>
    var width = window.innerWidth;
    var height = window.innerHeight;
    
    var stage = new Konva.Stage({
      container: 'container2',
      width: 300,
      height: 300
    });

    var layer = new Konva.Layer();

    var circle = new Konva.Circle({
      x: 150,
      y: 150,
      radius: 70,
      fill: 'red',
      stroke: 'black',
      strokeWidth: 4
    });

    // add the shape to the layer
    layer.add(circle);

    // add the layer to the stage
    stage.add(layer);
  </script>
</p>
<h2>GUI 繪圖</h2>
<p>PyQt5 與 matplotlib:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python
#-*- coding:utf-8 -*-

import random

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure

from PyQt5 import QtCore #conda install pyqt
from PyQt5 import QtWidgets

class MatplotlibWidget(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__()

        self.figure = Figure()
        self.canvas = FigureCanvasQTAgg(self.figure)

        self.axis = self.figure.add_subplot(111)

        self.layoutVertical = QtWidgets.QVBoxLayout(self)#QVBoxLayout
        self.layoutVertical.addWidget(self.canvas)

class ThreadSample(QtCore.QThread):
    newSample = QtCore.pyqtSignal(list)

    def __init__(self, parent=None):
        super(ThreadSample, self).__init__(parent)

    def run(self):
        randomSample = random.sample(range(0, 10), 10)

        self.newSample.emit(randomSample)

class MyWindow(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__()

        self.pushButtonPlot = QtWidgets.QPushButton(self)
        self.pushButtonPlot.setText("Plot")
        self.pushButtonPlot.clicked.connect(self.on_pushButtonPlot_clicked)

        self.matplotlibWidget = MatplotlibWidget(self)

        self.layoutVertical = QtWidgets.QVBoxLayout(self)
        self.layoutVertical.addWidget(self.pushButtonPlot)
        self.layoutVertical.addWidget(self.matplotlibWidget)

        self.threadSample = ThreadSample(self)
        self.threadSample.newSample.connect(self.on_threadSample_newSample)
        self.threadSample.finished.connect(self.on_threadSample_finished)

    @QtCore.pyqtSlot()
    def on_pushButtonPlot_clicked(self):
        self.samples = 0
        self.matplotlibWidget.axis.clear()
        self.threadSample.start()

    @QtCore.pyqtSlot(list)
    def on_threadSample_newSample(self, sample):
        self.matplotlibWidget.axis.plot(sample)
        self.matplotlibWidget.canvas.draw()

    @QtCore.pyqtSlot()
    def on_threadSample_finished(self):
        self.samples += 1
        if self.samples &lt;= 2:
            self.threadSample.start()

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.resize(666, 333)
    main.show()

    sys.exit(app.exec())</pre>
<h3>QPainter</h3>
<p>PyQt5 共有三種不同的繪圖 API, 即透過 QPaintDevice 子類別 QWidget 繪圖, QGraphicsScene Canvas 繪圖以及 QtQuick 繪圖.</p>
<p>QWidget 用來繪製典型的 GUI 方形元件, 例如: 按鈕, 查核表單, 下拉式表單等. 因為 QWidget 部件為 QObject 衍生物件, 因此可以直接使用 signals/slots 進行配置.</p>
<p>QGraphicsScene 則為繪圖場景, 提供場景的上下左右捲動, 縮放與旋轉功能. 而視圖為獨立物件, 因為 QGraphicsItem 並非從 QObject 所衍生, 因此無法直接透過 signals/slots 進行配置, 而必須透過 QGraphicsObject 間接配置.</p>
<p>QGraphicsScene 繪圖除了使用內建的 lines, rectangles 等外, 若需要執行客製化繪圖, 可利用 QGraphicsItem 物件中的 paint 方法, 以 QPainter 繪圖.</p>
<p>QtQuick 則是最新加入的繪圖 API, 自 Qt5 版本才納入, 採用 Javascript 技術, 繪圖效率比前兩項更高.採用 QML 而非 C++, 因此可以簡單快速完成所需繪圖內容. QtQuick 除了使用 QML 場景繪圖外, 也可以採 QPainter 繪圖.</p>
<h4><a href="http://doc.qt.io/qt-5/qwidget.html#details">QWidget</a></h4>
<p>Since QWidget is a subclass of QPaintDevice, subclasses can be used to display custom content that is composed using a series of painting operations with an instance of the QPainter class. This approach contrasts with the canvas-style approach used by the Graphics View Framework where items are added to a scene by the application and are rendered by the framework itself.</p>
<p>Each widget performs all painting operations from within its paintEvent() function. This is called whenever the widget needs to be redrawn, either as a result of some external change or when requested by the application.</p>
<p>The QPainter class performs low-level painting on widgets and other paint devices.</p>
<p>QPainter provides highly optimized functions to do most of the drawing GUI programs require. It can draw everything from simple lines to complex shapes like pies and chords. It can also draw aligned text and pixmaps. Normally, it draws in a "natural" coordinate system, but it can also do view and world transformation. QPainter can operate on any object that inherits the QPaintDevice class.</p>
<p>The common use of QPainter is inside a widget's paint event: Construct and customize (e.g. set the pen or the brush) the painter. Then draw. Remember to destroy the QPainter object after drawing.</p>
<p>Every widget in QT5 has a method called paintEvent(…) that is called when the widget needs to be drawn (for instance, when its drawn for the first time or when the size of the widget has changed). The only parameter passed to this method is an event object that can be used to get the current dimensions of the content area that we can draw on by calling its rect() method. That means when we want to use a widget for drawing something on it, we derive a new class from the respective widget class and overwrite the paintEvent(…) method with our own implementation that takes care of the drawing. To do the actual drawing, we need to create an object of the class QPainter and then use the drawing methods it provides. Here is a simple example; the details will be explained below:</p>
<p>Let’s look at the coarse structure first: We are defining a new class derived from QWidget and only overwrite the<span> </span><em>paintEvent(…)</em><span> </span>method, meaning in all other aspects this widget will behave like an instance of QWidget. In the main code, we simply create an instance of our new widget class and make it show up on the screen. Now, let’s look at the body of method<span> </span><em>paintEvent(…)</em>: The first thing to note here is that all drawing needs to be preceded by the creation of the QPainter object (line 31) and the call of its<span> </span><em>begin(…)</em>method using “self” as the parameter standing for the widget object itself because that is what we want to draw on (line 32). To conclude the drawing, we need to call the<span> </span><em>end()</em><span> </span>method of the QPainter object (line 40).</p>
<p>Next, let us look at the methods of the QPainter object we are invoking that all start with “draw…”. These are the methods provided by QPainter to draw different kinds of entities like text, circles or ellipses, rectangles, images, etc. We here use the method<span> </span><em>drawText(…)</em><span> </span>twice to produce the two different lines of text (lines 34 and 35). The difference between the two calls is that in the first one we use absolute coordinates, so the text will be drawn at pixel coordinates 20, 20 counting from the top left corner of the widget’s content area. The second call takes a rectangle (class QRectF) as the first parameter and then draws the text within this rectangle based on the additional text options given as the second parameter which here ask for the text to be centered within the rectangle. This is an example where a class provides several methods with the same name but different parameters, something that is called<span> </span><em>overloading</em>. If you check out the<span> </span><a class="ext" href="http://pyqt.sourceforge.net/Docs/PyQt4/qpainter.html" rel="noopener noreferrer" target="_blank">documentation of QPainter<span aria-label="(link is external)" class="ext"></span></a>, you will see that most methods come in different versions. Now go ahead and resize the window a bit and see how the text produced by the first call always remains at the same absolute position, while that from the second call always stays centered within the available area.</p>
<p>In line 37, we use the method<span> </span><em>drawEllipse(…)</em><span> </span>to produce the circle. There is no special circle drawing method, so we use this one and then provide the same number for the two radii. To draw the rectangle, we use the method<span> </span><em>drawRect(…)</em><span> </span>in the version that takes the coordinates of the corner plus width and height values as parameters.</p>
<p>The remaining calls of methods of the QPainter object are there to affect the way the objects are drawn, e.g. their color. Colors inPyQt5 are represented by instances of the class QColor. In line 33, we create a new QColor object by providing values between 0 and 255 for the color’s red, green, and blue values. Since the red value is 200 and both green and blue are zero, the overall color will be the kind of red that the text appears in. QT5 also has a number of predefined colors that we are using in lines 36 (Qt.darkGreen) and 38 (Qt.blue).</p>
<p>QPainter uses objects of class<span> </span><a class="ext" href="http://pyqt.sourceforge.net/Docs/PyQt4/qpen.html" rel="noopener noreferrer" target="_blank">QPen<span aria-label="(link is external)" class="ext"></span></a><span> </span>and<span> </span><a class="ext" href="http://pyqt.sourceforge.net/Docs/PyQt4/qbrush.html" rel="noopener noreferrer" target="_blank">QBrush<span aria-label="(link is external)" class="ext"></span></a><span> </span>to draw the boundary and inside of a shape. In line 33, it is stated that a pen with red color should be used for the following drawing operations. As a result, both text lines appear in red. In line 36, we create a new QPen object to be used by the QPainter and specify that the color should be dark green, and the line width should be 4. This is used for drawing the circle. In line 38, we do the same with color blue and line width 2, and, in addition, we say that sharp corners should be used for the connection between to adjacent line segments of the shape’s border. This is used for drawing the rectangle. We won’t go further into the details of the different pen and brush properties here but the documentation of the QPen and QBrush classes provide some more examples and explanation. In addition, you will see more use cases in the walkthrough in the next section.</p>
<p>直接繪圖:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5.QtWidgets import (QGraphicsView,
    QGraphicsScene,QApplication)
from PyQt5.QtCore import (QLineF)
    
if __name__ == '__main__':
    import sys
    # 建立應用程式
    app = QApplication(sys.argv)
    # 建立場景
    scene = QGraphicsScene()
    # 在場景中加入字串
    scene.addText("場景中的字串!")
    scene.addLine(QLineF(0, 0, 100, 100))
    scene.addLine(QLineF(100, 0, 0, 100))
    # 將場景放入視圖案例中
    view = QGraphicsView(scene)
    #顯示視圖
    view.show()
    # 執行應用程式
    sys.exit(app.exec())</pre>
<p>在 QWidget 中以 QPainter 繪圖 (必須採 paintEvent 方法)</p>
<p>比較採用 Canvas based 的 QGraphicsScene 放入 QGraphicsView 繪圖差異.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5.QtWidgets import (QGraphicsView,
    QGraphicsScene,QApplication, QWidget)
from PyQt5.QtCore import (Qt, QLineF, QPoint)
from PyQt5.QtGui import (QPainter, QPen, QColor)
     
if __name__ == '__main__':
    import sys
    # 建立應用程式
    app = QApplication(sys.argv)
    # 以 canvas 繪圖模式建立場景
    scene = QGraphicsScene()
    # 在場景中加入字串
    scene.addText("場景中的字串!")
    scene.addLine(QLineF(0, 0, 100, 100))
    scene.addLine(QLineF(100, 0, 0, 100))
    # 將場景放入視圖案例中-方法一
    # view = QGraphicsView(scene)
    # 將場景放入視圖案例中-方法二, 先建 view 後, 
    # 以 setScene() 將 scene 置入
    view = QGraphicsView()
    view.setScene(scene)
    
    # 因 QWidget 為 QPaintDevice subclass, 
    # 可以直接在 QWidget 上以 QPainter 繪圖
    # 建立 QWidget 物件, 以 paintEvent 繪圖
    class window(QWidget):
        def __init__(self):
            super().__init__()

        def paintEvent(self, event): 
            qp = QPainter() 
            qp.begin(self) 
            qp.setPen(QColor(200,0,0)) 
            qp.drawText(20,20, "在固定座標繪字串") 
            qp.drawText(event.rect(), Qt.AlignCenter, "在繪圖區正中央繪字串") 
            qp.setPen(QPen(Qt.darkGreen, 4)) 
            qp.drawEllipse(QPoint(50,60),30,30) 
            qp.setPen(QPen(Qt.blue, 2, join = Qt.MiterJoin)) 
            qp.drawRect(20,60,50,80) 
            qp.end() 
    # 以 window 類別案例建立 win 物件
    win = window()
    # 顯示 win 物件內容
    win.show()
    # 以 QGraphicsView 作為視窗, 將視圖內容於視窗中央顯示
    #view.show()
    # 執行應用程式
    sys.exit(app.exec())</pre>
<p>以 QPainter 繪圖</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sys
from PyQt5.QtWidgets import QWidget, QApplication
from PyQt5.QtGui import QPainter, QColor, QFont
from PyQt5.QtCore import Qt

class Example(QWidget):
    
    def __init__(self):
        super().__init__()
        
        self.initUI()
        
        
    def initUI(self):      
        
        self.text = "Author"

        self.setGeometry(300, 300, 280, 170)
        self.setWindowTitle('Drawing text')
        self.show()
        

    def paintEvent(self, event):

        qp = QPainter()
        qp.begin(self)
        self.drawText(event, qp)
        qp.end()
        
        
    def drawText(self, event, qp):
      
        qp.setPen(QColor(168, 34, 3))
        qp.setFont(QFont('Decorative', 10))
        qp.drawText(event.rect(), Qt.AlignCenter, self.text)        
                
        
if __name__ == '__main__':
    
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec())</pre>
<p>Draw points:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5.QtWidgets import QWidget, QApplication
from PyQt5.QtGui import QPainter
from PyQt5.QtCore import Qt
import sys, random

class Example(QWidget):
    
    def __init__(self):
        super().__init__()
        
        self.initUI()
        
        
    def initUI(self):      

        self.setGeometry(300, 300, 300, 190)
        self.setWindowTitle('Points')
        self.show()
        

    def paintEvent(self, e):

        qp = QPainter()
        qp.begin(self)
        self.drawPoints(qp)
        qp.end()
        
        
    def drawPoints(self, qp):
      
        qp.setPen(Qt.red)
        size = self.size()
        
        for i in range(1000):
            x = random.randint(1, size.width()-1)
            y = random.randint(1, size.height()-1)
            qp.drawPoint(x, y)     
                
        
if __name__ == '__main__':
    
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec())</pre>
<p>Colors:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5.QtWidgets import QWidget, QApplication
from PyQt5.QtGui import QPainter, QColor, QBrush
import sys

class Example(QWidget):
    
    def __init__(self):
        super().__init__()
        
        self.initUI()
        
        
    def initUI(self):      

        self.setGeometry(300, 300, 350, 100)
        self.setWindowTitle('Colours')
        self.show()


    def paintEvent(self, e):

        qp = QPainter()
        qp.begin(self)
        self.drawRectangles(qp)
        qp.end()

        
    def drawRectangles(self, qp):
      
        col = QColor(0, 0, 0)
        col.setNamedColor('#d4d4d4')
        qp.setPen(col)

        qp.setBrush(QColor(200, 0, 0))
        qp.drawRect(10, 15, 90, 60)

        qp.setBrush(QColor(255, 80, 0, 160))
        qp.drawRect(130, 15, 90, 60)

        qp.setBrush(QColor(25, 0, 90, 200))
        qp.drawRect(250, 15, 90, 60)
              
        
if __name__ == '__main__':
    
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec())</pre>
<p>QPen:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5.QtWidgets import QWidget, QApplication
from PyQt5.QtGui import QPainter, QPen
from PyQt5.QtCore import Qt
import sys

class Example(QWidget):
    
    def __init__(self):
        super().__init__()
        
        self.initUI()
        
        
    def initUI(self):      

        self.setGeometry(300, 300, 280, 270)
        self.setWindowTitle('Pen styles')
        self.show()
        

    def paintEvent(self, e):

        qp = QPainter()
        qp.begin(self)
        self.drawLines(qp)
        qp.end()
        
        
    def drawLines(self, qp):
      
        pen = QPen(Qt.black, 2, Qt.SolidLine)

        qp.setPen(pen)
        qp.drawLine(20, 40, 250, 40)

        pen.setStyle(Qt.DashLine)
        qp.setPen(pen)
        qp.drawLine(20, 80, 250, 80)

        pen.setStyle(Qt.DashDotLine)
        qp.setPen(pen)
        qp.drawLine(20, 120, 250, 120)

        pen.setStyle(Qt.DotLine)
        qp.setPen(pen)
        qp.drawLine(20, 160, 250, 160)

        pen.setStyle(Qt.DashDotDotLine)
        qp.setPen(pen)
        qp.drawLine(20, 200, 250, 200)

        pen.setStyle(Qt.CustomDashLine)
        pen.setDashPattern([1, 4, 5, 4])
        qp.setPen(pen)
        qp.drawLine(20, 240, 250, 240)
              
        
if __name__ == '__main__':
    
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec())</pre>
<p>Brush:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5.QtWidgets import QWidget, QApplication
from PyQt5.QtGui import QPainter, QBrush
from PyQt5.QtCore import Qt
import sys

class Example(QWidget):
    
    def __init__(self):
        super().__init__()
        
        self.initUI()
        
        
    def initUI(self):      

        self.setGeometry(300, 300, 355, 280)
        self.setWindowTitle('Brushes')
        self.show()
        

    def paintEvent(self, e):

        qp = QPainter()
        qp.begin(self)
        self.drawBrushes(qp)
        qp.end()
        
        
    def drawBrushes(self, qp):
      
        brush = QBrush(Qt.SolidPattern)
        qp.setBrush(brush)
        qp.drawRect(10, 15, 90, 60)

        brush.setStyle(Qt.Dense1Pattern)
        qp.setBrush(brush)
        qp.drawRect(130, 15, 90, 60)

        brush.setStyle(Qt.Dense2Pattern)
        qp.setBrush(brush)
        qp.drawRect(250, 15, 90, 60)

        brush.setStyle(Qt.DiagCrossPattern)
        qp.setBrush(brush)
        qp.drawRect(10, 105, 90, 60)

        brush.setStyle(Qt.Dense5Pattern)
        qp.setBrush(brush)
        qp.drawRect(130, 105, 90, 60)

        brush.setStyle(Qt.Dense6Pattern)
        qp.setBrush(brush)
        qp.drawRect(250, 105, 90, 60)

        brush.setStyle(Qt.HorPattern)
        qp.setBrush(brush)
        qp.drawRect(10, 195, 90, 60)

        brush.setStyle(Qt.VerPattern)
        qp.setBrush(brush)
        qp.drawRect(130, 195, 90, 60)

        brush.setStyle(Qt.BDiagPattern)
        qp.setBrush(brush)
        qp.drawRect(250, 195, 90, 60)
              
        
if __name__ == '__main__':
    
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec())</pre>
<p>Bezier curve:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5.QtWidgets import QWidget, QApplication
from PyQt5.QtGui import QPainter, QPainterPath
from PyQt5.QtCore import Qt
import sys

class Example(QWidget):
    
    def __init__(self):
        super().__init__()
        
        self.initUI()
        
        
    def initUI(self):      

        self.setGeometry(300, 300, 380, 250)
        self.setWindowTitle('Bézier curve')
        self.show()
        

    def paintEvent(self, e):

        qp = QPainter()
        qp.begin(self)
        qp.setRenderHint(QPainter.Antialiasing)
        self.drawBezierCurve(qp)
        qp.end()
        
        
    def drawBezierCurve(self, qp):
      
        path = QPainterPath()
        path.moveTo(30, 30)
        path.cubicTo(30, 30, 200, 350, 350, 30)
        
        qp.drawPath(path)
              
        
if __name__ == '__main__':
    
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec())</pre>
<p>QPainter:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sys
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QLabel
from PyQt5.QtGui import QPainter, QColor, QPen
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt
import random
 
class App(QMainWindow):
 
    def __init__(self):
        super().__init__()
        self.title = 'PyQt paint example'
        self.left = 10
        self.top = 10
        self.width = 440
        self.height = 280
        self.initUI()
 
    def initUI(self):
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)
 
        # Set window background color
        self.setAutoFillBackground(True)
        p = self.palette()
        p.setColor(self.backgroundRole(), Qt.white)
        self.setPalette(p)
 
        # Add paint widget and paint
        self.m = PaintWidget(self)
        self.m.move(0,0)
        self.m.resize(self.width,self.height)
 
        self.show()
 
 
class PaintWidget(QWidget):
   def paintEvent(self, event):
      qp = QPainter(self)
 
      qp.setPen(Qt.black)
      size = self.size()
 
      for i in range(1024):
          x = random.randint(1, size.width()-1)
          y = random.randint(1, size.height()-1)
          qp.drawPoint(x, y)
 
 
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec())</pre>
<p>Screen Shot:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">"""Screenshot and that kind of stuff."""
import io
from PyQt5.QtCore import QUrl, QIODevice, QBuffer, QByteArray
from PyQt5.QtWidgets import QApplication
from PyQt5.QtGui import QImage, QPainter
from PyQt5.QtWebEngineWidgets import QWebEngineView

class Screenshot(QWebEngineView):
    def __init__(self):
        self.app = QApplication([])
        QWebEngineView.__init__(self)
        self._loaded = False
        self.loadFinished.connect(self._load_finished)
        print('--finish init')

    def capture(self, url):
        print('--load')
        self.load(QUrl(url))
        self.wait_load()
        self.show()
        size = self.page().contentsSize()
        self.page().view().resize(*[int(s) for s in [size.width(), size.height()]])
        print('--take image')
        image = QImage(800, 800, QImage.Format_ARGB32)
        painter = QPainter(image)
        print('--render')
        self.page().view().render(painter)
        painter.end()
        print('Saving QImage')
        img_bytes = QByteArray()
        bio = QBuffer(img_bytes)
        bio.open(QIODevice.WriteOnly)
        image.save(bio, 'PNG')
        return img_bytes

    def wait_load(self):
        while not self._loaded:
            self.app.processEvents()
        self._loaded = False

    def _load_finished(self, result):
        self._loaded = True</pre>
<p>Reference:</p>
<p><a href="https://github.com/pyqt/examples">https://github.com/pyqt/examples</a> </p>
<p><a href="https://github.com/mfitzp/15-minute-apps">https://github.com/mfitzp/15-minute-apps</a> </p>
<h3>靜態繪圖</h3>
<h4>Canvas based 繪圖</h4>
<p>參考: <a href="http://doc.qt.io/qt-5/graphicsview.html">http://doc.qt.io/qt-5/graphicsview.html</a> </p>
<p>QtWidgets.QGraphicsScene (場景)</p>
<p>QtWidgets.QGraphicsView (顯示區)</p>
<p>QtWidgets.QGraphicsItem (場景中的元件) - <a href="http://doc.qt.io/qt-5/qgraphicsitem.html#details">客製化</a>需要建立 boundingRect() 與 paint()</p>
<p>Qt 內建採 <span><a href="https://en.wikipedia.org/wiki/Binary_space_partitioning">Binary Space Partitioning Tree</a>  方式管理場景中的元件, 可以即時顯示非常多的場景元件.</span></p>
<p><span>同一場景可以透過多個不同的 View 加以顯示, 而座標系統則分為: 以 Item 中心為原點的 Item 座標系統、Scene 座標系統, 以及 View 座標系統等三種.  View 座標系統可以透過 mapToScene() 方法轉為 Scene 座標系統.</span></p>
<p>繪圖片段:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">super(Dialog, self).__init__(parent)
self.setupUi(self)
scene = QtWidgets.QGraphicsScene()
self.graphicsView.setScene(scene)
pen = QtGui.QPen(QtCore.Qt.blue)

side = 20

for i in range(16):
    for j in range(16):
        r = QtCore.QRectF(QtCore.QPointF(i*side, j*side), QtCore.QSizeF(side, side))
        scene.addRect(r, pen)</pre>
<h4>動態繪圖</h4>
<p><a href="http://doc.qt.io/qt-5/animation-overview.html">http://doc.qt.io/qt-5/animation-overview.html</a> </p>
<p>ball.png</p>
<p><img alt="" height="20" src="/images/ball.png" width="20"/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/python3
# -*- coding: utf-8 -*-

'''
ZetCode Advanced PyQt5 tutorial

This programs animates a ball object 
along a curve.

Author: Jan Bodnar
Website: zetcode.com
Last edited: August 2017
'''

from PyQt5.QtWidgets import QApplication, QWidget, QLabel
from PyQt5.QtGui import QPainter, QPixmap, QPainterPath
from PyQt5.QtCore import QObject, QPointF, QPropertyAnimation, pyqtProperty
import sys

                              
class Ball(QLabel):
    
    def __init__(self, parent):
        super().__init__(parent)
        
        pix = QPixmap("ball.png")
        self.h = pix.height()
        self.w = pix.width()
        
        self.setPixmap(pix)
        
    def _set_pos(self, pos):
        
        self.move(pos.x() - self.w/2, pos.y() - self.h/2)

    pos = pyqtProperty(QPointF, fset=_set_pos)   
       
    
class Example(QWidget):
    
    def __init__(self):
        super().__init__()

        self.initView()
        self.initAnimation()
        
        
    def initView(self):    
        
        self.path = QPainterPath()
        self.path.moveTo(30, 30)
        self.path.cubicTo(30, 30, 200, 350, 350, 30)        
        
        self.ball = Ball(self)

        self.ball.pos = QPointF(30, 30)
        
        self.setWindowTitle("Animation along curve")
        self.setGeometry(300, 300, 400, 300)
        self.show()
        
        
    def paintEvent(self, e):    
        
        qp = QPainter()
        qp.begin(self)
        qp.setRenderHint(QPainter.Antialiasing)   
        qp.drawPath(self.path)
        qp.end()             

        
    def initAnimation(self):
        
        self.anim = QPropertyAnimation(self.ball, b'pos')
        self.anim.setDuration(7000)
        
        self.anim.setStartValue(QPointF(30, 30))
        
        vals = [p/100 for p in range(0, 101)]

        for i in vals:
            self.anim.setKeyValueAt(i, self.path.pointAtPercent(i))  
                
        self.anim.setEndValue(QPointF(350, 30))        
        self.anim.start()
        
                  
if __name__ == '__main__':
    
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec())</pre>
<p></p>
<h3>Moveblocks</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5.QtCore import (QAbstractTransition, QEasingCurve, QEvent,
        QParallelAnimationGroup, QPropertyAnimation, qrand, QRect,
        QSequentialAnimationGroup, qsrand, QState, QStateMachine, Qt, QTime,
        QTimer)
from PyQt5.QtWidgets import (QApplication, QGraphicsScene, QGraphicsView,
        QGraphicsWidget)


class StateSwitchEvent(QEvent):
    StateSwitchType = QEvent.User + 256

    def __init__(self, rand=0):
        super().__init__(StateSwitchEvent.StateSwitchType)

        self.m_rand = rand

    def rand(self):
        return self.m_rand


class QGraphicsRectWidget(QGraphicsWidget):
    def paint(self, painter, option, widget):
        painter.fillRect(self.rect(), Qt.blue)


class StateSwitchTransition(QAbstractTransition):
    def __init__(self, rand):
        super().__init__()

        self.m_rand = rand

    def eventTest(self, event):
        return (event.type() == StateSwitchEvent.StateSwitchType and
                event.rand() == self.m_rand)

    def onTransition(self, event):
        pass


class StateSwitcher(QState):
    def __init__(self, machine):
        super().__init__(machine)

        self.m_stateCount = 0
        self.m_lastIndex = 0

    def onEntry(self, event):
        n = qrand() % self.m_stateCount + 1
        while n == self.m_lastIndex:
            n = qrand() % self.m_stateCount + 1

        self.m_lastIndex = n
        self.machine().postEvent(StateSwitchEvent(n))

    def onExit(self, event):
        pass

    def addState(self, state, animation):
        self.m_stateCount += 1
        trans = StateSwitchTransition(self.m_stateCount)
        trans.setTargetState(state)
        self.addTransition(trans)
        trans.addAnimation(animation)


def createGeometryState(w1, rect1, w2, rect2, w3, rect3, w4, rect4, parent):
    result = QState(parent)

    result.assignProperty(w1, 'geometry', rect1)
    result.assignProperty(w1, 'geometry', rect1)
    result.assignProperty(w2, 'geometry', rect2)
    result.assignProperty(w3, 'geometry', rect3)
    result.assignProperty(w4, 'geometry', rect4)

    return result


if __name__ == '__main__':

    import sys

    app = QApplication(sys.argv)

    button1 = QGraphicsRectWidget()
    button2 = QGraphicsRectWidget()
    button3 = QGraphicsRectWidget()
    button4 = QGraphicsRectWidget()
    button2.setZValue(1)
    button3.setZValue(2)
    button4.setZValue(3)

    scene = QGraphicsScene(0, 0, 300, 300)
    scene.setBackgroundBrush(Qt.black)
    scene.addItem(button1)
    scene.addItem(button2)
    scene.addItem(button3)
    scene.addItem(button4)

    window = QGraphicsView(scene)
    window.setFrameStyle(0)
    window.setAlignment(Qt.AlignLeft | Qt.AlignTop)
    window.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
    window.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

    machine = QStateMachine()

    group = QState()
    timer = QTimer()
    timer.setInterval(1250)
    timer.setSingleShot(True)
    group.entered.connect(timer.start)

    state1 = createGeometryState(button1, QRect(100, 0, 50, 50), button2,
            QRect(150, 0, 50, 50), button3, QRect(200, 0, 50, 50), button4,
            QRect(250, 0, 50, 50), group)

    state2 = createGeometryState(button1, QRect(250, 100, 50, 50), button2,
            QRect(250, 150, 50, 50), button3, QRect(250, 200, 50, 50), button4,
            QRect(250, 250, 50, 50), group)

    state3 = createGeometryState(button1, QRect(150, 250, 50, 50), button2,
            QRect(100, 250, 50, 50), button3, QRect(50, 250, 50, 50), button4,
            QRect(0, 250, 50, 50), group)

    state4 = createGeometryState(button1, QRect(0, 150, 50, 50), button2,
            QRect(0, 100, 50, 50), button3, QRect(0, 50, 50, 50), button4,
            QRect(0, 0, 50, 50), group)

    state5 = createGeometryState(button1, QRect(100, 100, 50, 50), button2,
            QRect(150, 100, 50, 50), button3, QRect(100, 150, 50, 50), button4,
            QRect(150, 150, 50, 50), group)

    state6 = createGeometryState(button1, QRect(50, 50, 50, 50), button2,
            QRect(200, 50, 50, 50), button3, QRect(50, 200, 50, 50), button4,
            QRect(200, 200, 50, 50), group)

    state7 = createGeometryState(button1, QRect(0, 0, 50, 50), button2,
            QRect(250, 0, 50, 50), button3, QRect(0, 250, 50, 50), button4,
            QRect(250, 250, 50, 50), group)

    group.setInitialState(state1)

    animationGroup = QParallelAnimationGroup()
    anim = QPropertyAnimation(button4, b'geometry')
    anim.setDuration(1000)
    anim.setEasingCurve(QEasingCurve.OutElastic)
    animationGroup.addAnimation(anim)

    subGroup = QSequentialAnimationGroup(animationGroup)
    subGroup.addPause(100)
    anim = QPropertyAnimation(button3, b'geometry')
    anim.setDuration(1000)
    anim.setEasingCurve(QEasingCurve.OutElastic)
    subGroup.addAnimation(anim)

    subGroup = QSequentialAnimationGroup(animationGroup)
    subGroup.addPause(150)
    anim = QPropertyAnimation(button2, b'geometry')
    anim.setDuration(1000)
    anim.setEasingCurve(QEasingCurve.OutElastic)
    subGroup.addAnimation(anim)

    subGroup = QSequentialAnimationGroup(animationGroup)
    subGroup.addPause(200)
    anim = QPropertyAnimation(button1, b'geometry')
    anim.setDuration(1000)
    anim.setEasingCurve(QEasingCurve.OutElastic)
    subGroup.addAnimation(anim)

    stateSwitcher = StateSwitcher(machine)
    group.addTransition(timer.timeout, stateSwitcher)
    stateSwitcher.addState(state1, animationGroup)
    stateSwitcher.addState(state2, animationGroup)
    stateSwitcher.addState(state3, animationGroup)
    stateSwitcher.addState(state4, animationGroup)
    stateSwitcher.addState(state5, animationGroup)
    stateSwitcher.addState(state6, animationGroup)
    stateSwitcher.addState(state7, animationGroup)

    machine.addState(group)
    machine.setInitialState(group)
    machine.start()

    window.resize(300, 300)
    window.show()

    qsrand(QTime(0, 0, 0).secsTo(QTime.currentTime()))

    sys.exit(app.exec())</pre>
<p>Coloe animation</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5.QtWidgets import (QWidget, QApplication, QPushButton, 
        QLabel, QHBoxLayout, QSizePolicy)
from PyQt5.QtGui import QColor
from PyQt5.QtCore import QPropertyAnimation, pyqtProperty
import sys


class MyLabel(QLabel):
    
    def __init__(self, text):
        super().__init__(text)

    def _set_color(self, col):
        
        palette = self.palette()
        palette.setColor(self.foregroundRole(), col)
        self.setPalette(palette)

    color = pyqtProperty(QColor, fset=_set_color)


class Example(QWidget):

    def __init__(self):
        super().__init__()


        self.initUI()
        
        
    def initUI(self):     

        hbox = QHBoxLayout(self)
        
        self.button = QPushButton("Start", self)
        self.button.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        hbox.addWidget(self.button)
        
        hbox.addSpacing(40)

        self.label = MyLabel("Summer")
        font = self.label.font()
        font.setPointSize(35)
        self.label.setFont(font)
        hbox.addWidget(self.label)

        self.anim = QPropertyAnimation(self.label, b"color")
        self.anim.setDuration(2500)
        self.anim.setLoopCount(2)
        self.anim.setStartValue(QColor(0, 0, 0))
        self.anim.setEndValue(QColor(255, 255, 255))

        self.button.clicked.connect(self.anim.start)
        
        self.setGeometry(300, 300, 380, 250)
        self.setWindowTitle('Color anim')
        self.show()    
        
if __name__ == "__main__":
    
    app = QApplication([])
    ex = Example()
    ex.show()
    app.exec()</pre>
<p></p>
<h3>PyQt5 範例</h3>
<p>參考: <a href="https://www.e-education.psu.edu/geog489/node/2292">https://www.e-education.psu.edu/geog489/node/2292</a> </p>
<p>利用 PyQt5 建立程式, 都需要透過 QApplication 類別建立應用程式物件, 並且以 exec() 進入主事件迴圈, 完成所需的初始化與後台事物管理. </p>
<p>此一透過 QApplication 建立的 PyQt5 應用程式物件, 對應至一變數名稱 app 後,  接著設置所需的 GUI 元件, 並在程式最後, 調用此應用程式物件的 exec() 方法執行, 以及處理用戶輸入.</p>
<p>QApplication  與 QWidget 類別隸屬於 PyQt5.QtWidgets 模組.</p>
<p>app.exec() 執行後的傳回值 0, 用於從 Python 標準程式庫調用 sys.exit() 函式正常退出 Python 程式.</p>
<p><a href="http://doc.qt.io/qt-5/qapplication.html#exec">QApplication::exec() 說明文件</a></p>
<p><a href="https://docs.python.org/3/library/sys.html">sys.exit() 說明文件</a></p>
<p>Label, push button, line edit, layout, signal and slot:</p>
<p><a href="https://docs.python.org/3/tutorial/classes.html">https://docs.python.org/3/tutorial/classes.html</a> </p>
<p>PyQt5 程式流程:</p>
<ol>
<li>建立 QApplication 物件</li>
<li> 建立主應用程式視窗</li>
<li>設定主視窗參數, 建立或新增子部件</li>
<li>顯示主視窗</li>
<li>啟動 QApplication 物件</li>
</ol>
<p>PyQt5 主要模組:</p>
<ol>
<li>QtCore – 核心非 GUI 工具</li>
<li>QtGui – 視窗系統整合, 事件處理, 2D 繪圖, 影像處理與字型</li>
<li>QtWidgets – 基本 UI 元件, 包含標籤, 按鈕, 文字輸入, 數列, 表格, 表單與工具箱</li>
</ol>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5.QtCore import *
from PyQt5.QtWidgets import *

# 繼承 QWidget 部件, 建立 Form 類別
class Form(QWidget):
    # 類別建構子, 建立案例時會自動執行
    # 無 parent 的 widget 為 window
    def __init__(self, parent=None):
        # 執行父物件的建構子
        super().__init__()

        # 建立 Label 物件
        nameLabel = QLabel("Name:")
        # 建立 Line Edit 物件
        # instance variable
        self.nameLine = QLineEdit()
        self.submitButton = QPushButton("&amp;Submit")

        buttonLayout1 = QVBoxLayout()
        buttonLayout1.addWidget(nameLabel)
        buttonLayout1.addWidget(self.nameLine)
        buttonLayout1.addWidget(self.submitButton)

        self.submitButton.clicked.connect(self.submitContact)

        mainLayout = QGridLayout()
        # mainLayout.addWidget(nameLabel, 0, 0)
        mainLayout.addLayout(buttonLayout1, 0, 1)

        self.setLayout(mainLayout)
        self.setWindowTitle("Hello Qt")

    def submitContact(self):
        name = self.nameLine.text()

        if name == "":
            QMessageBox.information(self, "Empty Field",
                                    "Please enter a name and address.")
            return
        else:
            QMessageBox.information(self, "Success!",
                                    "Hello %s!" % name)

if __name__ == '__main__':
    import sys

    app = QApplication(sys.argv)

    screen = Form()
    screen.show()

    sys.exit(app.exec())</pre>
<p><a href="https://www.thehackeruniversity.com/2014/01/26/pyqt5-beginner-tutorial-part-2/">Simple address book</a>:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QGridLayout, QHBoxLayout, QLabel, QLineEdit,
        QMessageBox, QPushButton, QTextEdit, QVBoxLayout, QWidget)

class SortedDict(dict):
    class Iterator(object):
        def __init__(self, sorted_dict):
            self._dict = sorted_dict
            self._keys = sorted(self._dict.keys())
            self._nr_items = len(self._keys)
            self._idx = 0

        def __iter__(self):
            return self

        def next(self):
            if self._idx &gt;= self._nr_items:
                raise StopIteration

            key = self._keys[self._idx]
            value = self._dict[key]
            self._idx += 1

            return key, value

        __next__ = next

    def __iter__(self):
        return SortedDict.Iterator(self)

    iterkeys = __iter__

class AddressBook(QWidget):
    def __init__(self, parent=None):
        super(AddressBook, self).__init__(parent)

        self.contacts = SortedDict()
        self.oldName = ''
        self.oldAddress = ''

        nameLabel = QLabel("Name:")
        self.nameLine = QLineEdit()
        self.nameLine.setReadOnly(True)

        addressLabel = QLabel("Address:")
        self.addressText = QTextEdit()
        self.addressText.setReadOnly(True)

        self.addButton = QPushButton("&amp;Add")
        self.addButton.show()
        self.submitButton = QPushButton("&amp;Submit")
        self.submitButton.hide()
        self.cancelButton = QPushButton("&amp;Cancel")
        self.cancelButton.hide()
        self.nextButton = QPushButton("&amp;Next")
        self.nextButton.setEnabled(False)
        self.previousButton = QPushButton("&amp;Previous")
        self.previousButton.setEnabled(False)

        self.addButton.clicked.connect(self.addContact)
        self.submitButton.clicked.connect(self.submitContact)
        self.cancelButton.clicked.connect(self.cancel)
        self.nextButton.clicked.connect(self.next)
        self.previousButton.clicked.connect(self.previous)

        buttonLayout1 = QVBoxLayout()
        buttonLayout1.addWidget(self.addButton, Qt.AlignTop)
        buttonLayout1.addWidget(self.submitButton)
        buttonLayout1.addWidget(self.cancelButton)
        buttonLayout1.addStretch()

        buttonLayout2 = QHBoxLayout()
        buttonLayout2.addWidget(self.previousButton)
        buttonLayout2.addWidget(self.nextButton)

        mainLayout = QGridLayout()
        mainLayout.addWidget(nameLabel, 0, 0)
        mainLayout.addWidget(self.nameLine, 0, 1)
        mainLayout.addWidget(addressLabel, 1, 0, Qt.AlignTop)
        mainLayout.addWidget(self.addressText, 1, 1)
        mainLayout.addLayout(buttonLayout1, 1, 2)
        mainLayout.addLayout(buttonLayout2, 3, 1)

        self.setLayout(mainLayout)
        self.setWindowTitle("Simple Address Book")

    def addContact(self):
        self.oldName = self.nameLine.text()
        self.oldAddress = self.addressText.toPlainText()

        self.nameLine.clear()
        self.addressText.clear()

        self.nameLine.setReadOnly(False)
        self.nameLine.setFocus(Qt.OtherFocusReason)
        self.addressText.setReadOnly(False)

        self.addButton.setEnabled(False)
        self.nextButton.setEnabled(False)
        self.previousButton.setEnabled(False)
        self.submitButton.show()
        self.cancelButton.show()

    def submitContact(self):
        name = self.nameLine.text()
        address = self.addressText.toPlainText()

        if name == "" or address == "":
            QMessageBox.information(self, "Empty Field",
                    "Please enter a name and address.")
            return

        if name not in self.contacts:
            self.contacts[name] = address
            QMessageBox.information(self, "Add Successful",
                    "\"%s\" has been added to your address book." % name)
        else:
            QMessageBox.information(self, "Add Unsuccessful",
                    "Sorry, \"%s\" is already in your address book." % name)
            return

        if not self.contacts:
            self.nameLine.clear()
            self.addressText.clear()

        self.nameLine.setReadOnly(True)
        self.addressText.setReadOnly(True)
        self.addButton.setEnabled(True)

        number = len(self.contacts)
        self.nextButton.setEnabled(number &gt; 1)
        self.previousButton.setEnabled(number &gt; 1)

        self.submitButton.hide()
        self.cancelButton.hide()

    def cancel(self):
        self.nameLine.setText(self.oldName)
        self.addressText.setText(self.oldAddress)

        if not self.contacts:
            self.nameLine.clear()
            self.addressText.clear()

        self.nameLine.setReadOnly(True)
        self.addressText.setReadOnly(True)
        self.addButton.setEnabled(True)

        number = len(self.contacts)
        self.nextButton.setEnabled(number &gt; 1)
        self.previousButton.setEnabled(number &gt; 1)

        self.submitButton.hide()
        self.cancelButton.hide()

    def next(self):
        name = self.nameLine.text()
        it = iter(self.contacts)

        try:
            while True:
                this_name, _ = it.next()

                if this_name == name:
                    next_name, next_address = it.next()
                    break
        except StopIteration:
            next_name, next_address = iter(self.contacts).next()

        self.nameLine.setText(next_name)
        self.addressText.setText(next_address)

    def previous(self):
        name = self.nameLine.text()

        prev_name = prev_address = None
        for this_name, this_address in self.contacts:
            if this_name == name:
                break

            prev_name = this_name
            prev_address = this_address
        else:
            self.nameLine.clear()
            self.addressText.clear()
            return

        if prev_name is None:
            for prev_name, prev_address in self.contacts:
                pass

        self.nameLine.setText(prev_name)
        self.addressText.setText(prev_address)

if __name__ == '__main__':
    import sys

    from PyQt5.QtWidgets import QApplication

    app = QApplication(sys.argv)

    addressBook = AddressBook()
    addressBook.show()

    sys.exit(app.exec_())</pre>
<p>simple Scintilla editor:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sys

import sip
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.Qsci import QsciScintilla, QsciLexerPython


class SimplePythonEditor(QsciScintilla):
    ARROW_MARKER_NUM = 8

    def __init__(self, parent=None):
        super().__init__()

        # Set the default font
        font = QFont()
        font.setFamily('Courier')
        font.setFixedPitch(True)
        font.setPointSize(10)
        self.setFont(font)
        self.setMarginsFont(font)
        self.setUtf8(True)

        # Margin 0 is used for line numbers
        fontmetrics = QFontMetrics(font)
        self.setMarginsFont(font)
        self.setMarginWidth(0, fontmetrics.width("00000") + 6)
        self.setMarginLineNumbers(0, True)
        self.setMarginsBackgroundColor(QColor("#cccccc"))

        # Clickable margin 1 for showing markers
        self.setMarginSensitivity(1, True)
        self.marginClicked.connect(self.on_margin_clicked)
        self.markerDefine(QsciScintilla.RightArrow,
            self.ARROW_MARKER_NUM)
        self.setMarkerBackgroundColor(QColor("#ee1111"),
            self.ARROW_MARKER_NUM)

        # Brace matching: enable for a brace immediately before or after
        # the current position
        #
        self.setBraceMatching(QsciScintilla.SloppyBraceMatch)

        # Current line visible with special background color
        self.setCaretLineVisible(True)
        self.setCaretLineBackgroundColor(QColor("#ffe4e4"))

        # Set Python lexer
        # Set style for Python comments (style number 1) to a fixed-width
        # courier.
        #

        lexer = QsciLexerPython()
        lexer.setDefaultFont(font)
        self.setLexer(lexer)

        text = bytearray(str.encode("Arial"))
        # 32, "Courier New"
        self.SendScintilla(QsciScintilla.SCI_STYLESETFONT, 1, text)

        # Don't want to see the horizontal scrollbar at all
        # Use raw message to Scintilla here (all messages are documented
        # here: http://www.scintilla.org/ScintillaDoc.html)
        self.SendScintilla(QsciScintilla.SCI_SETHSCROLLBAR, 0)

        # not too small
        self.setMinimumSize(600, 450)

    def on_margin_clicked(self, nmargin, nline, modifiers):
        # Toggle marker for the line the margin was clicked on
        if self.markersAtLine(nline) != 0:
            self.markerDelete(nline, self.ARROW_MARKER_NUM)
        else:
            self.markerAdd(nline, self.ARROW_MARKER_NUM)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    editor = SimplePythonEditor()
    editor.show()
    editor.setText(open(sys.argv[0]).read())
    app.exec()</pre>
<p>csv file example:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import csv
import sys
from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
    qApp,
    QAction,
    QWidget,
    QFileDialog,
    QTableView
)
from PyQt5.QtGui import (
    QStandardItemModel,
    QStandardItem
)
from PyQt5.QtCore import (
    Qt,
    QAbstractTableModel,
    QVariant
)

class MainWindow(QMainWindow):

    def __init__(self):
        super().__init__()
        self.setWindowTitle("CSV GUI")
        self.create_menu_bar()

    def create_menu_bar(self):
        menu_bar = self.menuBar()
        menu_bar.setNativeMenuBar(False)
        self.create_file_menu(menu_bar)

    def create_file_menu(self, menu_bar):
        exit = QAction("Exit", self)
        exit.setShortcut("Ctrl+Q")
        exit.setStatusTip("Exit CSV GUI")
        exit.triggered.connect(qApp.quit)

        open = QAction("&amp;Open", self)
        open.setShortcut("Ctrl+O")
        open.setStatusTip("Open a CSV file")
        open.triggered.connect(self.open_file)

        file_menu = menu_bar.addMenu("&amp;File")
        file_menu.addAction(open)
        file_menu.addAction(exit)

    def open_file(self):
        file_name, filter = \
            QFileDialog.getOpenFileName(self, "Open file", ".",
                                        "All files (*);;CSV Files (*.csv)")

        with open(file_name) as fin:
            csv_data = [row for row in csv.reader(fin)]
        table_model = SimpleTableModel(csv_data[0], csv_data[1:])
        table_view = QTableView()
        table_view.setModel(table_model)
        self.setCentralWidget(table_view)

class SimpleTableModel(QAbstractTableModel):

    def __init__(self, headers, rows):
        QAbstractTableModel.__init__(self, None)
        self.headers = headers
        self.rows = rows

    def rowCount(self, parent):
        return len(self.rows)

    def columnCount(self, parent):
        return len(self.headers)

    def data(self, index, role):
        if (not index.isValid()) or (role != Qt.DisplayRole):
            return QVariant()
        else:
            return QVariant(self.rows[index.row()][index.column()])

    def headerData(self, section, orientation, role):
        if role != Qt.DisplayRole:
            return QVariant()
        elif orientation == Qt.Vertical:
            return section + 1
        else:
            return self.headers[section]


if __name__=='__main__':
    app = QApplication(sys.argv)
    main = MainWindow()
    main.show()
    sys.exit(app.exec())
</pre>
<p>Graphics 範例:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from math import pi
import sys, os.path
from PyQt5.QtCore import *
from PyQt5.QtGui import *

from PyQt5.QtWidgets import QApplication, QWidget


# library version number
__version__ = "3.0.7pyqt"

print("Imported cs1lib, version " + __version__)

# hint to window manager where to place graphics window
WINDOW_X = 300
WINDOW_Y = 300

# Global canvas object
canvas = None

# main app is global to allow things like timers to be started before/without graphics loop
app = QApplication(sys.argv)

# used for noop callbacks
def noop(*args, **kwargs):
    pass

# Generic State class used to create objects to pass between callbacks in cs1 examples
#   (Monkey-patched to add variables in early examples.)

class State():
    def __init__(self):
        pass

class CS1Image(QImage):
    def get_pixel(self, x, y):
        p = self.pixel(x, y)

        r = qRed(p) / 255.0
        g = qGreen(p) / 255.0
        b = qBlue(p) / 255.0
        a = qAlpha(p) / 255.0

        return (r, g, b, a)

    def set_pixel(self, x, y, r, g, b, a = 1.0):
        ri  = int(r * 255)
        gi  = int(g * 255)
        bi  = int(b * 255)
        ai  = int(a * 255)

        qrgba = qRgba ( ri, gi, bi, ai )
        self.setPixel(x, y, qrgba)

class CS1Canvas(QWidget):

    def __init__(self, draw_fn, data, window_x, window_y, width, height, title, framerate,
                 mouse_press, mouse_release, mouse_move,
                 key_press, key_release):
        super(CS1Canvas, self).__init__()

        # store callback function
        self.draw_fn = draw_fn
        self.mouse_press = mouse_press
        self.mouse_release = mouse_release
        self.mouse_move = mouse_move
        self.key_press = key_press
        self.key_release = key_release

        # data to pass to callback functions
        self.data = data

        self.window_x = window_x
        self.window_y = window_y

        self.width = width
        self.height = height
        self.title = title
        self.framerate = framerate

        # basic state setup

        self.fill_enabled = True
        self.stroke_enabled = True

        self.stroke_width = 1

        self.clear_color = (1, 1, 1, 1)
        self.pen_color = (0, 0, 0, 1)
        self.fill_color = (0, 0, 0, 1)

        # Initial font

        self.font_name = "Arial"
        self.font_size = 14
        self.font_style = QFont.Normal
        self.font_italic = False

        # initialize image just so that there is one for first redraw
        self.image = QImage(self.size(), QImage.Format_ARGB32_Premultiplied)
        self.init_qt()

        # get the size right this time
        self.image = QImage(self.size(), QImage.Format_ARGB32_Premultiplied)

        self.ipainter = QPainter(self.image)
        self.ipainter.setRenderHint(QPainter.Antialiasing, True)
        self.ipainter.setRenderHint(QPainter.SmoothPixmapTransform, True)

        self.closed = False

        # store the set of currently pressed keys
        self.keys_down = set()

        self.mouse_down = False
        self.mx = -1
        self.my = -1

        #self.clear()
        self.timer = QTimer()
        self.timer.timeout.connect(self.draw)
        self.timer.start(1000 / self.framerate)



    def init_qt(self):

        # self.setGeometry(self.window_x, self.window_y, self.width, self.height)
        self.setFixedSize(self.width, self.height)
        self.setWindowTitle(self.title)

        self.show()

        # enable tracking mouse during mouse move
        self.setMouseTracking(True)

        #self.enable_smoothing()

        self.raise_()

    def paintEvent(self, event):

        screen_painter = QPainter(self)

        screen_painter.drawImage(0, 0, self.image)

        screen_painter.end()


    def closeEvent(self, event):
        # qt unhappy if a reference to ipainter is still hanging
        #   around on close

        self.timer.stop()

        self.ipainter = None



    # used for main rendering loop
    def draw(self):
        #print("draw called")

        if self.data:
            self.draw_fn(self.data)
        else:
            self.draw_fn()

        self.update()


    def mousePressEvent(self, event):
        mx = event.x()
        my = event.y()

        self.mouse_down = True
        self.mx = mx
        self.my = my

        if self.data:
            self.mouse_press(mx, my, self.data)
        else:
            self.mouse_press(mx, my)


    def mouseReleaseEvent(self, event):
        mx = event.x()
        my = event.y()

        self.mouse_down = False
        self.mx = mx
        self.my = my

        if self.data:
            self.mouse_release(mx, my, self.data)
        else:
            self.mouse_release(mx, my)

    def mouseMoveEvent(self, event):
        mx = event.x()
        my = event.y()

        self.mx = mx
        self.my = my

        if self.data:
            self.mouse_move(mx, my, self.data)
        else:
            self.mouse_move(mx, my)

    @staticmethod
    def get_key_str(event):
        #key = event.key()
        #print("text: " + event.text())
        #if key &gt;=65 and key &lt;= 90:
        #    modifiers = event.modifiers()
        #    print(str(modifiers))
        #    if (modifiers &amp; Qt.ShiftModifier) == 0:
        #        print("no shift " + chr(key))
        #        key += 32
        #
        #if key &gt;= 0 and key &lt;=255:
        #    return chr(key)

        #return None
        return event.text()


    def keyPressEvent(self, event):

        key_str= self.get_key_str(event)

        self.keys_down.add(key_str)
        print("key pressed " + key_str)
        if key_str:
            if self.data:
                self.key_press(key_str, self.data)
            else:
                self.key_press(key_str)

    def keyReleaseEvent(self, event):
        key_str = self.get_key_str(event)
        self.keys_down.discard(key_str)

        if key_str:
            if self.data:
                self.key_release(key_str, self.data)
            else:
                self.key_release(key_str)

    def is_key_pressed(self, key):
        return key in self.keys_down

    # Commands that affect state such as color or stroke

    # update functions that update the state of Qt based on
    #  state variables.  Call after changing relevant state variables.

    def enable_smoothing(self):
        # left in only for backwards compatibility.  antialising on by default
        pass

    def update_font(self):
        f = QFont(self.font_name, self.font_size, self.font_style, self.font_italic)
        self.ipainter.setFont(f)

    def update_pen(self):
        # set stroke color and width
        if self.stroke_enabled:
            r = int(self.pen_color[0] * 255)
            g = int(self.pen_color[1] * 255)
            b = int(self.pen_color[2] * 255)
            a = int(self.pen_color[3] * 255)
            pen = QPen(QColor(r, g, b, a))
            pen.setWidth(self.stroke_width)
            self.ipainter.setPen(pen)
        else:
            self.ipainter.setPen(Qt.NoPen)

    def update_brush(self):
        # set fill color
        if self.fill_enabled:
            r = int(self.fill_color[0] * 255)
            g = int(self.fill_color[1] * 255)
            b = int(self.fill_color[2] * 255)
            a = int(self.fill_color[3] * 255)
            self.ipainter.setBrush(QBrush(QColor(r, g, b, a)))
        else:
            self.ipainter.setBrush(Qt.NoBrush)

    def set_clear_color(self, r, g, b, alpha=1.0):
        self.clear_color = (r, g, b, alpha)

    def set_stroke_color(self, r, g, b, alpha=1.0):
        self.pen_color = (r, g, b, alpha)
        self.update_pen()

    def set_stroke_width(self, width):
        self.stroke_width = width
        self.update_pen()

    def set_fill_color(self, r, g, b, alpha=1.0):
        self.fill_color = (r, g, b, alpha)
        self.enable_fill()

    def enable_fill(self):
        self.fill_enabled = True
        self.update_brush()

    def disable_fill(self):
        self.fill_enabled = False
        self.update_brush()

    def enable_stroke(self):
        self.stroke_enabled = True
        self.update_pen()

    def disable_stroke(self):
        self.stroke_enabled = False
        self.update_pen()

    def set_font(self, font_name):
        self.font_name = font_name
        self.update_font()

    def set_font_size(self, size):
        self.font_size = size
        self.update_font()

    def set_font_normal(self):
        self.font_style = QFont.Normal
        self.font_italic = False
        self.update_font()

    def set_font_bold(self):
        self.font_style = QFont.Bold
        self.update_font()

    def set_font_italic(self):
        self.font_italic = True
        self.update_font()


    def rotate(self, angle):
        self.ipainter.rotate(angle)

    def translate(self, x, y):
        self.ipainter.translate(x, y)

    def scale(self, sx, sy):
        self.ipainter.scale(sx, sy)

    def save(self):
        self.ipainter.save()

    def restore(self):
        self.ipainter.restore()

    # Drawing command wrapper methods

    def clear(self):

        r = int(self.clear_color[0] * 255)
        g = int(self.clear_color[1] * 255)
        b = int(self.clear_color[2] * 255)
        a = int(self.clear_color[3] * 255)

        self.ipainter.setBackground(QBrush(QColor(r, g, b, a)))
        #print(self.image.rect())
        self.ipainter.eraseRect(self.image.rect());

    def draw_point(self, x, y):
        self.ipainter.drawPoint(x, y)

    def draw_line(self, x1, y1, x2, y2):
        self.ipainter.drawLine(x1, y1, x2, y2)

    def draw_rectangle(self, x, y, w, h):
        self.ipainter.drawRect(x, y, w, h)

    def draw_polygon(self, vertices):
        qpoints = []

        for vertex in vertices:
            qpoints.append(QPoint(vertex[0], vertex[1]))

        poly = QPolygonF(qpoints)
        self.ipainter.drawPolygon(poly)

    def draw_ellipse(self, x, y, rx, ry):
        self.ipainter.drawEllipse(QRectF(x - rx, y - ry, rx * 2, ry * 2))

    def draw_text(self, s, x, y):

        self.ipainter.drawText(x, y, s)


    def get_text_width(self, str):
        f = QFont(self.font_name, self.font_size, self.font_style, self.font_italic)
        fmetric = QFontMetrics(f)
        #return fmetric.boundingRect(str).width()
        return fmetric.width(str)

    def get_text_height(self):
        f = QFont(self.font_name, self.font_size, self.font_style, self.font_italic)
        fmetric = QFontMetrics(f)
        #return fmetric.boundingRect(str).height()
        return fmetric.height()


    def draw_image(self, image, x, y):
        self.ipainter.drawImage(x, y, image)




# cs1lib drawing commands

#  utility

def is_key_pressed(key):
    return canvas.is_key_pressed(key)

def is_mouse_pressed():
    return canvas.mouse_down

def mouse_x():
    return canvas.mx

def mouse_y():
    return canvas.my

def degrees(rad):
    return 180 * rad / pi

#  state commands

def enable_smoothing():
    pass


def disable_smoothing():
    pass


def enable_fill():
    canvas.enable_fill()


def disable_fill():
    canvas.disable_fill()


def set_fill_color(r, g, b, alpha=1.0):
    canvas.set_fill_color(r, g, b, alpha)


def set_clear_color(r, g, b, alpha=1.0):
    canvas.set_clear_color(r, g, b, alpha)


def enable_stroke():
    canvas.enable_stroke()


def disable_stroke():
    canvas.disable_stroke()


def set_stroke_color(r, g, b, alpha=1.0):
    canvas.set_stroke_color(r, g, b, alpha)


def set_stroke_width(width):
    canvas.set_stroke_width(width)


def set_font(font_name):
    canvas.set_font(font_name)


def set_font_size(font_size):
    canvas.set_font_size(font_size)


def set_font_normal():
    canvas.set_font_normal()


def set_font_bold():
    canvas.set_font_bold()

def set_font_italic():
    canvas.set_font_italic()


#  drawing commands

def clear():
    canvas.clear()

def draw_point(x, y):
    canvas.draw_point(x, y)


def draw_line(x1, y1, x2, y2):
    canvas.draw_line(x1, y1, x2, y2)


def draw_polygon(vertices):
    canvas.draw_polygon(vertices)


def draw_triangle(x1, y1, x2, y2, x3, y3):
    draw_polygon([(x1, y1), (x2, y2), (x3, y3)])


def draw_circle(x, y, r):
    draw_ellipse(x, y, r, r)


def draw_ellipse(x, y, rx, ry):
    assert rx &gt;= 0
    assert ry &gt;= 0

    if rx == 0 or ry == 0:
        return

    canvas.draw_ellipse(x, y, rx, ry)


def draw_rectangle(x, y, w, h):
    canvas.draw_rectangle(x, y, w, h)


def draw_text(string, x, y):
    canvas.draw_text(string, x, y)



## transformations and canvas state functions

def push_state():
    canvas.save()

def pop_state():
    canvas.restore()

def rotate(degrees):
    canvas.rotate(degrees)

def translate(x, y):
    canvas.translate(x, y)

# Images

def draw_image(image, x, y, cx = 0, cy = 0, theta = 0):
    push_state()
    translate(x - cx, y - cy)

    if theta != 0:

        translate(cx, cy)
        rotate(theta)
        translate(-cx, -cy)

    canvas.draw_image(image, 0, 0)

    pop_state()

def load_image(filename):
    img = CS1Image()
    img.load(filename)
    return img


def get_text_width(string):
    return canvas.get_text_width(string)


def get_text_height():
    return canvas.get_text_height()

# Main graphics loop

# the frames parameters gives the number of frames to display on the
#  browser version of cs1lib.  Ignored in qt version.
def start_graphics(draw_func=noop, frames=1, data=None, framerate=40,
                title="cs1", width=400, height=400,
                mouse_press=noop, mouse_release = noop, mouse_move=noop,
                key_press=noop, key_release=noop):

    global canvas

    canvas = CS1Canvas(draw_fn = draw_func, data = data, window_x=WINDOW_X, window_y=WINDOW_Y,
                       width=width, height=height, title=title, framerate=framerate,
                       mouse_press=mouse_press, mouse_release=mouse_release, mouse_move=mouse_move,
                       key_press=key_press, key_release=key_release)



    sys.exit(app.exec_())

def cs1_quit():
    print("cs1_quit called")
    app.quit()
    exit()


# for testing purposes
if __name__ == '__main__':

    vx = 1
    x = 200
    y = 200

    def on_click(mx, my):
        print("Mouse click! " + str(mx) + " " + str(my))

    def on_move(mx, my):
        #print("Mouse move! " + str(mx) + " " + str(my))
        pass

    def on_release(mx, my):
        print("Mouse up! " + str(mx) + " " + str(my))

    def on_keydown(key):
        print("Pressed " + key)

    def on_keyup(key):
        print("Released " + key)


    def draw():
        global x, vx
        clear()

        set_clear_color(.8, .4, .4)
        clear()

        set_fill_color(.2, .5, .9)
        set_stroke_color(1, 1, 0)
        draw_rectangle(100, 100, 200, 200)

        set_stroke_color(0, 0, 0)
        set_fill_color(1, 1, 1)
        draw_circle(200, 200, 100)

        if star_img:
            draw_image(star_img, 200, 200, star_img.width()/2, star_img.height()/ 2, x)


        draw_circle(x, y, 5)


        x += vx

        if x + 5 &gt; 300 or x - 5 &lt; 100:
            vx *= -1

        set_font("Times")
        set_font_bold()
        set_font_italic()
        set_font_size(20)

        text = "Hello, world!"
        w = get_text_width(text)

        draw_text("Hello, world!", 200 - w/2, 277)

        h = get_text_height()
        draw_text(str(mouse_x()), 10, 400)
        draw_text( str(mouse_y()), 10, 400 + h)
        draw_text( str(is_mouse_pressed()), 10, 400 + 2 * h)


    star_img = None
    if os.path.exists("star.png"):
        star_img = load_image("star.png")

    start_graphics(draw, width=500, height=500, mouse_press = on_click, mouse_release = on_release, mouse_move = on_move,
                   key_press=on_keydown, key_release=on_keyup)</pre>
<p>html 轉 pdf:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sys
from PyQt5 import QtCore, QtWidgets, QtWebEngineWidgets

app = QtWidgets.QApplication(sys.argv)
loader = QtWebEngineWidgets.QWebEngineView()
loader.setZoomFactor(1)
loader.page().pdfPrintingFinished.connect(
    lambda *args: print('finished:', args))
loader.load(QtCore.QUrl('http://mde.tw/cadp2018/content/index.html'))

def emit_pdf(finished):
    loader.show()
    loader.page().printToPdf("test.pdf")

loader.loadFinished.connect(emit_pdf)

app.exec()</pre>
<p>mouse event and line drawing:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5 import QtWidgets, QtGui, QtCore


class Window(QtWidgets.QWidget):
    def __init__(self):
        QtWidgets.QWidget.__init__(self)
        self.view = View(self)
        self.button = QtWidgets.QPushButton('Clear View', self)
        self.button.clicked.connect(self.handleClearView)
        layout = QtWidgets.QVBoxLayout(self)
        layout.addWidget(self.view)
        layout.addWidget(self.button)

    def handleClearView(self):
        self.view.scene().clear()

class View(QtWidgets.QGraphicsView):
    def __init__(self, parent):
        QtWidgets.QGraphicsView.__init__(self, parent)
        self.setScene(QtWidgets.QGraphicsScene(self))
        self.setSceneRect(QtCore.QRectF(self.viewport().rect()))

    def mousePressEvent(self, event):
        self._start = event.pos()

    def mouseReleaseEvent(self, event):
        start = QtCore.QPointF(self.mapToScene(self._start))
        end = QtCore.QPointF(self.mapToScene(event.pos()))
        self.scene().addItem(
            QtWidgets.QGraphicsLineItem(QtCore.QLineF(start, end)))
        for point in (start, end):
            text = self.scene().addSimpleText(
                '(%d, %d)' % (point.x(), point.y()))
            text.setBrush(QtCore.Qt.red)
            text.setPos(point)

if __name__ == '__main__':

    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = Window()
    window.resize(640, 480)
    window.show()
    sys.exit(app.exec())</pre>
<p>在場景中加入元件 (<a href="https://github.com/mmisono/pyqt5-example/blob/master/tic_tac_toe.py">來源</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python

from PyQt5.QtCore import (QLineF, QPointF, QRectF, Qt)
from PyQt5.QtGui import (QBrush, QColor, QPainter)
from PyQt5.QtWidgets import (QApplication, QGraphicsView, QGraphicsScene, QGraphicsItem,
                             QGridLayout, QVBoxLayout, QHBoxLayout,
                             QLabel, QLineEdit, QPushButton)

# 繼承 QGraphicsItem 類別, 建立 TicTacToe 類別
class TicTacToe(QGraphicsItem):
    # 定義建構子
    def __init__(self):
        # 先執行父物件的建構子方法
        super().__init__()
        # 定義 board instance 屬性
        self.board = [[-1, -1, -1],[-1, -1, -1], [-1, -1, -1]]
        # 定義 O 與 X 與 turn 物件案例屬性
        self.O = 0
        self.X = 1
        self.turn = self.O

    # 定義重置方法
    def reset(self):
        # 以 y=0, 1, 2 重複執行迴圈
        for y in range(3):
            # 以 x=0, 1, 2 重複執行迴圈
            for x in range(3):
                # board 案例數列全設為 -1
                self.board[y][x] = -1
        # turn 設為 O
        self.turn = self.O
        # 執行 update 案例方法
        self.update()

    # 定義 select
    def select(self, x, y):
        # 不在範圍中的 x 與 y 直接 return
        if x &lt; 0 or y &lt; 0 or x &gt;= 3 or y &gt;= 3:
            return
        # 當板中特定位置為 -1, 表示該位置尚未 paint, 則一開始 turn 為 O, 也就是 0
        # 接著 turn 成為 1-0  轉為 1
        if self.board[y][x] == -1:
            self.board[y][x] = self.turn
            self.turn = 1 - self.turn

    def paint(self, painter, option, widget):
        painter.setPen(Qt.black)
        painter.drawLine(0,100,300,100)
        painter.drawLine(0,200,300,200)
        painter.drawLine(100,0,100,300)
        painter.drawLine(200,0,200,300)

        for y in range(3):
            for x in range(3):
                if self.board[y][x] == self.O:
                    painter.setPen(Qt.red)
                    painter.drawEllipse(QPointF(50+x*100, 50+y*100), 30, 30)
                elif self.board[y][x] == self.X:
                    painter.setPen(Qt.blue)
                    painter.drawLine(20+x*100, 20+y*100, 80+x*100, 80+y*100)
                    painter.drawLine(20+x*100, 80+y*100, 80+x*100, 20+y*100)

    def boundingRect(self):
        return QRectF(0,0,300,300)

    # 滑鼠點按事件
    def mousePressEvent(self, event):
        pos = event.pos()
        self.select(int(pos.x()/100), int(pos.y()/100))
        self.update()
        super(TicTacToe, self).mousePressEvent(event)

# 以 QGraphicsView 作為視窗
class MainWindow(QGraphicsView):
    def __init__(self):
        super().__init__()
        # 場景
        scene = QGraphicsScene(self)
        self.tic_tac_toe = TicTacToe()
        # 在場景中加入 TicTacToe() 的案例物件
        scene.addItem(self.tic_tac_toe)
        scene.setSceneRect(0, 0, 300, 300)
        # 在視窗中 setScene
        self.setScene(scene)
        # 設定 CacheMode
        self.setCacheMode(QGraphicsView.CacheBackground)
        self.setWindowTitle("Tic Tac Toe")

    def keyPressEvent(self, event):
        key = event.key()
        # 若按下 R 鍵, 則執行 reset 方法
        if key == Qt.Key_R:
            self.tic_tac_toe.reset()
        # 執行 MainWindow 中的 keyPressEvent
        super(MainWindow, self).keyPressEvent(event)

if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    mainWindow = MainWindow()

    mainWindow.show()
    sys.exit(app.exec())</pre>
<p>納入 matplotlib 動畫 (<a href="https://github.com/mmisono/pyqt5-example/blob/master/plot.py">來源</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python

import random
import numpy as np
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

from PyQt5.QtCore import (QLineF, QPointF, QRectF, Qt, QTimer)
from PyQt5.QtGui import (QBrush, QColor, QPainter)
from PyQt5.QtWidgets import (QApplication, QGraphicsView, QGraphicsScene, QGraphicsItem,
                             QGridLayout, QVBoxLayout, QHBoxLayout, QSizePolicy,
                             QLabel, QLineEdit, QPushButton)

# FigureCanvas inherits QWidget
class MainWindow(FigureCanvas):
    def __init__(self, parent=None, width=4, height=3, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        self.axes.hold(False)

        super(MainWindow, self).__init__(fig)
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self,
                                   QSizePolicy.Expanding,
                                   QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)

        timer = QTimer(self)
        timer.timeout.connect(self.update_figure)
        timer.start(50)

        self.x  = np.arange(0, 4*np.pi, 0.1)
        self.y  = np.sin(self.x)

        self.setWindowTitle("Sin Curve")

    def update_figure(self):
        self.axes.plot(self.x, self.y)
        self.y = np.roll(self.y,-1)
        self.draw()

if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    mainWindow = MainWindow()

    mainWindow.show()
    sys.exit(app.exec())</pre>
<p>表單 Factorial (<a href="https://github.com/mmisono/pyqt5-example/blob/master/factorial.py">來源</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python

from PyQt5.QtWidgets import (QApplication, QWidget,
                             QGridLayout, QVBoxLayout, QHBoxLayout,
                             QLabel, QLineEdit, QPushButton)

def factorial(n):
    if n &lt; 0:
        return -1
    elif n == 0:
        return 1
    else:
        return n * factorial(n-1)

class MainWindow(QWidget):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.inputLine = QLineEdit()
        self.outputLine = QLineEdit()
        self.outputLine.setReadOnly(True)

        self.calcButton = QPushButton("&amp;Calc")
        self.calcButton.clicked.connect(self.calc)

        lineLayout = QGridLayout()
        lineLayout.addWidget(QLabel("num"), 0, 0)
        lineLayout.addWidget(self.inputLine, 0, 1)
        lineLayout.addWidget(QLabel("result"), 1, 0)
        lineLayout.addWidget(self.outputLine, 1, 1)

        buttonLayout = QVBoxLayout()
        buttonLayout.addWidget(self.calcButton)

        mainLayout = QHBoxLayout()
        mainLayout.addLayout(lineLayout)
        mainLayout.addLayout(buttonLayout)

        self.setLayout(mainLayout)
        self.setWindowTitle("Factorial")

    def calc(self):
        n = int(self.inputLine.text())
        r = factorial(n)
        self.outputLine.setText(str(r))

if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    main_window = MainWindow()

    main_window.show()
    sys.exit(app.exec())</pre>
<p>使用 QGraphicsView 與 QWidget (<a href="https://github.com/mmisono/pyqt5-example/blob/master/cellular_automaton.py">來源</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python

import random

from PyQt5.QtCore import (QLineF, QPointF, QRectF, Qt, QTimer)
from PyQt5.QtGui import (QBrush, QColor, QPainter, QIntValidator)
from PyQt5.QtWidgets import (QApplication, QWidget, QGraphicsView, QGraphicsScene, QGraphicsItem,
                             QGridLayout, QVBoxLayout, QHBoxLayout,
                             QLabel, QLineEdit, QPushButton)

class CelllarAutomaton(QGraphicsItem):
    def __init__(self, width=500, height=500, size=5):
        super(CelllarAutomaton, self).__init__()
        self.width = width
        self.height = height
        self.size = size
        self.NH = self.height//size
        self.NW = self.width//size
        self.board = []
        for y in range(self.NH):
            self.board.append([0] * self.NW)
        self.board[0][self.NW//2] = 1
        self.pos = 0

    def reset(self):
        for y in range(self.NH):
            for x in range(self.NW):
                self.board[y][x] = 0
        self.board[0][self.NW//2] = 1
        self.pos = 0
        self.update()

    def randomInit(self):
        for y in range(self.NH):
            for x in range(self.NW):
                self.board[y][x] = 0
        for x in range(self.NW):
            self.board[0][x] = int(random.random() &lt; 0.2)
        self.pos = 0
        self.update()

    def paint(self, painter, option, widget):
        painter.setPen(QColor(220,220,220))
        for y in range(self.NH):
            painter.drawLine(0, y*self.size, self.width, y*self.size)
        for x in range(self.NW):
            painter.drawLine(x*self.size, 0, x*self.size, self.height)

        painter.setBrush(Qt.black)
        for y in range(self.NH):
            for x in range(self.NW):
                if self.board[y][x] == 1:
                    painter.drawRect(self.size*x, self.size*y, self.size, self.size)

    def do_prev(self):
        if self.pos == 0:
            return
        for x in range(self.NW):
            self.board[self.pos][x] = 0
        self.pos -= 1
        self.update()

    def do_next(self, n):
        if self.pos+1 &gt;= self.NH:
            return False
        p = []
        for i in range(8):
            p.append(n &amp; 0b1) 
            n &gt;&gt;= 1

        self.board[self.pos+1][0] = p[(self.board[self.pos][0]&lt;&lt;1) + self.board[self.pos][1]]
        self.board[self.pos+1][self.NW-1] = p[(self.board[self.pos][self.NW-2]&lt;&lt;1) + self.board[self.pos][self.NW-1]]
        for x in range(1,self.NW-1):
            self.board[self.pos+1][x] = p[(self.board[self.pos][x-1]&lt;&lt;2)
                                            + (self.board[self.pos][x]&lt;&lt;1)
                                            + (self.board[self.pos][x+1])]
        self.pos += 1
        self.update()
        return True

    def boundingRect(self):
        return QRectF(0,0,self.width,self.height)

class MainWindow(QWidget):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.graphicsView = QGraphicsView()
        scene = QGraphicsScene(self.graphicsView)
        scene.setSceneRect(0, 0, 400, 400)
        self.graphicsView.setScene(scene)
        self.celluarAutomaton = CelllarAutomaton(400,400)
        scene.addItem(self.celluarAutomaton)

        validator = QIntValidator(0,1)
        ruleLayout = QGridLayout()
        ruleLayout.setAlignment(Qt.AlignTop)
        self.ruleEdits = []
        for i in range(7,-1,-1):
            ruleEdit = QLineEdit()
            ruleEdit.setValidator(validator)
            ruleEdit.setText("0")
            ruleEdit.setFixedWidth(30)
            ruleEdit.textEdited.connect(self.update_rule)
            ruleLayout.addWidget(QLabel("{0:03b}".format(i)), 0, 7-i)
            ruleLayout.addWidget(ruleEdit, 1,7-i)
            self.ruleEdits.append(ruleEdit)

        validator2 = QIntValidator(0,255)
        self.rule10Edit = QLineEdit()
        self.rule10Edit.setValidator(validator2)
        self.rule10Edit.textEdited.connect(self.update_rule10)
        rule10Layout = QHBoxLayout()
        rule10Layout.addWidget(QLabel("Rule"))
        rule10Layout.addWidget(self.rule10Edit)

        self.resetButton = QPushButton("&amp;Reset")
        self.resetButton.clicked.connect(self.reset)
        self.randomInitButton = QPushButton("&amp;Random init")
        self.randomInitButton.clicked.connect(self.randomInit)
        self.nextButton = QPushButton("&amp;Next")
        self.nextButton.clicked.connect(self.do_next)
        self.prevButton = QPushButton("&amp;Prev")
        self.prevButton.clicked.connect(self.do_prev)
        self.autoButton = QPushButton("&amp;Auto")
        self.autoButton.clicked.connect(self.auto)
        self.stopButton = QPushButton("&amp;Stop")
        self.stopButton.clicked.connect(self.stop)
        buttonLayout = QVBoxLayout()
        buttonLayout.addWidget(self.resetButton)
        buttonLayout.addWidget(self.randomInitButton)
        buttonLayout.addWidget(self.nextButton)
        buttonLayout.addWidget(self.prevButton)
        buttonLayout.addWidget(self.autoButton)
        buttonLayout.addWidget(self.stopButton)

        propertyLayout = QVBoxLayout()
        propertyLayout.setAlignment(Qt.AlignTop)
        propertyLayout.addLayout(ruleLayout)
        propertyLayout.addLayout(rule10Layout)
        propertyLayout.addLayout(buttonLayout)

        mainLayout = QHBoxLayout()
        mainLayout.setAlignment(Qt.AlignTop)
        mainLayout.addWidget(self.graphicsView)
        mainLayout.addLayout(propertyLayout)

        self.setLayout(mainLayout)
        self.setWindowTitle("Cellular Automaton")
        self.updating_rule = False
        self.rule10Edit.setText("90")
        self.update_rule10()
        self.timer = None

    def update_rule(self):
        if self.updating_rule: return
        rule = 0
        for i in range(8):
            n = self.ruleEdits[i].text()
            if n == "": return
            rule = (rule &lt;&lt; 1) + int(n)
        self.updating_rule = True
        self.rule10Edit.setText(str(rule))
        self.updating_rule = False

    def update_rule10(self):
        n = self.rule10Edit.text()
        if n == "": return
        rule = int(n)
        self.updating_rule = True
        for i in range(7,-1,-1):
            self.ruleEdits[i].setText(str(rule &amp; 0b1))
            rule &gt;&gt;= 1
        self.updating_rule = False

    def do_next(self):
        n = self.rule10Edit.text()
        return self.celluarAutomaton.do_next(int(n))

    def do_prev(self):
        self.celluarAutomaton.do_prev()

    def reset(self):
        self.celluarAutomaton.reset()

    def randomInit(self):
        self.celluarAutomaton.randomInit()

    def auto(self):
        self.timer = QTimer()
        self.timer.setInterval(100)
        self.timer.timeout.connect(self.timeout)
        self.timer.start()

    def timeout(self):
        r = self.do_next()
        if not r:
            self.stop()

    def stop(self):
        if self.timer:
            self.timer.stop()
            self.timer = None

    #def keyPressEvent(self, event):
    #    key = event.key()
    #    super(MainWindow, self).keyPressEvent(event)

if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    mainWindow = MainWindow()

    mainWindow.show()
    sys.exit(app.exec())</pre>
<p>使用 Eric6 開發 PyQt5 GUI 程式:</p>
<p>參考流程: <a href="http://www.science.smith.edu/dftwiki/index.php/PyQt5_Tutorial:_A_Window_Application_with_File_IO">http://www.science.smith.edu/dftwiki/index.php/PyQt5_Tutorial:_A_Window_Application_with_File_IO</a> </p>
<p><a href="/downloads/qt_designer_tutorial.pdf">Qt Designer 教學.pdf</a></p>
<h3>STetris</h3>
<p>StApp.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sys
from StTetris import StTetris
from PyQt5.QtWidgets import QApplication


if __name__ == '__main__':

    app = QApplication(sys.argv)
    stetris = StTetris()
    stetris.start()
    sys.exit(app.exec())</pre>
<p>StTetris.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from StPlay import StPlay
from StScore import StScore
from PyQt5.QtCore import QBasicTimer, QRect, Qt
from PyQt5.QtGui import QBrush, QColor, QFont, QPainter
from PyQt5.QtWidgets import QWidget


class StTetris(QWidget):

    ST_WINDOW_WIDTH = 800
    ST_WINDOW_HEIGHT = 600
    ST_BLOCK_WIDTH = 30
    ST_BLOCK_HEIGHT = 30
    ST_BOARD_POS_X = 200
    ST_BOARD_POS_Y = 0
    ST_NEXT_BLOCK_POS_X = 650
    ST_NEXT_BLOCK_POS_Y = 150
    ST_SCORE_POS_X = 550
    ST_SCORE_POS_Y = 30
    ST_HIGHSCORE_POS_X = 650
    ST_HIGHSCORE_POS_Y = 30
    ST_BLOCK_COLOR = ["#000000", "#C71585", "#FFA500", "#FFD700", "#228B22", "#1E90FF", "#483D8B", "#9932CC"]
    ST_BACKGROUND_COLOR = "#FFFFFF"
    ST_DOWN_INTERVAL = 500

    # Constructor
    def __init__(self):
        super().__init__()

        # Show widget
        super().resize(self.ST_WINDOW_WIDTH, self.ST_WINDOW_HEIGHT)
        super().setWindowTitle("STetris")
        super().show()

        # Painter
        self.painter = QPainter()

        # Play
        self.play = StPlay(self)
        # Score
        self.score = StScore()
        # High Score
        self.highScore = StScore()
        # Load high score
        # highScore = sessionStorage.getItem("highscore")
        # if (highScore):
        #   Set high score
        #   self.highScore.setScore(highScore)
        # Play interval
        self.playInterval = 500
        # Play timer
        self.playTimer = QBasicTimer()

    # Start
    def start(self):
        # Set interval
        self.playTimer.start(self.ST_DOWN_INTERVAL, self)

    # Stop
    def stop(self):
        self.playTimer.stop()

    def timerEvent(self, e):
        self.play.moveDown()

    def keyPressEvent(self, e):
        key = e.key()

        if key == Qt.Key_Left:
            self.play.moveLeft()
        elif key == Qt.Key_Right:
            self.play.moveRight()
        elif key == Qt.Key_Down:
            self.play.moveDown()
        elif key == Qt.Key_Up:
            self.play.rotate()
        elif key == Qt.Key_Space:
            self.play.drop()

    # Notify
    def notify(self, message, param=None):
        if (message == StPlay.ST_NOTIFY_DOWN):
            self.score.setScore(self.score.getScore() + 100)
        elif (message == StPlay.ST_NOTIFY_DROP):
            self.score.setScore(self.score.getScore() + 100)
        elif (message == StPlay.ST_NOTIFY_CLEAR):
            self.score.setScore(self.score.getScore()
                                + param.cleared_lines * 1000)
        elif (message == StPlay.ST_NOTIFY_TETRISOVER):
            self.stop()

        # Update high score
        #if self.highScore.getScore() &lt; self.score.getScore():
        #    self.highScore.setScore(self.score.getScore())
        #    sessionStorage.setItem("highscore", self.highScore.getScore())

        self.update()

    def paintEvent(self, e):
        self.painter.begin(self)
        self.drawTetris(self.painter)
        self.painter.end()

    # Draw tetris
    def drawTetris(self, painter):

        # Draw background
        rect = {
            "x" : 0,
            "y" : 0,
            "width" : self.ST_WINDOW_WIDTH,
            "height" : self.ST_WINDOW_HEIGHT
        }
        self.drawBackground(painter, rect)

        # Draw board
        boardRect = {
            "x" : self.ST_BOARD_POS_X,
            "y" : self.ST_BOARD_POS_Y,
            "width" : self.ST_BLOCK_WIDTH * self.play.getBoard().getXSize(),
            "height" : self.ST_BLOCK_HEIGHT * self.play.getBoard().getYSize()
        }
        self.drawBoard(painter, boardRect, self.play.getBoard())

        # Draw current block
        self.drawBlock(painter, boardRect, self.play.getCurrentBlock())

        # Draw next block
        nextBlockRect = {
            "x" : self.ST_NEXT_BLOCK_POS_X,
            "y" : self.ST_NEXT_BLOCK_POS_Y,
            "width" : self.ST_BLOCK_WIDTH * 4,
            "height" : self.ST_BLOCK_HEIGHT * 4,
        }
        self.drawBlock(painter, nextBlockRect, self.play.getNextBlock())

        # Draw score
        scoreRect = {
            "x" : self.ST_SCORE_POS_X,
            "y" : self.ST_SCORE_POS_Y,
            "width" : self.ST_BLOCK_WIDTH * 7,
            "height" : self.ST_BLOCK_HEIGHT * 2
        }
        self.drawScore(painter, scoreRect, "SCORE", self.score)

        # Draw high score
        highScoreRect = {
            "x" : self.ST_HIGHSCORE_POS_X,
            "y" : self.ST_HIGHSCORE_POS_Y,
            "width" : self.ST_BLOCK_WIDTH * 7,
            "height" : self.ST_BLOCK_HEIGHT * 2
        }
        self.drawScore(painter, highScoreRect, "HIGH SCORE", self.highScore)

    # Draw background
    def drawBackground(self, painter, rect):
        painter.fillRect(QRect(rect["x"], rect["y"], rect["width"], rect["height"]), QColor(self.ST_BACKGROUND_COLOR))

    # Draw board
    def drawBoard(self, painter, rect, board):

        # Draw board
        for boardY in range(board.getYSize()):
            for boardX in range(board.getXSize()):
                rectBlock = {
                    "x" : rect["x"] + boardX * StTetris.ST_BLOCK_WIDTH,
                    "y" : rect["y"] + boardY * StTetris.ST_BLOCK_HEIGHT,
                    "width" : StTetris.ST_BLOCK_WIDTH,
                    "height" : StTetris.ST_BLOCK_HEIGHT
                }
                fillColor = StTetris.ST_BLOCK_COLOR[self.play.getBoard().getBlock(boardX, boardY)]
                painter.fillRect(QRect(rectBlock["x"], rectBlock["y"], rectBlock["width"], rectBlock["height"]), QColor(fillColor))

    # Draw block
    def drawBlock(self, painter, rect, block):

        # Draw block
        for blockY in range(block.getYSize()):
            for blockX in range(block.getXSize()):
                if block.getBlock(blockX, blockY):
                    rectBlock = {
                        "x" : rect["x"] + (block.getXPos() + blockX) * StTetris.ST_BLOCK_WIDTH,
                        "y" : rect["y"] + (block.getYPos() + blockY) * StTetris.ST_BLOCK_HEIGHT,
                        "width" : StTetris.ST_BLOCK_WIDTH,
                        "height" : StTetris.ST_BLOCK_HEIGHT
                    }
                    fillColor = StTetris.ST_BLOCK_COLOR[block.getBlock(blockX, blockY)]
                    painter.fillRect(QRect(rectBlock["x"], rectBlock["y"], rectBlock["width"], rectBlock["height"]), QColor(fillColor))

    # Draw score
    def drawScore(self, painter, rect, title, score):
        # Draw title
        painter.textAligh = "right"
        painter.fillStyle = "red"
        painter.drawText(rect["x"], rect["y"], title)

        # Draw score
        painter.drawText(rect["x"], rect["y"] + rect["height"] // 2, str(score.getScore()))</pre>
<p>StPlay.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from StBoard import StBoard
from StBlock import StBlock

class StPlay:
    ST_NOTIFY_LEFT = "NOTIFY_LEFT"

    ST_NOTIFY_RIGHT = "NOTIFY_RIGHT"

    ST_NOTIFY_DOWN = "NOTIFY_DOWN"
        
    ST_NOTIFY_DROP = "NOTIFY_DROP"

    ST_NOTIFY_ROTATE = "NOTIFY_ROTATE"

    ST_NOTIFY_CLEAR = "NOTIFY_CLEAR"

    ST_NOTIFY_TETRISOVER = "NOTIFY_TETRISOVER"

    # Constructor
    def __init__(self, notify):
        # Board
        self.board = StBoard()
        # Current block
        self.currentBlock = StBlock()
        self.currentBlock.setXPos((self.board.getXSize() - self.currentBlock.getXSize()) // 2)
        self.currentBlock.setYPos(0 - self.currentBlock.getYSize())
        # Next block
        self.nextBlock = StBlock()
        # Notify
        self.notify = notify

    # Get board
    def getBoard(self):
        return self.board

    # Get current block
    def getCurrentBlock(self):
        return self.currentBlock

    # Get next block
    def getNextBlock(self):
        return self.nextBlock

    # Move left
    def moveLeft(self):
        # Is block movable
        if self.isMovable(self.currentBlock, self.currentBlock.getXPos() - 1, self.currentBlock.getYPos(), self.currentBlock.getRotation()):
            # Set current X position to left
            self.currentBlock.setXPos(self.currentBlock.getXPos() - 1)
            # Notify
            self.notify.notify(StPlay.ST_NOTIFY_LEFT)

    # Move right
    def moveRight(self):
        # Is block movable
        if self.isMovable(self.currentBlock, self.currentBlock.getXPos() + 1, self.currentBlock.getYPos(), self.currentBlock.getRotation()):
            # Set current X position to right
            self.currentBlock.setXPos(self.currentBlock.getXPos() + 1)
            # Notify
            self.notify.notify(StPlay.ST_NOTIFY_RIGHT)

    # Move down
    def moveDown(self):
        # Is block movable
        if self.isMovable(self.currentBlock, self.currentBlock.getXPos(), self.currentBlock.getYPos() + 1, self.currentBlock.getRotation()):
            # Set current Y position to down
            self.currentBlock.setYPos(self.currentBlock.getYPos() + 1)
            # Notify
            self.notify.notify(StPlay.ST_NOTIFY_DOWN)
        # Block is not movable
        else:
            # Set current block to board
            self.setCurrentBlockToBoard()
            # Change current block
            self.changeCurrentBlock()
            # Clear completed line
            cleared_lines = self.board.clearCompleteLines()
            if cleared_lines:
                # Notify
                self.notify.notify(StPlay.ST_NOTIFY_CLEAR, { cleared_lines : cleared_lines })
            # Tetris is over
            if self.isTetrisOver():
                # Notify
                self.notify.notify(StPlay.ST_NOTIFY_TETRISOVER)

    # Drop
    def drop(self):

        while True:
            # Block is movable
            if self.isMovable(self.currentBlock, self.currentBlock.getXPos(), self.currentBlock.getYPos() + 1, self.currentBlock.getRotation()):
                # Set current Y position to down
                self.currentBlock.setYPos(self.currentBlock.getYPos() + 1)
            # Block is not movable
            else:
                # Notify
                self.notify.notify(StPlay.ST_NOTIFY_DROP)
                break

        # Set current block to board
        self.setCurrentBlockToBoard()
        # Change current block
        self.changeCurrentBlock()
        # Clear completed line
        cleared_lines = self.board.clearCompleteLines()
        if cleared_lines:
            # Notify
            self.notify.notify(StPlay.ST_NOTIFY_CLEAR, { cleared_lines : cleared_lines })
        # Tetris is over
        if self.isTetrisOver():
            # Notify
            self.notify.notify(StPlay.ST_NOTIFY_TETRISOVER)

    # Rotate
    def rotate(self):
        # Is block movable
        if self.isMovable(self.currentBlock, self.currentBlock.getXPos(), self.currentBlock.getYPos(), self.currentBlock.getRotation() + 1):
            # Rotate
            self.currentBlock.setRotation(self.currentBlock.getRotation() + 1)
            # Notify
            self.notify.notify(StPlay.ST_NOTIFY_ROTATE)

    # Is movable
    def isMovable(self, block, xPos, yPos, rotation):

        # Create block to check and set value to check
        checkBlock = StBlock(block)
        checkBlock.setXPos(xPos)
        checkBlock.setYPos(yPos)
        checkBlock.setRotation(rotation)

        # Get value of board
        for blockX in range(checkBlock.getXSize()):
            for blockY in range(checkBlock.getYSize()):

                # Check if block to check is empty
                if checkBlock.getBlock(blockX, blockY) == 0:
                    continue

                boardX = checkBlock.getXPos() + blockX
                boardY = checkBlock.getYPos() + blockY

                # Check X position of block to check
                if boardX &lt; 0 or boardX &gt;= self.board.getXSize():
                    return False

                # Check Y position of block to check
                if boardY &gt;= self.board.getYSize():
                    return False

                # Check if block is already exist
                if self.board.getBlock(boardX, boardY) != 0:
                    return False

        return True

    # Set current block to board
    def setCurrentBlockToBoard(self):
        # Set current block to board
        for blockX in range(self.currentBlock.getXSize()):
            for blockY in range(self.currentBlock.getYSize()):
                if self.currentBlock.getBlock(blockX, blockY) != 0:
                    self.board.setBlock(self.currentBlock.getXPos() + blockX, self.currentBlock.getYPos() + blockY, self.currentBlock.getType())

    # Check if tetris is over
    def isTetrisOver(self):
        isTetrisOver = False
        for boardX in range(self.board.getXSize()):
            if self.board.getBlock(boardX, 0) != 0:
                isTetrisOver = True
                break
        return isTetrisOver

    # Change current block
    def changeCurrentBlock(self):
        # Set next block to current block
        self.currentBlock = self.nextBlock
        self.currentBlock.setXPos((self.board.getXSize() - self.currentBlock.getXSize()) // 2)
        self.currentBlock.setYPos(- self.currentBlock.getYSize())
        # Set next block
        self.nextBlock = StBlock()</pre>
<p>StScore.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class StScore:
    # Constructor
    def __init__(self):
        # Score
        self.score = 0

    # Clear
    def clear(self):
        self.score = 0

    # Add score
    def addScore(self, score):
        self.score += score

    # Set score
    def setScore(self, score):
        self.score = score

    # Get score
    def getScore(self):
        return self.score</pre>
<p>StBoard.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import numpy

class StBoard:

    # Constructor
    def __init__(self):
        # Board
        self.board = numpy.zeros(shape=(self.getYSize(), self.getXSize()), dtype=int)

    # Get X size
    def getXSize(self):
        return 10

    # Get Y size
    def getYSize(self):
        return 20

    # Get block
    def getBlock(self, x, y):
        if x &lt; 0 or x &gt;= self.getXSize():
            return 0

        if y &lt; 0 or y &gt;= self.getYSize():
            return 0

        return self.board[y][x]

    # Set block
    def setBlock(self, x, y, block):
        if x &lt; 0 or x &gt;= self.getXSize():
            return

        if y &lt; 0 or y &gt;= self.getYSize():
            return

        self.board[y][x] = block

    # Clear complete lines
    def clearCompleteLines(self):
        complete_lines = 0

        for boardY in range(self.getYSize()):
            block_count = 0

            # Count the number of block
            for boardX in range(self.getXSize()):
                if (self.board[boardY][boardX]):
                    block_count += 1

            # The line of board is full of block
            if block_count is len(self.board[boardY]):
                # Delete line of board
                self.board.pop(boardY)
                # Add line to the beginning of the board
                self.board = numpy.zeros(shape=(1, self.getXSize()), dtype=int) + self.board
                complete_lines += 1

        return complete_lines</pre>
<p>StBlock.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import random

class StBlock:

    blocks = [ [
                [
                    [ 1, 0, 0 ],
                    [ 1, 1, 1 ],
                    [ 0, 0, 0 ]
                ], [
                    [ 0, 1, 0 ],
                    [ 0, 1, 0 ],
                    [ 1, 1, 0 ]
                ], [
                    [ 0, 0, 0 ],
                    [ 1, 1, 1 ],
                    [ 0, 0, 1 ]
                ], [
                    [ 0, 1, 1 ],
                    [ 0, 1, 0 ],
                    [ 0, 1, 0 ]
                ]
            ], [
                [
                    [ 0, 0, 2 ],
                    [ 2, 2, 2 ],
                    [ 0, 0, 0 ]
                ], [
                    [ 2, 2, 0 ],
                    [ 0, 2, 0 ],
                    [ 0, 2, 0 ]
                ], [
                    [ 0, 0, 0 ],
                    [ 2, 2, 2 ],
                    [ 2, 0, 0 ]
                ], [
                    [ 0, 2, 0 ],
                    [ 0, 2, 0 ],
                    [ 0, 2, 2 ]
                ]
            ], [
                [
                    [ 3, 3 ],
                    [ 3, 3 ]
                ]
            ], [
                [
                    [ 0, 4, 4 ],
                    [ 4, 4, 0 ],
                    [ 0, 0, 0 ]
                ], [
                    [ 0, 4, 0 ],
                    [ 0, 4, 4 ],
                    [ 0, 0, 4 ]
                ]
            ], [
                [
                    [ 0, 0, 0 ],
                    [ 5, 5, 5 ],
                    [ 0, 5, 0 ]
                ], [
                    [ 0, 5, 0 ],
                    [ 0, 5, 5 ],
                    [ 0, 5, 0 ]
                ], [
                    [ 0, 5, 0 ],
                    [ 5, 5, 5 ],
                    [ 0, 0, 0 ]
                ], [
                    [ 0, 5, 0 ],
                    [ 5, 5, 0 ],
                    [ 0, 5, 0 ]
                ]
            ], [
                [
                    [ 6, 6, 0 ],
                    [ 0, 6, 6 ],
                    [ 0, 0, 0 ]
                ], [
                    [ 0, 0, 6 ],
                    [ 0, 6, 6 ],
                    [ 0, 6, 0 ]
                ]
            ], [
                [
                    [ 0, 0, 0, 0 ],
                    [ 0, 0, 0, 0 ],
                    [ 7, 7, 7, 7 ],
                    [ 0, 0, 0, 0 ]
                ], [
                    [ 0, 7, 0, 0 ],
                    [ 0, 7, 0, 0 ],
                    [ 0, 7, 0, 0 ],
                    [ 0, 7, 0, 0 ]
                ]
            ] ]

    def __init__(self, block=None):
        if block is None:
            # Type
            self.type = random.randint(1, len(StBlock.blocks))
            # X Position
            self.xPos = 0
            # Y Position
            self.yPos = 0
            # Rotation
            self.rotation = 0
            # Block
            self.block = StBlock.blocks[self.type-1]
        else:
            # Type
            self.type = block.type
            # X Position
            self.xPos = block.xPos
            # Y Position
            self.yPos = block.yPos
            # Rotation
            self.rotation = block.rotation
            # Block
            self.block = block.block

    # Get type
    def getType(self):
        return self.type

    # Get X size
    def getXSize(self):
        return len(self.block[self.rotation][0])

    # Get Y size
    def getYSize(self):
        return len(self.block[self.rotation])

    # Get X position
    def getXPos(self):
        return self.xPos

    # Get Y position
    def getYPos(self):
        return self.yPos

    # Get rotation
    def getRotation(self):
        return self.rotation

    # Get block
    def getBlock(self, x, y):
        if x &lt; 0 or x &gt;= self.getXSize():
            return 0

        if y &lt; 0 or y &gt;= self.getYSize():
            return 0

        return self.block[self.rotation][y][x]

    # Set X position
    def setXPos(self, xPos):
        self.xPos = xPos

    # Set Y position
    def setYPos(self, yPos):
        self.yPos = yPos
    
    # Set rotation
    def setRotation(self, rotation):
        self.rotation = self.rotation % len(self.block)</pre>
<p>Reference:</p>
<p><a href="https://github.com/siprikorea/stetris-python">https://github.com/siprikorea/stetris-python</a> </p>
<h3>Tetrix</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import copy
import random

from PyQt5.QtCore import pyqtSignal, QBasicTimer, QSize, Qt
from PyQt5.QtGui import QColor, QPainter, QPixmap
from PyQt5.QtWidgets import (QApplication, QFrame, QGridLayout, QLabel,
        QLCDNumber, QPushButton, QWidget)


NoShape, ZShape, SShape, LineShape, TShape, SquareShape, LShape, MirroredLShape = range(8)


class TetrixWindow(QWidget):
    def __init__(self):
        super().__init__()

        self.board = TetrixBoard()

        nextPieceLabel = QLabel()
        nextPieceLabel.setFrameStyle(QFrame.Box | QFrame.Raised)
        nextPieceLabel.setAlignment(Qt.AlignCenter)
        self.board.setNextPieceLabel(nextPieceLabel)

        scoreLcd = QLCDNumber(5)
        scoreLcd.setSegmentStyle(QLCDNumber.Filled)
        levelLcd = QLCDNumber(2)
        levelLcd.setSegmentStyle(QLCDNumber.Filled)
        linesLcd = QLCDNumber(5)
        linesLcd.setSegmentStyle(QLCDNumber.Filled)

        startButton = QPushButton("&amp;Start")
        startButton.setFocusPolicy(Qt.NoFocus)
        quitButton = QPushButton("&amp;Quit")
        quitButton.setFocusPolicy(Qt.NoFocus)
        pauseButton = QPushButton("&amp;Pause")
        pauseButton.setFocusPolicy(Qt.NoFocus)

        startButton.clicked.connect(self.board.start)
        pauseButton.clicked.connect(self.board.pause)
        quitButton.clicked.connect(QApplication.instance().quit)
        self.board.scoreChanged.connect(scoreLcd.display)
        self.board.levelChanged.connect(levelLcd.display)
        self.board.linesRemovedChanged.connect(linesLcd.display)

        layout = QGridLayout()
        layout.addWidget(self.createLabel("NEXT"), 0, 0)
        layout.addWidget(nextPieceLabel, 1, 0)
        layout.addWidget(self.createLabel("LEVEL"), 2, 0)
        layout.addWidget(levelLcd, 3, 0)
        layout.addWidget(startButton, 4, 0)
        layout.addWidget(self.board, 0, 1, 6, 1)
        layout.addWidget(self.createLabel("SCORE"), 0, 2)
        layout.addWidget(scoreLcd, 1, 2)
        layout.addWidget(self.createLabel("LINES REMOVED"), 2, 2)
        layout.addWidget(linesLcd, 3, 2)
        layout.addWidget(quitButton, 4, 2)
        layout.addWidget(pauseButton, 5, 2)
        self.setLayout(layout)

        self.setWindowTitle("Tetrix")
        self.resize(550, 370)

    def createLabel(self, text):
        lbl = QLabel(text)
        lbl.setAlignment(Qt.AlignHCenter | Qt.AlignBottom)
        return lbl


class TetrixBoard(QFrame):
    BoardWidth = 10
    BoardHeight = 22

    scoreChanged = pyqtSignal(int)

    levelChanged = pyqtSignal(int)

    linesRemovedChanged = pyqtSignal(int)

    def __init__(self, parent=None):
        super().__init__()

        self.timer = QBasicTimer()
        self.nextPieceLabel = None
        self.isWaitingAfterLine = False
        self.curPiece = TetrixPiece()
        self.nextPiece = TetrixPiece()
        self.curX = 0
        self.curY = 0
        self.numLinesRemoved = 0
        self.numPiecesDropped = 0
        self.score = 0
        self.level = 0
        self.board = None

        self.setFrameStyle(QFrame.Panel | QFrame.Sunken)
        self.setFocusPolicy(Qt.StrongFocus)
        self.isStarted = False
        self.isPaused = False
        self.clearBoard()

        self.nextPiece.setRandomShape()

    def shapeAt(self, x, y):
        return self.board[(y * TetrixBoard.BoardWidth) + x]

    def setShapeAt(self, x, y, shape):
        self.board[(y * TetrixBoard.BoardWidth) + x] = shape   

    def timeoutTime(self):
        return 1000 / (1 + self.level)

    def squareWidth(self):
        return self.contentsRect().width() / TetrixBoard.BoardWidth

    def squareHeight(self):
        return self.contentsRect().height() / TetrixBoard.BoardHeight

    def setNextPieceLabel(self, label):
        self.nextPieceLabel = label

    def sizeHint(self):
        return QSize(TetrixBoard.BoardWidth * 15 + self.frameWidth() * 2,
                TetrixBoard.BoardHeight * 15 + self.frameWidth() * 2)

    def minimumSizeHint(self):
        return QSize(TetrixBoard.BoardWidth * 5 + self.frameWidth() * 2,
                TetrixBoard.BoardHeight * 5 + self.frameWidth() * 2)

    def start(self):
        if self.isPaused:
            return

        self.isStarted = True
        self.isWaitingAfterLine = False
        self.numLinesRemoved = 0
        self.numPiecesDropped = 0
        self.score = 0
        self.level = 1
        self.clearBoard()

        self.linesRemovedChanged.emit(self.numLinesRemoved)
        self.scoreChanged.emit(self.score)
        self.levelChanged.emit(self.level)

        self.newPiece()
        self.timer.start(self.timeoutTime(), self)

    def pause(self):
        if not self.isStarted:
            return

        self.isPaused = not self.isPaused
        if self.isPaused:
            self.timer.stop()
        else:
            self.timer.start(self.timeoutTime(), self)

        self.update()

    def paintEvent(self, event):
        super(TetrixBoard, self).paintEvent(event)

        painter = QPainter(self)
        rect = self.contentsRect()

        if self.isPaused:
            painter.drawText(rect, Qt.AlignCenter, "Pause")
            return

        boardTop = rect.bottom() - TetrixBoard.BoardHeight * self.squareHeight()

        for i in range(TetrixBoard.BoardHeight):
            for j in range(TetrixBoard.BoardWidth):
                shape = self.shapeAt(j, TetrixBoard.BoardHeight - i - 1)
                if shape != NoShape:
                    self.drawSquare(painter,
                            rect.left() + j * self.squareWidth(),
                            boardTop + i * self.squareHeight(), shape)

        if self.curPiece.shape() != NoShape:
            for i in range(4):
                x = self.curX + self.curPiece.x(i)
                y = self.curY - self.curPiece.y(i)
                self.drawSquare(painter, rect.left() + x * self.squareWidth(),
                        boardTop + (TetrixBoard.BoardHeight - y - 1) * self.squareHeight(),
                        self.curPiece.shape())

    def keyPressEvent(self, event):
        if not self.isStarted or self.isPaused or self.curPiece.shape() == NoShape:
            super(TetrixBoard, self).keyPressEvent(event)
            return

        key = event.key()
        if key == Qt.Key_Left:
            self.tryMove(self.curPiece, self.curX - 1, self.curY)
        elif key == Qt.Key_Right:
            self.tryMove(self.curPiece, self.curX + 1, self.curY)
        elif key == Qt.Key_Down:
            self.tryMove(self.curPiece.rotatedRight(), self.curX, self.curY)
        elif key == Qt.Key_Up:
            self.tryMove(self.curPiece.rotatedLeft(), self.curX, self.curY)
        elif key == Qt.Key_Space:
            self.dropDown()
        elif key == Qt.Key_D:
            self.oneLineDown()
        else:
            super(TetrixBoard, self).keyPressEvent(event)

    def timerEvent(self, event):
        if event.timerId() == self.timer.timerId():
            if self.isWaitingAfterLine:
                self.isWaitingAfterLine = False
                self.newPiece()
                self.timer.start(self.timeoutTime(), self)
            else:
                self.oneLineDown()
        else:
            super(TetrixBoard, self).timerEvent(event)

    def clearBoard(self):
        self.board = [NoShape for i in range(TetrixBoard.BoardHeight * TetrixBoard.BoardWidth)]

    def dropDown(self):
        dropHeight = 0
        newY = self.curY
        while newY &gt; 0:
            if not self.tryMove(self.curPiece, self.curX, newY - 1):
                break
            newY -= 1
            dropHeight += 1

        self.pieceDropped(dropHeight)

    def oneLineDown(self):
        if not self.tryMove(self.curPiece, self.curX, self.curY - 1):
            self.pieceDropped(0)

    def pieceDropped(self, dropHeight):
        for i in range(4):
            x = self.curX + self.curPiece.x(i)
            y = self.curY - self.curPiece.y(i)
            self.setShapeAt(x, y, self.curPiece.shape())

        self.numPiecesDropped += 1
        if self.numPiecesDropped % 25 == 0:
            self.level += 1
            self.timer.start(self.timeoutTime(), self)
            self.levelChanged.emit(self.level)

        self.score += dropHeight + 7
        self.scoreChanged.emit(self.score)
        self.removeFullLines()

        if not self.isWaitingAfterLine:
            self.newPiece()

    def removeFullLines(self):
        numFullLines = 0

        for i in range(TetrixBoard.BoardHeight - 1, -1, -1):
            lineIsFull = True

            for j in range(TetrixBoard.BoardWidth):
                if self.shapeAt(j, i) == NoShape:
                    lineIsFull = False
                    break

            if lineIsFull:
                numFullLines += 1
                for k in range(TetrixBoard.BoardHeight - 1):
                    for j in range(TetrixBoard.BoardWidth):
                        self.setShapeAt(j, k, self.shapeAt(j, k + 1))

                for j in range(TetrixBoard.BoardWidth):
                    self.setShapeAt(j, TetrixBoard.BoardHeight - 1, NoShape)

        if numFullLines &gt; 0:
            self.numLinesRemoved += numFullLines
            self.score += 10 * numFullLines
            self.linesRemovedChanged.emit(self.numLinesRemoved)
            self.scoreChanged.emit(self.score)

            self.timer.start(500, self)
            self.isWaitingAfterLine = True
            self.curPiece.setShape(NoShape)
            self.update()

    def newPiece(self):
        self.curPiece = copy.deepcopy(self.nextPiece)
        self.nextPiece.setRandomShape()
        self.showNextPiece()
        self.curX = TetrixBoard.BoardWidth // 2 + 1
        self.curY = TetrixBoard.BoardHeight - 1 + self.curPiece.minY()

        if not self.tryMove(self.curPiece, self.curX, self.curY):
            self.curPiece.setShape(NoShape)
            self.timer.stop()
            self.isStarted = False

    def showNextPiece(self):
        if self.nextPieceLabel is None:
            return

        dx = self.nextPiece.maxX() - self.nextPiece.minX() + 1
        dy = self.nextPiece.maxY() - self.nextPiece.minY() + 1

        pixmap = QPixmap(dx * self.squareWidth(), dy * self.squareHeight())
        painter = QPainter(pixmap)
        painter.fillRect(pixmap.rect(), self.nextPieceLabel.palette().window())

        for i in range(4):
            x = self.nextPiece.x(i) - self.nextPiece.minX()
            y = self.nextPiece.y(i) - self.nextPiece.minY()
            self.drawSquare(painter, x * self.squareWidth(),
                    y * self.squareHeight(), self.nextPiece.shape())

        painter.end()

        self.nextPieceLabel.setPixmap(pixmap)

    def tryMove(self, newPiece, newX, newY):
        for i in range(4):
            x = newX + newPiece.x(i)
            y = newY - newPiece.y(i)
            if x &lt; 0 or x &gt;= TetrixBoard.BoardWidth or y &lt; 0 or y &gt;= TetrixBoard.BoardHeight:
                return False
            if self.shapeAt(x, y) != NoShape:
                return False

        self.curPiece = newPiece
        self.curX = newX
        self.curY = newY
        self.update()
        return True

    def drawSquare(self, painter, x, y, shape):
        colorTable = [0x000000, 0xCC6666, 0x66CC66, 0x6666CC,
                      0xCCCC66, 0xCC66CC, 0x66CCCC, 0xDAAA00]

        color = QColor(colorTable[shape])
        painter.fillRect(x + 1, y + 1, self.squareWidth() - 2,
                self.squareHeight() - 2, color)

        painter.setPen(color.lighter())
        painter.drawLine(x, y + self.squareHeight() - 1, x, y)
        painter.drawLine(x, y, x + self.squareWidth() - 1, y)

        painter.setPen(color.darker())
        painter.drawLine(x + 1, y + self.squareHeight() - 1,
                x + self.squareWidth() - 1, y + self.squareHeight() - 1)
        painter.drawLine(x + self.squareWidth() - 1,
                y + self.squareHeight() - 1, x + self.squareWidth() - 1, y + 1)


class TetrixPiece(object):
    coordsTable = (
        ((0, 0),     (0, 0),     (0, 0),     (0, 0)),
        ((0, -1),    (0, 0),     (-1, 0),    (-1, 1)),
        ((0, -1),    (0, 0),     (1, 0),     (1, 1)),
        ((0, -1),    (0, 0),     (0, 1),     (0, 2)),
        ((-1, 0),    (0, 0),     (1, 0),     (0, 1)),
        ((0, 0),     (1, 0),     (0, 1),     (1, 1)),
        ((-1, -1),   (0, -1),    (0, 0),     (0, 1)),
        ((1, -1),    (0, -1),    (0, 0),     (0, 1))
    )

    def __init__(self):
        self.coords = [[0, 0] for _ in range(4)]
        self.pieceShape = NoShape

        self.setShape(NoShape)

    def shape(self):
        return self.pieceShape

    def setShape(self, shape):
        table = TetrixPiece.coordsTable[shape]
        for i in range(4):
            for j in range(2):
                self.coords[i][j] = table[i][j]

        self.pieceShape = shape

    def setRandomShape(self):
        self.setShape(random.randint(1, 7))

    def x(self, index):
        return self.coords[index][0]

    def y(self, index):
        return self.coords[index][1]

    def setX(self, index, x):
        self.coords[index][0] = x

    def setY(self, index, y):
        self.coords[index][1] = y

    def minX(self):
        m = self.coords[0][0]
        for i in range(4):
            m = min(m, self.coords[i][0])

        return m

    def maxX(self):
        m = self.coords[0][0]
        for i in range(4):
            m = max(m, self.coords[i][0])

        return m

    def minY(self):
        m = self.coords[0][1]
        for i in range(4):
            m = min(m, self.coords[i][1])

        return m

    def maxY(self):
        m = self.coords[0][1]
        for i in range(4):
            m = max(m, self.coords[i][1])

        return m

    def rotatedLeft(self):
        if self.pieceShape == SquareShape:
            return self

        result = TetrixPiece()
        result.pieceShape = self.pieceShape
        for i in range(4):
            result.setX(i, self.y(i))
            result.setY(i, -self.x(i))

        return result

    def rotatedRight(self):
        if self.pieceShape == SquareShape:
            return self

        result = TetrixPiece()
        result.pieceShape = self.pieceShape
        for i in range(4):
            result.setX(i, -self.y(i))
            result.setY(i, self.x(i))

        return result


if __name__ == '__main__':

    import sys

    app = QApplication(sys.argv)
    window = TetrixWindow()
    window.show()
    random.seed(None)
    sys.exit(app.exec())</pre>
<p></p>
<h2>V-rep</h2>
<p><a href="http://lab.kmol.info/2017fall/blog/kmol-2017-fall-event-driven-programming-design.html">http://lab.kmol.info/2017fall/blog/kmol-2017-fall-event-driven-programming-design.html</a> </p>
<p><iframe allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/JPtW66z0-VQ" width="560"></iframe></p>
<h3>Lua 學習</h3>
<p><a href="http://notebook.kulchenko.com/programming/lua-good-different-bad-and-ugly-parts">http://notebook.kulchenko.com/programming/lua-good-different-bad-and-ugly-parts</a> </p>
<p><a href="https://github.com/CoppeliaRobotics/lua">https://github.com/CoppeliaRobotics/lua</a> </p>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/scripts.htm">http://www.coppeliarobotics.com/helpFiles/en/scripts.htm</a> </p>
<h2>車輛工程</h2>
<p>DIY 自動駕駛:</p>
<p><a href="https://github.com/commaai/openpilot">https://github.com/commaai/openpilot</a> </p>
<p><a href="https://comma.ai/">https://comma.ai/</a> </p>
<p>舊款自印硬體: <a href="https://github.com/commaai/neo">https://github.com/commaai/neo</a> </p>
<p><iframe allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/KTrgRYa2wbI" width="560"></iframe></p>
<p>自駕車: </p>
<p><a href="https://github.com/ndrplz/self-driving-car">https://github.com/ndrplz/self-driving-car</a> </p>
<p><a href="https://github.com/RyanZotti/Self-Driving-Car">https://github.com/RyanZotti/Self-Driving-Car</a> </p>
<p><a href="https://github.com/philbort/awesome-self-driving-cars">https://github.com/philbort/awesome-self-driving-cars</a> </p>
<p><a href="https://github.com/ApolloAuto/apollo">https://github.com/ApolloAuto/apollo</a> </p>
<h3>維修管理</h3>
<p><a href="http://t2100.myweb.hinet.net/">http://t2100.myweb.hinet.net/</a>  (汽車維修管理系統)</p>
<h2>ERPNext</h2>
<p><a href="https://github.com/frappe/erpnext">https://github.com/frappe/erpnext</a> </p>
<p><a href="https://github.com/frappe/frappe">https://github.com/frappe/frappe</a> </p>
<p><a href="https://erpnext.com/download">https://erpnext.com/download</a> </p>
<p><a href="https://www.maketecheasier.com/import-export-ova-files-in-virtualbox/">https://www.maketecheasier.com/import-export-ova-files-in-virtualbox/</a> </p>
<p><a href="https://www.clouderp.be/en/blog/285-installing-erpnext-on-windows-in-18-minutes">https://www.clouderp.be/en/blog/285-installing-erpnext-on-windows-in-18-minutes</a> </p>
<p>Frappe requirements:</p>
<pre>boto3
chardet
dropbox==7.3.1
gunicorn
jinja2
markdown2
PyMySQL
maxminddb-geolite2
python-dateutil
pytz
six
werkzeug
semantic_version
rauth&gt;=0.6.2
requests
redis
selenium
babel
ipython
html2text==2016.9.19
email_reply_parser
click
num2words==0.5.5
watchdog==0.8.0
bleach
bleach-whitelist
Pillow
beautifulsoup4
rq
schedule
cryptography
pyopenssl
ndg-httpsclient
pyasn1
zxcvbn-python
unittest-xml-reporting
oauthlib
pdfkit
PyJWT
PyPDF2
openpyxl
pyotp
pyqrcode
pypng
premailer
croniter
googlemaps
braintree
future
passlib
google-api-python-client
google-auth
google-auth-httplib2
google-auth-oauthlib
faker
stripe<br/><br/>Erpnext requirements:<br/><br/></pre>
<pre>frappe
unidecode
pygithub
googlemaps
python-stdnum
braintree
gocardless_pro
woocommerce</pre>
<h2>人臉辨識</h2>
<p><a href="https://github.com/meownoid/face-identification-tpe">https://github.com/meownoid/face-identification-tpe</a> </p>
<p>Real-time Object Detection:</p>
<p><a href="https://pjreddie.com/darknet/yolo/">https://pjreddie.com/darknet/yolo/</a></p>
<p>Neural Network Library by Sony:</p>
<p><a href="https://github.com/sony/nnabla">https://github.com/sony/nnabla</a></p>
<h4>Structure Sensor</h4>
<p><a href="https://structure.io/">https://structure.io/</a></p>
<p><a href="https://github.com/occipital/openni2">https://github.com/occipital/openni2</a> </p>
<p><a href="https://skanect.occipital.com/">https://skanect.occipital.com/</a> </p>
<p><a href="https://en.wikipedia.org/wiki/OpenNI">https://en.wikipedia.org/wiki/OpenNI</a> </p>
<p><iframe allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/nFyT2q8f_i4" width="560"></iframe></p>
<h2>輔助設計套件</h2>
<p>MCAD 套件</p>
<p><a href="http://lab.kmol.info/2017fall/blog/kmol-2017-fall-cadp-what-is-computer-aided-design.html">http://lab.kmol.info/2017fall/blog/kmol-2017-fall-cadp-what-is-computer-aided-design.html</a> </p>
<p>一般常見的機械電腦輔助設計套件包括法國<span> </span><a href="https://www.3ds.com/">Dassault</a><span> </span>公司的<span> </span><a href="https://www.3ds.com/products-services/solidworks/">SolidWorks</a><span> </span>與<span> </span><a href="https://www.3ds.com/products-services/catia/">Catia</a>, 美國<span> </span><a href="https://www.autodesk.com.tw/">AutoDesk</a><span> </span>公司的<span> </span><a href="https://www.autodesk.com.tw/products/autocad/">AutoCAD</a><span> </span>與<span> </span><a href="https://www.autodesk.com/products/inventor/overview">Inventor</a>, 德國<span> </span><a href="https://www.siemens.com/tw/zh/home.html">Siemens</a><span> </span>公司的<span> </span><a href="https://www.plm.automation.siemens.com/en/products/solid-edge/">Solid Edge</a><span> </span>與<span> </span><a href="https://www.plm.automation.siemens.com/zh/products/nx/index.shtml">NX</a>, 美國<span> </span><a href="http://www.ptc-taiwan.com/">PTC</a><span> </span>公司的<span> </span><a href="http://www.ptc-taiwan.com/cad">Creo</a>, 以及 2015 年推出的<span> </span><a href="https://www.onshape.com/">Onshape</a></p>
<p>其他 MCAD: 俄羅斯的<span> </span><a href="http://www.tflex.com/resources/tflexcadst/download/">T-Flex</a></p>
<p>如何進行電腦輔助機械設計專題</p>
<p>1. 文獻回顧 (Literature Review) 階段 - 了解現存既有的研究成果, 確立專題定位與目標</p>
<p>利用關鍵字搜尋相關文獻, 針對文獻回顧與探討, 初步定位專案性質以及從事專案的目標.</p>
<p>例如, 關鍵字:<span> </span><a href="https://www.google.com.tw/search?q=marble+machine+construction+set">marble machine construction set</a>,<span> </span><a href="https://www.google.com.tw/search?q=linkage+synthesis">linkage synthesis</a>,<span> </span><a href="https://www.google.com.tw/search?q=arduino+mechatronics">arduino mechatronics</a>,<span> </span><a href="https://www.google.com.tw/search?q=arduino+servo+control">arduino servo control</a>,<span> </span><a href="https://www.google.com.tw/search?q=lifter+linkage">lifter linkage</a>,<span> </span><a href="https://mde1a1.kmol.info/2017fall/raw/doing+a+literature+review.pdf?name=566d6dab70c1a7e7458a2c10c667416fea048170">Doing a Literature Review</a></p>
<p>2. 整理可用工具, 擬想何謂機械?何謂設計?何謂電腦輔助?擬想所要解決的問題, 準備開始進行電腦輔助機械設計專題</p>
<p>機械是一種功能明確的器物, 內容包含固體、流體與軟體元件, 彼此精巧配置結合, 可展現特定功能</p>
<p>設計是一種表達, 而且是可以讓人依循, 逐步按照指示, 完成設計者預想的結果, 且表達方法包含文字、口語、2D、3D、數學與實體方法.</p>
<p>文字結合 2D、3D、數學表達方法 - 設計專題報告</p>
<p>利用口語簡報設計專題內容 - 設計專題報告影片</p>
<p>電腦輔助 - 利用電腦的功能協助設計進行</p>
<p>電腦功能 - 設計組態管理、運算、模擬、網路資訊傳輸、展示、協同</p>
<p>例如:</p>
<p>零組件繪圖工具:<span> </span><a href="http://solvespace.com/">Solvespace</a><span> </span>(包含在隨身系統),<span> </span><a href="http://www.onshape.com/">Onshape</a><span> </span>(自行申請帳號),<span> </span><a href="http://www.ptc-taiwan.com/cad/creo">PTC Creo Parametric</a><span> </span>(可從區網下載可攜網路認證版本) ,<span> </span><a href="https://www.autodesk.com/products/inventor/overview">Autodesk Inventor</a><span> </span>(可自行申請免費學生版本或安裝系上提供之網路認證版本),<span> </span><a href="http://www.solidworks.com.cn/">Dassault Solidworks</a><span> </span>(可安裝學校提供之網路認證版本).</p>
<p>協同工具:<span> </span><a href="http://www.onshape.com/">Onshape</a><span> </span>(自行申請帳號),<span> </span><a href="https://a360.autodesk.com/">A360</a><span> </span>(自行申請帳號)</p>
<p>模擬工具:<span> </span><a href="http://www.coppeliarobotics.com/">V-rep</a><span> </span>(包含在隨身系統),<span> </span><a href="https://www.blender.org/">Blender</a><span> </span>(包含在隨身系統),<span> </span><a href="https://www.tinkercad.com/">Tinkercad</a><span> </span>(自行申請帳號)</p>
<p>控制與致動工具:<span> </span><a href="https://www.arduino.cc/">Arduino</a><span> </span>(包含在工具箱中),<span> </span><a href="http://www.instructables.com/id/Arduino-Servo-Motors/">Servo Motor</a><span> </span>(包含在工具箱中)</p>
<p>3D 列印工具:<span> </span><a href="http://atom3dp.com/">Delta Printer</a><span> </span>(由系上實習設備提供)</p>
<p>3. 根據專題定位與目標, 確定所要解決的問題項目, 逐一採模組式, 以協同流程, 透過自學、執行與檢討想像, 由簡入繁, 持續改進各模組的內容與功能, 在可用時間內, 解決各種問題, 終至完成專題, 達成目標.</p>
<p>鋼球循環運動系統設計</p>
<p>機構設計 - 軌道設計、鋼球提升與傳動系統設計、其他零組件設計</p>
<p>致動與控制系統設計 - 電路設計、伺服馬達致動程式設計</p>
<p>監控程式設計 - 以視窗程式啟動系統運作、傳回鋼球通過控制點訊息、計算運行距離與速度</p>
<p>marble lift mechanism</p>
<p>四連桿浮動桿通過三個位置的尺寸合成設計</p>
<p>六連桿尺寸合成</p>
<p>八連桿尺寸合成</p>
<p><a href="http://www.eddiesmind.com/basic-lifting-mechanisms.html">http://www.eddiesmind.com/basic-lifting-mechanisms.html</a></p>
<p>Linkage:<span> </span><a href="http://blog.rectorsquid.com/linkage-mechanism-designer-and-simulator/">http://blog.rectorsquid.com/linkage-mechanism-designer-and-simulator/</a><span> </span>(<a href="https://github.com/rectorsquid/Linkage">Source codes</a>)</p>
<p>LinkageDesigner (an add-on package to Wolfram's Mathematica):<span> </span><a href="http://www.linkagedesigner.com/">http://www.linkagedesigner.com/</a>,<span> </span><a href="https://www.wolfram.com/products/applications/linkagedesigner/">https://www.wolfram.com/products/applications/linkagedesigner/</a></p>
<p><a href="https://github.com/KmolYuan/Pyslvs-PyQt5">https://github.com/KmolYuan/Pyslvs-PyQt5</a></p>
<h4>Stl 零件 Viewer</h4>
<p>使用 Pygame 與 OpenGL</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#coding: utf8
# source: https://www.linux.com/community/blogs/133-general-linux/291889
import os
import struct

from OpenGL.GL import *
from OpenGL.GLU import *
import pygame
from pygame.locals import *

#class for a 3d point
class createpoint:
    def __init__(self,p,c=(1,0,0)):
        self.point_size=0.5
        self.color=c
        self.x=p[0]
        self.y=p[1]
        self.z=p[2]
      
    def glvertex(self):
        glVertex3f(self.x,self.y,self.z)

#class for a 3d face on a model
class createtriangle:
    points=None
    normal=None

    def __init__(self,p1,p2,p3,n=None):
        #3 points of the triangle
        self.points=createpoint(p1),createpoint(p2),createpoint(p3)
      
        #triangles normal
        self.normal=createpoint(self.calculate_normal(self.points[0],self.points[1],self.points[2]))#(0,1,0)#
  
    #calculate vector / edge
    def calculate_vector(self,p1,p2):
        return -p1.x+p2.x,-p1.y+p2.y,-p1.z+p2.z
      
    def calculate_normal(self,p1,p2,p3):
        a=self.calculate_vector(p3,p2)
        b=self.calculate_vector(p3,p1)
        #calculate the cross product returns a vector
        return self.cross_product(a,b)    
  
    def cross_product(self,p1,p2):
        return (p1[1]*p2[2]-p2[1]*p1[2]) , (p1[2]*p2[0])-(p2[2]*p1[0]) , (p1[0]*p2[1])-(p2[0]*p1[1])

class loader:
    model=[]
      
    #return the faces of the triangles
    def get_triangles(self):
        if self.model:
            for face in self.model:
                yield face

    #draw the models faces
    def draw(self):
        glBegin(GL_TRIANGLES)
        for tri in self.get_triangles():
            glNormal3f(tri.normal.x,tri.normal.y,tri.normal.z)
            glVertex3f(tri.points[0].x,tri.points[0].y,tri.points[0].z)
            glVertex3f(tri.points[1].x,tri.points[1].y,tri.points[1].z)
            glVertex3f(tri.points[2].x,tri.points[2].y,tri.points[2].z)
        glEnd()
  
    #load stl file detects if the file is a text file or binary file
    def load_stl(self,filename):
        #read start of file to determine if its a binay stl file or a ascii stl file
        fp=open(filename,'rb')
        h=fp.read(80)
        type=h[0:5]
        fp.close()

        if type=='solid':
            print ("reading text file"+str(filename))
            self.load_text_stl(filename)
        else:
            print ("reading binary stl file "+str(filename,))
            self.load_binary_stl(filename)
  
    #read text stl match keywords to grab the points to build the model
    def load_text_stl(self,filename):
        fp=open(filename,'r')

        for line in fp.readlines():
            words=line.split()
            if len(words)&gt;0:
                if words[0]=='solid':
                    self.name=words[1]

                if words[0]=='facet':
                    center=[0.0,0.0,0.0]
                    triangle=[]
                    normal=(eval(words[2]),eval(words[3]),eval(words[4]))
                  
                if words[0]=='vertex':
                    triangle.append((eval(words[1]),eval(words[2]),eval(words[3])))
                  
                  
                if words[0]=='endloop':
                    #make sure we got the correct number of values before storing
                    if len(triangle)==3:
                        self.model.append(createtriangle(triangle[0],triangle[1],triangle[2],normal))
        fp.close()

    #load binary stl file check wikipedia for the binary layout of the file
    #we use the struct library to read in and convert binary data into a format we can use
    def load_binary_stl(self,filename):
        fp=open(filename,'rb')
        h=fp.read(80)

        l=struct.unpack('I',fp.read(4))[0]
        count=0
        while True:
            try:
                p=fp.read(12)
                if len(p)==12:
                    n=struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]
                  
                p=fp.read(12)
                if len(p)==12:
                    p1=struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]

                p=fp.read(12)
                if len(p)==12:
                    p2=struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]

                p=fp.read(12)
                if len(p)==12:
                    p3=struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]

                new_tri=(n,p1,p2,p3)

                if len(new_tri)==4:
                    tri=createtriangle(p1,p2,p3,n)
                    self.model.append(tri)
                count+=1
                fp.read(2)

                if len(p)==0:
                    break
            except EOFError:
                break
        fp.close()

      

class draw_scene:
    def __init__(self,style=1):
        #create a model instance and
        self.model1=loader()
        #self.model1.load_stl(os.path.abspath('')+'/text.stl')
        self.model1.load_stl(os.path.abspath('')+'/cube.stl')
        self.init_shading()


    #solid model with a light / shading
    def init_shading(self):
        glShadeModel(GL_SMOOTH)
        glClearColor(0.0, 0.0, 0.0, 0.0)
        glClearDepth(1.0)
        glEnable(GL_DEPTH_TEST)
        glShadeModel(GL_SMOOTH) 
        glDepthFunc(GL_LEQUAL)
        glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST)
      
        glEnable(GL_COLOR_MATERIAL)
        glEnable(GL_LIGHTING)
        glEnable(GL_LIGHT0)   
        glLight(GL_LIGHT0, GL_POSITION,  (0, 1, 1, 0))      
        glMatrixMode(GL_MODELVIEW)
      
    def resize(self, width, height):
        if height==0:
            height=1
        glViewport(0, 0, width, height)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(45, 1.0*width/height, 0.1, 100.0)
        #gluLookAt(0.0,0.0,45.0,0,0,0,0,40.0,0)
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()
      

    def init(self):
        glShadeModel(GL_SMOOTH)
        glClearColor(0.0, 0.0, 0.0, 0.0)
        glClearDepth(1.0)
        glEnable(GL_DEPTH_TEST)
        glShadeModel(GL_SMOOTH) 
        glDepthFunc(GL_LEQUAL)
        glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST)

      
        glEnable(GL_COLOR_MATERIAL)
      
        glEnable(GL_LIGHTING)
        glEnable(GL_LIGHT0)   
        glLight(GL_LIGHT0, GL_POSITION,  (0, 1, 1, 0))

        glMatrixMode(GL_MODELVIEW)

    def draw(self):
        glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
        glLoadIdentity()
      
        glTranslatef(0.0,-26.0, -100.0)
        self.model1.draw()

#main program loop
def main():
    #initalize pygame
    pygame.init()
    pygame.display.set_mode((640,480), OPENGL|DOUBLEBUF)

    #setup the open gl scene
    scene=draw_scene()
    scene.resize(640,480)
  
    frames = 0
    ticks = pygame.time.get_ticks()
    while 1:
        event = pygame.event.poll()
        if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
            break
      
        #draw the scene
        scene.draw()
        pygame.display.flip()
        frames = frames+1

    print ("fps:  %d" % ((frames*1000)/(pygame.time.get_ticks()-ticks)))


if __name__ == '__main__':
    main()</pre>
<p>使用 VPython</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#coding: utf-8
# STL viewer 原始檔案來自
# University of Wuppertal - http://mbi-wiki.uni-wuppertal.de/wordpress/
# Modified by Uli Eggersmann
# Binary STL 資料讀取原始作者 Oliver Marks - http://www.linux.com
# 原始檔案僅讀取 Text STL 零件檔案
# 2011 Fall 由 KMOL 新增 Binary STL 零件檔案讀取

from visual import scene, color, materials, faces, points
import os, struct

#file ="ritzel.stl"

file ="binary.stl"

scene.width = 400
scene.height = 400
scene.background = color.white # black
# 視窗標題取自 cvisual.pyd, 不可使用中文
scene.title = "STLViewer in VPython"
 
print ("利用滑鼠右鍵旋轉")
print ("滑鼠左右鍵同時按下後移動, 可以縮放畫面")
 
# Read STL file, only use vertex-line with xyz coordinates
list = []

#load stl file detects if the file is a text file or binary file
def load_stl(filename):
    #read start of file to determine if its a binay stl file or a ascii stl file
    fp=open(filename,'rb')
    header=fp.read(80)
    filetype=header[0:5]
    # 這裡必須要能夠分辨二位元字串與文字字串
    #print (type(filetype))
    #print (filetype)
    fp.close()
    
    # for Python 3
    if filetype==b'solid':
    # for Python 2
    #if filetype=='solid':
        print ("讀取文字檔案格式:"+str(filename))
        load_text_stl(filename)
    else:
        print ("讀取二位元檔案格式:"+str(filename,))
        load_binary_stl(filename)

#load binary stl file check wikipedia for the binary layout of the file
#we use the struct library to read in and convert binary data into a format we can use
def load_binary_stl(filename):
    '''
    二位元 STL 檔案格式如下:
    檔案標頭共有 80 個字元(bytes), 內容通常省略, 但是內容不可使用 solid, 以免與文字檔案 STL 混淆
    UINT8[80] – Header
    UINT32 – Number of triangles (I:佔 4 bytes 的 unsigned integer)

    foreach triangle
    REAL32[3] – Normal vector (f:每一座標分量為一佔 4 bytes 的 float, 共佔 12 bytes)
    REAL32[3] – Vertex 1
    REAL32[3] – Vertex 2
    REAL32[3] – Vertex 3
    UINT16 – Attribute byte count (H:兩個 bytes 的 unsigned short, 表示 attribute byte count)
    end

    '''
    global list
    
    fp=open(filename,'rb')
    header=fp.read(80)

    triangle_number = struct.unpack('I',fp.read(4))[0]
    count=0
    while True:
        try:
            p=fp.read(12)
            if len(p)==12:
                n=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
              
            p=fp.read(12)
            if len(p)==12:
                p1=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
                list.append(p1)
            p=fp.read(12)
            if len(p)==12:
                p2=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
                list.append(p2)
            p=fp.read(12)
            if len(p)==12:
                p3=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
                list.append(p3)
            # 使用 count 來計算三角形平面個數
            # triangle_number 為 STL 檔案中的三角形個數
            count += 1
            # 在前面 12*4 個 bytes 的 normal 與三個點資料後, 為
            # 一個 2 bytes 長的 unsigned short, 其值為零, 為 attribute
            fp.read(2)
            # 讀完所有三角平面後, 即跳出 while
            if count &gt; triangle_number:
                break
        except EOFError:
            break
    fp.close()


def load_text_stl(filename):
    global list
    for dataline in open(filename,"r").readlines():
        if not dataline.strip(): # skip blank lines
            continue
        field = dataline.split() # split with no argument makes the right place!
        if field[0] == "vertex":
            list.append([float(x) for x in field[1:4]])
            #print (list)
            #break
            #for x in field[1:4]:
                #print(x)

load_stl(os.path.abspath('')+'/'+file)


# Graphics
model = faces(pos=list, color=(0.8,0.8,0.8),
              material=materials.plastic) # creates triangles
# 請注意, 這裡並沒有使用 STL 檔案中的平面 normal, 而是利用 VPython make_normals() 產生
model.make_normals() # creates plane normals
model.smooth(0.93) # smooths the edges
# = AllepunkteSTL points (pos = list, size = 3, color = Color.Black) # generates points </pre>
<p>STL writer</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#coding:utf-8
# source: http://code.activestate.com/recipes/578246-stl-writer/

import struct

ASCII_FACET = """facet normal 0 0 0
outer loop
vertex {face[0][0]:.4f} {face[0][1]:.4f} {face[0][2]:.4f}
vertex {face[1][0]:.4f} {face[1][1]:.4f} {face[1][2]:.4f}
vertex {face[2][0]:.4f} {face[2][1]:.4f} {face[2][2]:.4f}
endloop
endfacet
"""

BINARY_HEADER ="80sI"
BINARY_FACET = "12fH"

class ASCII_STL_Writer:
    """ Export 3D objects build of 3 or 4 vertices as ASCII STL file.
    """
    def __init__(self, stream):
        self.fp = stream
        self._write_header()

    def _write_header(self):
        self.fp.write("solid python\n")

    def close(self):
        self.fp.write("endsolid python\n")

    def _write(self, face):
        self.fp.write(ASCII_FACET.format(face=face))

    def _split(self, face):
        p1, p2, p3, p4 = face
        return (p1, p2, p3), (p3, p4, p1)

    def add_face(self, face):
        """ Add one face with 3 or 4 vertices. """
        if len(face) == 4:
            face1, face2 = self._split(face)
            self._write(face1)
            self._write(face2)
        elif len(face) == 3:
            self._write(face)
        else:
            raise ValueError('only 3 or 4 vertices for each face')

    def add_faces(self, faces):
        """ Add many faces. """
        for face in faces:
            self.add_face(face)

class Binary_STL_Writer(ASCII_STL_Writer):
    """ Export 3D objects build of 3 or 4 vertices as binary STL file.
    """
    def __init__(self, stream):
        self.counter = 0
        super(Binary_STL_Writer, self).__init__(stream)

    def close(self):
        self._write_header()

    def _write_header(self):
        self.fp.seek(0)
        self.fp.write(struct.pack(BINARY_HEADER, b'Python Binary STL Writer', self.counter))

    def _write(self, face):
        self.counter += 1
        data = [
            0., 0., 0.,
            face[0][0], face[0][1], face[0][2],
            face[1][0], face[1][1], face[1][2],
            face[2][0], face[2][1], face[2][2],
            0
        ]
        self.fp.write(struct.pack(BINARY_FACET, *data))


def example():
    def get_cube():
        # cube corner points
        s = 3.
        p1 = (0, 0, 0)
        p2 = (0, 0, s)
        p3 = (0, s, 0)
        p4 = (0, s, s)
        p5 = (s, 0, 0)
        p6 = (s, 0, s)
        p7 = (s, s, 0)
        p8 = (s, s, s)

        # define the 6 cube faces
        # faces just lists of 3 or 4 vertices
        return [
            [p1, p5, p7, p3],
            [p1, p5, p6, p2],
            [p5, p7, p8, p6],
            [p7, p8, p4, p3],
            [p1, p3, p4, p2],
            [p2, p6, p8, p4],
        ]
    '''
    for writing ASCII STL cube file
    with open('cube_ascii.stl', 'w') as fp:
        writer = ASCII_STL_Writer(fp)
        writer.add_faces(get_cube())
        writer.close()
    '''
    with open('cube_bin.stl', 'wb') as fp:
        writer = Binary_STL_Writer(fp)
        writer.add_faces(get_cube())
        writer.close()

if __name__ == '__main__':
    example()</pre>
<p></p>
<h3>NURB-Python</h3>
<p><a href="https://github.com/orbingol/NURBS-Python">https://github.com/orbingol/NURBS-Python</a> </p>
<p><a href="https://github.com/orbingol/NURBS-Python_Examples">https://github.com/orbingol/NURBS-Python_Examples</a> </p>
<h3>libfive</h3>
<p><a href="https://github.com/libfive/libfive">https://github.com/libfive/libfive</a> </p>
<h3>robovision</h3>
<p>https://github.com/stoic1979/robovision</p>
<h3>jsketcher</h3>
<p>https://github.com/xibyte/jsketcher</p>
<h3>kmolcad</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from PyQt5 import QtWidgets, uic
from PyQt5.QtWidgets import QTableWidgetItem
from PyQt5.QtGui import QPen, QColor, QImage, QPixmap, QPainter
from PyQt5.QtCore import Qt, QTime, QCoreApplication, QEventLoop, QPoint
import time

col_one = Qt.black
col_zero = Qt.white


class Window(QtWidgets.QMainWindow):
    def __init__(self):
        QtWidgets.QWidget.__init__(self)
        uic.loadUi("window.ui", self)
        self.scene = myScene(0, 0, 561, 581)
        self.scene.win = self
        self.view.setScene(self.scene)
        self.image = QImage(561, 581, QImage.Format_ARGB32_Premultiplied)
        self.image.fill(col_zero)
        self.lock.clicked.connect(lambda: lock(self))
        self.erase.clicked.connect(lambda: clean_all(self))
        self.paint.clicked.connect(lambda: fill_xor(self))
        self.addpoint.clicked.connect(lambda: add_point_by_btn(self))
        self.edges = []
        self.point_now = None
        self.point_lock = None
        self.pen = QPen(col_one)
        self.delay.setChecked(False)


class myScene(QtWidgets.QGraphicsScene):
    def mousePressEvent(self, event):
        add_point(event.scenePos())


def add_row(win):
    win.table.insertRow(win.table.rowCount())


def add_point(point):
    global w
    if w.point_now is None:
        w.point_now = point
        w.point_lock = point
        add_row(w)
        i = w.table.rowCount() - 1
        item_x = QTableWidgetItem("{0}".format(point.x()))
        item_y = QTableWidgetItem("{0}".format(point.y()))
        w.table.setItem(i, 0, item_x)
        w.table.setItem(i, 1, item_y)
    else:
        w.edges.append([w.point_now.x(), w.point_now.y(),
                        point.x(), point.y()])
        w.point_now = point
        add_row(w)
        i = w.table.rowCount() - 1
        item_x = QTableWidgetItem("{0}".format(point.x()))
        item_y = QTableWidgetItem("{0}".format(point.y()))
        w.table.setItem(i, 0, item_x)
        w.table.setItem(i, 1, item_y)
        item_x = w.table.item(i-1, 0)
        item_y = w.table.item(i-1, 1)
        w.scene.addLine(point.x(), point.y(), float(item_x.text()), float(item_y.text()), w.pen)
    #print(w.edges)


def lock(win):
    win.edges.append([win.point_now.x(), win.point_now.y(), win.point_lock.x(), win.point_lock.y()])
    win.scene.addLine(win.point_now.x(), win.point_now.y(), win.point_lock.x(), win.point_lock.y(), w.pen)
    win.point_now = None
    #print(win.edges)


def clean_all(win):
    win.scene.clear()
    win.table.clear()
    win.edges = []
    win.point_now = None
    win.point_lock = None
    win.image.fill(col_zero)
    r = win.table.rowCount()
    for i in range(r, -1, -1):
        win.table.removeRow(i)


def draw_edges(image, edges):
    p = QPainter()
    p.begin(image)
    p.setPen(QPen(col_one))
    for ed in edges:
        p.drawLine(ed[0], ed[1], ed[2], ed[3])
    p.end()


def delay():
    #QCoreApplication.processEvents(QEventLoop.AllEvents, 1)
    QtWidgets.QApplication.processEvents(QEventLoop.AllEvents, 1)
    #time.sleep(.005)

    """t = QTime.currentTime().addMSecs(1)
    while QTime.currentTime() &lt; t:
        QCoreApplication.processEvents(QEventLoop.AllEvents, 1)"""


def find_max_y(ed):
    x_max = None
    for i in range(len(ed)):
        if x_max is None or ed[i][0] &gt; x_max:
            x_max = ed[i][0]

        if x_max is None or ed[i][2] &gt; x_max:
            x_max = ed[i][2]

    return x_max


def fill_xor(win):
    pix = QPixmap()
    p = QPainter()


    xm = int(find_max_y(win.edges))
    for ed in win.edges:
        p.begin(win.image)
        # if the horizontal edge is farther
        if ed[1] == ed[3]:
            continue
        # otherwise we define scanning boundaries
        if ed[1] &gt; ed[3]:
            ed[1], ed[3] = ed[3], ed[1]

            ed[0], ed[2] = ed[2], ed[0]
            

        y = ed[1]
        end_y = ed[3]
        dx = (ed[2] - ed[0]) / (ed[3] - ed[1])
        start_x = ed[0]

        while y &lt; end_y:
            # determine the intersection

            x = start_x
            while x &lt; xm:
                col = QColor(win.image.pixel(x, y))
                if col == col_zero:
                    p.setPen(QPen(col_one))
                else:
                    p.setPen(QPen(col_zero))
                p.drawPoint(x, y)
                x += 1

            start_x += dx
            y += 1

            if win.delay.isChecked():
                delay()
                pix.convertFromImage(win.image)
                win.scene.addPixmap(pix)

        if not win.delay.isChecked():
            pix.convertFromImage(win.image)
            win.scene.addPixmap(pix)
        p.end()
    draw_edges(win.image, win.edges)

def add_point_by_btn(win):
    x = win.x.value()
    y = win.y.value()
    p = QPoint()
    p.setX(x)
    p.setY(y)
    add_point(p)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    w = Window()
    w.show()
    sys.exit(app.exec_())</pre>
<p>window.ui</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui version="4.0"&gt;
 &lt;class&gt;MainWindow&lt;/class&gt;
 &lt;widget class="QMainWindow" name="MainWindow"&gt;
  &lt;property name="geometry"&gt;
   &lt;rect&gt;
    &lt;x&gt;0&lt;/x&gt;
    &lt;y&gt;0&lt;/y&gt;
    &lt;width&gt;809&lt;/width&gt;
    &lt;height&gt;605&lt;/height&gt;
   &lt;/rect&gt;
  &lt;/property&gt;
  &lt;property name="windowTitle"&gt;
   &lt;string&gt;Filling areasstring&lt;/string&gt;
  &lt;/property&gt;
  &lt;widget class="QWidget" name="centralwidget"&gt;
   &lt;widget class="QGraphicsView" name="view"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;10&lt;/x&gt;
      &lt;y&gt;10&lt;/y&gt;
      &lt;width&gt;561&lt;/width&gt;
      &lt;height&gt;581&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QTableWidget" name="table"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;590&lt;/x&gt;
      &lt;y&gt;10&lt;/y&gt;
      &lt;width&gt;211&lt;/width&gt;
      &lt;height&gt;241&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;column&gt;
     &lt;property name="text"&gt;
      &lt;string&gt;X&lt;/string&gt;
     &lt;/property&gt;
    &lt;/column&gt;
    &lt;column&gt;
     &lt;property name="text"&gt;
      &lt;string&gt;Y&lt;/string&gt;
     &lt;/property&gt;
    &lt;/column&gt;
   &lt;/widget&gt;
   &lt;widget class="QPushButton" name="paint"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;620&lt;/x&gt;
      &lt;y&gt;560&lt;/y&gt;
      &lt;width&gt;113&lt;/width&gt;
      &lt;height&gt;32&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;Colorize&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QPushButton" name="lock"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;620&lt;/x&gt;
      &lt;y&gt;500&lt;/y&gt;
      &lt;width&gt;113&lt;/width&gt;
      &lt;height&gt;32&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;Close&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QPushButton" name="erase"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;620&lt;/x&gt;
      &lt;y&gt;530&lt;/y&gt;
      &lt;width&gt;113&lt;/width&gt;
      &lt;height&gt;32&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;Clear&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QCheckBox" name="delay"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;620&lt;/x&gt;
      &lt;y&gt;480&lt;/y&gt;
      &lt;width&gt;141&lt;/width&gt;
      &lt;height&gt;20&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="font"&gt;
     &lt;font&gt;
      &lt;pointsize&gt;13&lt;/pointsize&gt;
     &lt;/font&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;With a delay&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QPushButton" name="addpoint"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;600&lt;/x&gt;
      &lt;y&gt;410&lt;/y&gt;
      &lt;width&gt;141&lt;/width&gt;
      &lt;height&gt;32&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;Add Point&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QSpinBox" name="x"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;620&lt;/x&gt;
      &lt;y&gt;440&lt;/y&gt;
      &lt;width&gt;48&lt;/width&gt;
      &lt;height&gt;24&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="minimum"&gt;
     &lt;number&gt;1&lt;/number&gt;
    &lt;/property&gt;
    &lt;property name="maximum"&gt;
     &lt;number&gt;561&lt;/number&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QSpinBox" name="y"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;700&lt;/x&gt;
      &lt;y&gt;440&lt;/y&gt;
      &lt;width&gt;48&lt;/width&gt;
      &lt;height&gt;24&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="minimum"&gt;
     &lt;number&gt;1&lt;/number&gt;
    &lt;/property&gt;
    &lt;property name="maximum"&gt;
     &lt;number&gt;581&lt;/number&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QLabel" name="label"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;600&lt;/x&gt;
      &lt;y&gt;440&lt;/y&gt;
      &lt;width&gt;16&lt;/width&gt;
      &lt;height&gt;16&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;X&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QLabel" name="label_2"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;680&lt;/x&gt;
      &lt;y&gt;440&lt;/y&gt;
      &lt;width&gt;16&lt;/width&gt;
      &lt;height&gt;16&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;Y&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QSpinBox" name="p_y"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;700&lt;/x&gt;
      &lt;y&gt;370&lt;/y&gt;
      &lt;width&gt;48&lt;/width&gt;
      &lt;height&gt;24&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="minimum"&gt;
     &lt;number&gt;1&lt;/number&gt;
    &lt;/property&gt;
    &lt;property name="maximum"&gt;
     &lt;number&gt;581&lt;/number&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QLabel" name="label_3"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;600&lt;/x&gt;
      &lt;y&gt;370&lt;/y&gt;
      &lt;width&gt;16&lt;/width&gt;
      &lt;height&gt;16&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;X&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QPushButton" name="pixel"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;580&lt;/x&gt;
      &lt;y&gt;330&lt;/y&gt;
      &lt;width&gt;211&lt;/width&gt;
      &lt;height&gt;32&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;Enter the seed pixel&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QSpinBox" name="p_x"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;620&lt;/x&gt;
      &lt;y&gt;370&lt;/y&gt;
      &lt;width&gt;48&lt;/width&gt;
      &lt;height&gt;24&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="minimum"&gt;
     &lt;number&gt;1&lt;/number&gt;
    &lt;/property&gt;
    &lt;property name="maximum"&gt;
     &lt;number&gt;561&lt;/number&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QLabel" name="label_4"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;680&lt;/x&gt;
      &lt;y&gt;370&lt;/y&gt;
      &lt;width&gt;16&lt;/width&gt;
      &lt;height&gt;16&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;Y&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QLabel" name="label_5"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;640&lt;/x&gt;
      &lt;y&gt;300&lt;/y&gt;
      &lt;width&gt;71&lt;/width&gt;
      &lt;height&gt;20&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;Radius&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QPushButton" name="addcircle"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;580&lt;/x&gt;
      &lt;y&gt;270&lt;/y&gt;
      &lt;width&gt;211&lt;/width&gt;
      &lt;height&gt;32&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="text"&gt;
     &lt;string&gt;Add circle&lt;/string&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
   &lt;widget class="QSpinBox" name="rad"&gt;
    &lt;property name="geometry"&gt;
     &lt;rect&gt;
      &lt;x&gt;700&lt;/x&gt;
      &lt;y&gt;300&lt;/y&gt;
      &lt;width&gt;48&lt;/width&gt;
      &lt;height&gt;24&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;property name="minimum"&gt;
     &lt;number&gt;1&lt;/number&gt;
    &lt;/property&gt;
    &lt;property name="maximum"&gt;
     &lt;number&gt;561&lt;/number&gt;
    &lt;/property&gt;
    &lt;property name="value"&gt;
     &lt;number&gt;160&lt;/number&gt;
    &lt;/property&gt;
   &lt;/widget&gt;
  &lt;/widget&gt;
 &lt;/widget&gt;
 &lt;resources/&gt;
 &lt;connections/&gt;
&lt;/ui&gt;</pre>
<p>參考資料</p>
<p><a href="https://github.com/Panda-Lewandowski/Computer-graphics">https://github.com/Panda-Lewandowski/Computer-graphics</a> </p>
<p><a href="https://github.com/chiamingyen/PythonCAD_py3">https://github.com/chiamingyen/PythonCAD_py3</a> </p>
<h1>分組專題</h1>
<p>分組專題報告</p>
<p>章節</p>
<ul>
<li>標題頁 - 含報告標題、作者、日期與所屬單位</li>
<li>目錄 - 列出全文章節與所屬頁面連結</li>
<li>摘要 - 解釋報告編寫動機、報告重點、結論、建議與關鍵字</li>
<li>前言 - 簡要描述全文意旨與背景, 說明報告目標與報告內容組成架構</li>
<li>內文 - 依照章節標題, 詳細說明報告內容, 包括方法、操作步驟與所得結果的詳細說明</li>
<li>結論 - 條列所獲致的重要成果, 與摘要及導言中的目標互相呼應</li>
<li>討論與建議 - 說明後續值得進行的方向、方法與可能遭遇問題的討論</li>
<li>參考 - 詳列所引用的參考內容</li>
<li>附錄 - 附加值得參考的詳細內容</li>
</ul>
<h2>分組題目</h2>
<p><a href="https://github.com/mdecourse/wcms-scrum1">https://github.com/mdecourse/wcms-scrum1</a> </p>
<p>單機工程用計算機設計</p>
<p>網際工程用計算機設計</p>
<p>正齒輪嚙合傳動齒面寬設計</p>
<p>網際 PMKS (Planar Mechanism Kinematic Simulator): <a href="https://designengrlab.github.io/PMKS/">https://designengrlab.github.io/PMKS/</a> </p>
<p><a href="https://design.engr.oregonstate.edu/matthew-campbell-phd-dissertation">https://design.engr.oregonstate.edu/matthew-campbell-phd-dissertation</a>  or <a href="/downloads/matthew_i_campbell_phd_dissertation.pdf">The A-Design Invention Machine.pdf</a></p>
<p><a href="https://ir.library.oregonstate.edu/downloads/2801pk71p">Automated Synthesis of Planar Mechanisms with Revolute, Prismatic and Pin-In-Slot Joints.pdf</a> (or <a href="/downloads/2015Automated%20Synthesis of Planar Mechanisms with Revolute Prismatic.pdf">local</a>)</p>
<p>Gruebler’s Equation</p>
<p>Degrees of freedom for planar linkages joined with common joints can be calculated through Gruebler’s equation.</p>
<p>Gruebler’s equation is given by the formula:<br/>Gruebler's equation formula for calculating degrees of freedom</p>
<p>dof = 3(n-1)-2jp-jh</p>
<p>where,<br/>n = total number of links in the mechanism<br/>jp = total number of primary joints (pins or sliding joints)<br/>jh = total number of higher-order joints (cam or gear joints)</p>
<p>Exception to Gruebler’s Equation:</p>
<p>The Gruebler’s equation does not account for link geometry, in rare instances, it can lead to misleading results.</p>
<p>Notice that the linkage contains five links and six pin joints. Using Gruebler’s equation, this linkage has zero degrees of freedom. Of course, this suggests that the mechanism is locked. However, if all pivoted links were the same size and the distance between the joints on the frame and coupler were identical, this mechanism is capable of motion, with a single degree of freedom. The center link is redundant and because it is identical in length to the other two links attached to the frame, it does not alter the action of the linkage.</p>
<p>There are other examples of mechanisms that violate the Gruebler’s equation because of unique geometry. A designer must be aware that the mobility equation can, at times, lead to inconsistencies.</p>
<p>A graph consists of a set of vertices (points) together with a set of edges or lines.<br/>The set of vertices is connected by the set of edges. Let the graph be denoted by<br/>the symbol G, the vertex by set V , and the edge by set E. We call a graph with v<br/>vertices and e edges a (v, e) graph. Edges and vertices in a graph should be labeled<br/>or colored, otherwise they are indistinguishable.<br/>Each edge of a graph connects two vertices called the end points. We specify an<br/>edge by its end points; that is, eij denotes the edge connecting vertices i and j . An<br/>edge is said to be incident with a vertex, if the vertex is an end point of that edge.<br/>The two end points of an edge are said to be adjacent. Two edges are adjacent if they<br/>are incident to a common vertex.</p>
<h2>符號式推導</h2>
<p>使用 Python 的符號式推導前, 需要先安裝 <a href="https://github.com/sympy/sympy">sympy</a> 模組:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">python -m pip install sympy</pre>
<p>參考資料: <a href="https://github.com/mdecourse/2017springcd/tree/gh-pages/data">https://github.com/mdecourse/2017springcd/tree/gh-pages/data</a> </p>
<p>PLAP - 已知三角形 abc,  <span style="background-color: #ffff00;">P</span>oint a 座標, <span style="background-color: #ffff00;">L</span>ength of a to C, and <span style="background-color: #ffff00;">A</span>ngle of ac link relative to ab, and <span style="background-color: #ffff00;">P</span>oint b 座標.</p>
<p>求 c 點座標, 表示為已知輸入變數的方程式.</p>
<p><img alt="" height="486" src="/download/?type=images&amp;filename=fourbar_plap_solvespace.png" width="800"/><img alt="" height="487" src="/images/plap.png" width="800"/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#PLAP
from sympy import symbols, sqrt, solve, cos, sin, Abs

# inputs
ax, ay, bx, by, bac, ac = symbols('ax ay bx by bac ac')
# intermediate variables
ab, dab = symbols('ab dab')
ad, bd = symbols('ad bd')
# outputs
cx, cy = symbols('cx cy')
# 從 a, b 點座標求 ab, ad 與 bd
ab = sqrt((ax-bx)**2+(ay-by)**2)
ad = Abs(bx-ax)
bd = Abs(by-ay)
data = solve(-bd**2+ad**2+ab**2-2*ad*ab*cos(dab), dab)
# 第1組解
dab = data[0]
cx = ax+ac*cos(dab+bac)
cy = ay+ac*sin(dab+bac)
print("cx=", cx, "cy=", cy)
# 第二組解
dab = data[1]
cx = ax+ac*cos(dab+bac)
cy = ay+ac*sin(dab+bac)
print("cx=", cx, "cy=", cy)</pre>
<p>PLLP - 已知三角形 abc,  順時鐘方向 Point a 座標,  Length of ac 與 Length of cb, 以及 Point b 座標.</p>
<p>求 c 點座標, 表示為已知輸入變數的方程式.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#PLLP
from sympy import symbols, sqrt, solve, cos, sin, Abs

# inputs
ax, ay, bx, by, ac, cb = symbols('ax ay bx by ac cb')
# intermediate variables
ab, dab, bac, degree= symbols('ab dab bac degree')
ad, bd = symbols('ad bd')
# outputs
cx, cy = symbols('cx cy')
# 從 a, b 點座標求 ab, ad 與 bd

ab = sqrt((ax-bx)**2+(ay-by)**2)
'''
ac = sqrt((ax-cx)**2+(ay-cy)**2)
cb = sqrt((cx-bx)**2+(cy-by)**2)
#ac = sqrt((ax-cx)**2+(ay-cy)**2)
'''
# 從兩組解中擇一
data = solve([ac**2-((ax-cx)**2+(ay-cy)**2), cb**2-((cx-bx)**2+(cy-by)**2)], [cx, cy])
# 第1組解
print("cx = ", data[0][0])
print("cy = ", data[1][0])
# 第2組解
print("cx = ", data[0][1])
print("cy = ", data[1][1])
</pre>
<p>PLPP - 已知 Point b 座標, Length of be, Point c 座標與 Point d 座標.</p>
<p>求 e 點座標, 表示為已知輸入變數的方程式.</p>
<p><img alt="" height="446" src="/download/?type=images&amp;filename=plpp_crank_slider.png" width="800"/><img alt="" height="445" src="/images/plpp.png" width="800"/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#PLPP
from sympy import symbols, sqrt, solve

# inputs
bx, by, be, cx, cy, dx, dy = symbols('bx by be cx cy dx dy')
# intermediate variables
cd, m= symbols('cd m')
# outputs
ex, ey = symbols('ex ey')
# e on line cd
cd = sqrt((cx-dx)**2+(cy-dy)**2)
m = (dx-cx)/(dy-cy)
data = solve([be-sqrt((bx-ex)**2+(by-ey)**2), ex-cx-m*(ey-cy)] ,  [ex, ey])
print(data)
'''
[(((cx - dx)*(bx*cx*cy - bx*cx*dy - bx*cy*dx + bx*dx*dy + by*cy**2 - 2*by*cy*dy + by*dy**2 + cx**2*dy - cx*cy*dx - cx*dx*dy + cy*dx**2 + (-cy + dy)*sqrt(be**2*cx**2 - 2*be**2*cx*dx + be**2*cy**2 - 2*be**2*cy*dy + be**2*dx**2 + be**2*dy**2 - bx**2*cy**2 + 2*bx**2*cy*dy - bx**2*dy**2 + 2*bx*by*cx*cy - 2*bx*by*cx*dy - 2*bx*by*cy*dx + 2*bx*by*dx*dy - 2*bx*cx*cy*dy + 2*bx*cx*dy**2 + 2*bx*cy**2*dx - 2*bx*cy*dx*dy - by**2*cx**2 + 2*by**2*cx*dx - by**2*dx**2 + 2*by*cx**2*dy - 2*by*cx*cy*dx - 2*by*cx*dx*dy + 2*by*cy*dx**2 - cx**2*dy**2 + 2*cx*cy*dx*dy - cy**2*dx**2)) - (cx*dy - cy*dx)*(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2))/((cy - dy)*(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2)), (bx*cx*cy - bx*cx*dy - bx*cy*dx + bx*dx*dy + by*cy**2 - 2*by*cy*dy + by*dy**2 + cx**2*dy - cx*cy*dx - cx*dx*dy + cy*dx**2 + (-cy + dy)*sqrt(be**2*cx**2 - 2*be**2*cx*dx + be**2*cy**2 - 2*be**2*cy*dy + be**2*dx**2 + be**2*dy**2 - bx**2*cy**2 + 2*bx**2*cy*dy - bx**2*dy**2 + 2*bx*by*cx*cy - 2*bx*by*cx*dy - 2*bx*by*cy*dx + 2*bx*by*dx*dy - 2*bx*cx*cy*dy + 2*bx*cx*dy**2 + 2*bx*cy**2*dx - 2*bx*cy*dx*dy - by**2*cx**2 + 2*by**2*cx*dx - by**2*dx**2 + 2*by*cx**2*dy - 2*by*cx*cy*dx - 2*by*cx*dx*dy + 2*by*cy*dx**2 - cx**2*dy**2 + 2*cx*cy*dx*dy - cy**2*dx**2))/(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2)), (((cx - dx)*(bx*cx*cy - bx*cx*dy - bx*cy*dx + bx*dx*dy + by*cy**2 - 2*by*cy*dy + by*dy**2 + cx**2*dy - cx*cy*dx - cx*dx*dy + cy*dx**2 + (cy - dy)*sqrt(be**2*cx**2 - 2*be**2*cx*dx + be**2*cy**2 - 2*be**2*cy*dy + be**2*dx**2 + be**2*dy**2 - bx**2*cy**2 + 2*bx**2*cy*dy - bx**2*dy**2 + 2*bx*by*cx*cy - 2*bx*by*cx*dy - 2*bx*by*cy*dx + 2*bx*by*dx*dy - 2*bx*cx*cy*dy + 2*bx*cx*dy**2 + 2*bx*cy**2*dx - 2*bx*cy*dx*dy - by**2*cx**2 + 2*by**2*cx*dx - by**2*dx**2 + 2*by*cx**2*dy - 2*by*cx*cy*dx - 2*by*cx*dx*dy + 2*by*cy*dx**2 - cx**2*dy**2 + 2*cx*cy*dx*dy - cy**2*dx**2)) - (cx*dy - cy*dx)*(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2))/((cy - dy)*(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2)), (bx*cx*cy - bx*cx*dy - bx*cy*dx + bx*dx*dy + by*cy**2 - 2*by*cy*dy + by*dy**2 + cx**2*dy - cx*cy*dx - cx*dx*dy + cy*dx**2 + (cy - dy)*sqrt(be**2*cx**2 - 2*be**2*cx*dx + be**2*cy**2 - 2*be**2*cy*dy + be**2*dx**2 + be**2*dy**2 - bx**2*cy**2 + 2*bx**2*cy*dy - bx**2*dy**2 + 2*bx*by*cx*cy - 2*bx*by*cx*dy - 2*bx*by*cy*dx + 2*bx*by*dx*dy - 2*bx*cx*cy*dy + 2*bx*cx*dy**2 + 2*bx*cy**2*dx - 2*bx*cy*dx*dy - by**2*cx**2 + 2*by**2*cx*dx - by**2*dx**2 + 2*by*cx**2*dy - 2*by*cx*cy*dx - 2*by*cx*dx*dy + 2*by*cy*dx**2 - cx**2*dy**2 + 2*cx*cy*dx*dy - cy**2*dx**2))/(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2))]
'''


</pre>
<h2>CMSimfly 解析</h2>
<h4>CMSimfly 源起</h4>
<p>CMSimfly 的設計概念源自 <a href="https://www.cmsimple.org/en/">https://www.cmsimple.org/en/</a>, CMSimple 不需要使用資料庫,所有的頁面資料都以一個超文件檔案格式, 名稱為content.htm, 存於全球資訊網伺服器上.純文字檔的資料設計使得安裝與備份工作相對較為簡單.</p>
<p>CMSimple主要的程式功能分為頁面展示與後台管理. 其頁面展示功能是利用超文件中的 &lt;h1&gt;&lt;/h1&gt;, &lt;h2&gt;&lt;/h2&gt;, 與 &lt;h3&gt;&lt;/h3&gt; 標註（可後續延伸至 &lt;h4&gt;&lt;/h4&gt;等）, 進行分頁. CMSimple程式會將 content.htm 中的 &lt;h1&gt;&lt;/h1&gt; 當作第一層頁面的標題, 緊跟其後之 &lt;h2&gt;&lt;/h2&gt; 則將被視為第二層頁面的標題, 而 &lt;h3&gt;&lt;/h3&gt; 所涵蓋的內容則為第三層頁面的標題. 各層標題則依照其位於content.htm文件中的順序而定. 由於CMSimple利用 &lt;h1&gt;&lt;/h1&gt;, &lt;h2&gt;&lt;/h2&gt;，與&lt;h3&gt;&lt;/h3&gt; 標註進行分頁，因此其文件內容無法出現標題標註（header）所對應的粗體文字. 使用者必須透過其他方式產生類似粗體文字的效果.</p>
<p>CMSimple的後台管理, 僅允許單一用戶使用. 透過後台管理, 可設定各種與頁面展示相關的參數. 與許多內容管理系統相同, CMSimple提供延伸程式開發架構的設計, 可以讓程式開發者自行建構原始CMSimple以外的功能.</p>
<p><a href="http://lab.kmol.info">KMOL</a> 將 CMSimple 轉為 Python 程式時, 採用 <a href="https://cherrypy.org/">Cherrypy</a> 網際框架. 稱為 <a href="https://github.com/chiamingyen/cmsimply">https://github.com/chiamingyen/cmsimply</a> , 之後的版本改用 Flask 網際框架, 名稱改為 <a href="https://github.com/chiamingyen/cmsimfly">https://github.com/chiamingyen/cmsimfly</a> </p>
<h4>CMSimfly 架構</h4>
<p>CMSimfly 網際內容管理系統, 以位於 config 目錄中的 content.htm 檔案的解析為主, 一旦取得各頁面的標題、階次與內容時, 就可以列出各頁對應的內容.</p>
<p>config/content.htm 的解讀, 以  Python 的 Beautiful Soup 模組達成, 主要先取得 content.htm 檔案中的各 &lt;h1&gt; &lt;h2&gt; 與 &lt;h3&gt; 標註的內容後, 轉為數列, 然後利用各頁面標題作為切割各頁內容的依據, 以便取得各頁面的標題、階次與內容, 標題階次主要用來建立多層次表單以及 site map.</p>
<p>由於切割頁面的依據為 &lt;h1&gt; 至 &lt;h3&gt; 的標題, 且頁面連結與編輯均依賴頁面標題, 因此各頁面標題不可重複, 否則連結與編輯時, 將會在畫面出現多個資料與編輯區. 要改進此一缺點, 可以將 content.htm 的資料存入資料庫, 並以獨立序號來辨識各頁面標題、階次與內容.</p>
<p>CMSimfly 中採 bs4 與 re 所建立的 parse_content 方法, 提供重複標題頁面處理:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def parse_content():
    """use bs4 and re module functions to parse content.htm"""
    #from pybean import Store, SQLiteWriter
    # if no content.db, create database file with cms table
    '''
    if not os.path.isfile(config_dir+"content.db"):
        library = Store(SQLiteWriter(config_dir+"content.db", frozen=False))
        cms = library.new("cms")
        cms.follow = 0
        cms.title = "head 1"
        cms.content = "content 1"
        cms.memo = "first memo"
        library.save(cms)
        library.commit()
    '''
    # if no content.htm, generate a head 1 and content 1 file
    if not os.path.isfile(config_dir+"content.htm"):
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    subject = file_get_contents(config_dir+"content.htm")
    # deal with content without content
    if subject == "":
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
        subject = "&lt;h1&gt;head 1&lt;/h1&gt;content 1"
    # initialize the return lists
    head_list = []
    level_list = []
    page_list = []
    # make the soup out of the html content
    soup = BeautifulSoup(subject, 'html.parser')
    # get all h1, h2, h3 tags into list
    htag= soup.find_all(['h1', 'h2', 'h3'])
    n = len(htag)
    # get all h tags
    # g.es(soup.find_all(re.compile(r"^h\d$")))
    # get the page content to split subject using each h tag
    # i = 0
    temp_data = subject.split(str(htag[0]))
    if len(temp_data) &gt; 2:
        subject = str(htag[0]).join(temp_data[1:])
    else:
        subject = temp_data[1]
    if n &gt;1:
            # i from 1 to i-1
            for i in range(1, len(htag)):
                # add the first page title
                head_list.append(htag[i-1].text.strip())
                # use name attribute of h* tag to get h1, h2 or h3
                # the number of h1, h2 or h3 is the level of page menu
                level_list.append(htag[i-1].name[1])
                temp_data = subject.split(str(htag[i]))
                if len(temp_data) &gt; 2:
                    subject = str(htag[i]).join(temp_data[1:])
                else:
                    subject = temp_data[1]
                # cut the other page content out of htag from 1 to i-1
                cut = temp_data[0]
                # add the page content
                page_list.append(cut)
    # last i
    # add the last page title
    head_list.append(htag[n-1].text.strip())
    # add the last level
    level_list.append(htag[n-1].name[1])
    temp_data = subject.split(str(htag[n-1]))
    # the last subject
    subject = temp_data[0]
    # cut the last page content out
    cut = temp_data[0]
    # the last page content
    page_list.append(cut)
    return head_list, level_list, page_list
</pre>
<p>get_page2 則提供從動態網頁內容, 轉為靜態網頁檔案.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># seperate page need heading and edit variables, if edit=1, system will enter edit mode
# single page edit will use ssavePage to save content, it means seperate save page
'''
@app.route('/get_page2')
@app.route('/get_page2/&lt;heading&gt;', defaults={'edit': 0})
@app.route('/get_page2/&lt;heading&gt;/&lt;int:edit&gt;')
'''
def get_page2(heading, head, edit):
    not_used_head, level, page = parse_content()
    # 直接在此將 /images/ 換為 ./../images/, /downloads/ 換為 ./../downloads/, 以 content 為基準的相對目錄設定
    page = [w.replace('/images/', './../images/') for w in page]
    page = [w.replace('/downloads/', './../downloads/') for w in page]
    directory = render_menu2(head, level, page)
    if heading is None:
        heading = head[0]
    # 因為同一 heading 可能有多頁, 因此不可使用 head.index(heading) 搜尋 page_order
    page_order_list, page_content_list = search_content(head, page, heading)
    return_content = ""
    pagedata = ""
    outstring = ""
    outstring_duplicate = ""
    pagedata_duplicate = ""
    outstring_list = []
    for i in range(len(page_order_list)):
        #page_order = head.index(heading)
        page_order = page_order_list[i]
        if page_order == 0:
            last_page = ""
        else:
            #last_page = head[page_order-1]+" &lt;&lt; &lt;a href='/get_page/"+head[page_order-1]+"'&gt;Previous&lt;/a&gt;"
            last_page = head[page_order-1] + " &lt;&lt; &lt;a href='"+head[page_order-1] + ".html'&gt;Previous&lt;/a&gt;"
        if page_order == len(head) - 1:
            # no next page
            next_page = ""
        else:
            #next_page = "&lt;a href='/get_page/"+head[page_order+1]+"'&gt;Next&lt;/a&gt; &gt;&gt; "+ head[page_order+1]
            next_page = "&lt;a href='" + head[page_order+1] + ".html'&gt;Next&lt;/a&gt; &gt;&gt; " + head[page_order+1]
        if len(page_order_list) &gt; 1:
            return_content += last_page + " " + next_page + "&lt;br /&gt;&lt;h1&gt;" + \
                                      heading + "&lt;/h1&gt;" + page_content_list[i] + \
                                      "&lt;br /&gt;" + last_page + " "+ next_page + "&lt;br /&gt;&lt;hr&gt;"
            pagedata_duplicate = "&lt;h"+level[page_order] + "&gt;" + heading + "&lt;/h" + level[page_order]+"&gt;"+page_content_list[i]
            outstring_list.append(last_page + " " + next_page + "&lt;br /&gt;" + tinymce_editor(directory, cgi.escape(pagedata_duplicate), page_order))
        else:
            return_content += last_page + " " + next_page + "&lt;br /&gt;&lt;h1&gt;" + \
                                      heading + "&lt;/h1&gt;" + page_content_list[i] + \
                                      "&lt;br /&gt;" + last_page + " " + next_page
            
        pagedata += "&lt;h" + level[page_order] + "&gt;" + heading + \
                          "&lt;/h" + level[page_order] + "&gt;" + page_content_list[i]
        # 利用 cgi.escape() 將 specialchar 轉成只能顯示的格式
        outstring += last_page + " " + next_page + "&lt;br /&gt;" + tinymce_editor(directory, cgi.escape(pagedata), page_order)
    
    # edit=0 for viewpage
    if edit == 0:
        return set_css2() + "&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory + "&lt;/nav&gt;&lt;section&gt;" + return_content + "&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    # enter edit mode
    else:
        # check if administrator
        if not isAdmin():
            redirect(url_for('login'))
        else:
            if len(page_order_list) &gt; 1:
                # 若碰到重複頁面頁印, 且要求編輯, 則導向 edit_page
                #return redirect("/edit_page")
                for i in range(len(page_order_list)):
                    outstring_duplicate += outstring_list[i] + "&lt;br /&gt;&lt;hr&gt;"
                return outstring_duplicate
            else:
            #pagedata = "&lt;h"+level[page_order]+"&gt;"+heading+"&lt;/h"+level[page_order]+"&gt;"+search_content(head, page, heading)
            #outstring = last_page+" "+next_page+"&lt;br /&gt;"+ tinymce_editor(directory, cgi.escape(pagedata), page_order)
                return outstring
</pre>
<p>generate_pages 方法提供將帶有重複標題頁面轉為不同標題名的靜態網頁檔案</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@app.route('/generate_pages')
def generate_pages():
    # 必須決定如何處理重複標題頁面的轉檔
    import os
    # 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
    _curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
    # 根據 content.htm 內容, 逐一產生各頁面檔案
    # 在此也要同時配合 render_menu2, 產生對應的 anchor 連結
    head, level, page = parse_content()
    # 處理重複標題 head 數列， 再重複標題按照次序加上 1, 2, 3...
    newhead = []
    for i, v in enumerate(head):
        # 各重複標題總數
        totalcount = head.count(v)
        # 目前重複標題出現總數
        count = head[:i].count(v)
        # 針對重複標題者, 附加目前重複標題出現數 +1, 未重複採原標題
        newhead.append(v + str(count + 1) if totalcount &gt; 1 else v)
    # 刪除 content 目錄中所有 html 檔案
    filelist = [ f for f in os.listdir(_curdir + "\\content\\") if f.endswith(".html") ]
    for f in filelist:
        os.remove(os.path.join(_curdir + "\\content\\", f))
    # 這裡需要建立專門寫出 html 的 write_page
    # index.html
    file = open(_curdir + "\\content\\index.html", "w", encoding="utf-8")
    file.write(get_page2(None, newhead, 0))
    file.close()
    # sitemap
    file = open(_curdir + "\\content\\sitemap.html", "w", encoding="utf-8")
    # sitemap2 需要 newhead
    file.write(sitemap2(newhead))
    file.close()
    # 以下轉檔, 改用 newhead 數列
    for i in range(len(newhead)):
        # 在此必須要將頁面中的 /images/ 字串換為 images/, /downloads/ 換為 downloads/
        # 因為 Flask 中靠 /images/ 取檔案, 但是一般 html 則採相對目錄取檔案
        # 此一字串置換在 get_page2 中進行
        file = open(_curdir + "\\content\\" + newhead[i] + ".html", "w", encoding="utf-8")
        # 增加以 newhead 作為輸入
        file.write(get_page2(newhead[i], newhead, 0))
        file.close()
    # generate each page html under content directory
    return "已經將網站轉為靜態網頁. &lt;a href='/'&gt;Home&lt;/a&gt;"
</pre>
<p></p>
<h3>CMSimfly 開發</h3>
<p>以下為可行的開發項目:</p>
<ol>
<li>採用 SQLite 資料庫儲存內容資料, 以允許重複頁面標題.</li>
<li>在靜態內容管理系統中, 納入 <a href="http://www.tipue.com/search/">Tipue Search</a> 功能.</li>
<li>目前採用 html editor, 若能改為 <a href="https://github.com/sparksuite/simplemde-markdown-editor">Markdown editor</a>, 然後再<a href="https://github.com/Python-Markdown/markdown">轉為</a> html, 應該有助於協同.</li>
<li>能否導入 <a href="https://togetherjs.com/">together.js</a>, 進行線上協同編輯?</li>
</ol>
<h4>近端啟動</h4>
<p>在可攜 Python 程式環境, 只需 Flask 與 Beautiful Soup 模組, 即可以 python wsgi.py 啟動 CMSimfly</p>
<p>由於 CMSimfly 的除了 Flask 動態網頁系統外, 還提供位於 content 目錄中的靜態網頁. 當在動態網頁模式下, 按下管理者功能表中的 generate_pages 就可以將 config/content.htm 中的各頁面內容, 以各頁面分割的方式存入 content 目錄中.</p>
<p>由於 config/content.htm 並無針對各頁面的內容更動進行查驗, 因此目前轉為靜態網頁的方式為每次均需全部刪除 content 目錄中的所有檔案後, 再逐一重新建立, 因此只有在將靜態網頁改版並送往遠端網站時, 才進行靜態轉檔.</p>
<h4>遠端啟動</h4>
<p>以 Ubuntu 配置 nginx 與 uwsgi 伺服環境為例.</p>
<p>安裝並配置 Python3 的網際程式伺服環境.</p>
<p>sudo apt install python3-pip</p>
<p>sudo pip3 install Flask</p>
<p>sudo apt install build-essential python3-dev</p>
<p>sudo pip3 install uwsgi</p>
<p>sudo apt install nginx uwsgi-plugin-python3</p>
<p>/etc/nginx/sites-availables/default 設定檔:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">server {
    listen 80 default_server;
    #listen [::]:80 default_server ipv6only=on;
 
    listen 443 ssl;
    #listen [::]:443 ssl ipv6only=on;
 
    location /static {
        alias /home/cadlab/cmsimfly/static/;
    }
 
    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:8080;
    }
 
    server_name localhost;
    #ssl on;
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}
 
server {
    listen 88 default_server;
    #listen [::]:88 default_server ipv6only=on;
 
    listen 8443 ssl;
    #listen [::]:8443 ssl ipv6only=on;
 
    location /static {
        alias /home/cadlab/cmsimfly2/static/;
    }
 
    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:8081;
    }
 
    server_name localhost;
    #ssl on;
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}</pre>
<p>利用 /etc/rc.local 開機時啟動所有 uwsgi 程式:</p>
<p>exec uwsgi_python35 --uid cadlab --gid cadlab --emperor /home/cadlab/uwsgi_ini</p>
<p>/home/cadlab/uwsgi_ini/uwsgi.ini 設定檔案內容:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[uwsgi]
socket = 127.0.0.1:8080
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
processes = 4
threads = 2
chdir = /home/cadlab/cmsimfly
wsgi-file = /home/cadlab/cmsimfly/wsgi.py</pre>
<p><span>/home/cadlab/uwsgi_ini/uwsgi2.ini 設定檔案內容:</span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[uwsgi]
socket = 127.0.0.1:8081
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
processes = 4
threads = 2
chdir = /home/cadlab/cmsimfly2
wsgi-file = /home/cadlab/cmsimfly2/wsgi.py</pre>
<p></p>
<h2>Pygrouf 解析</h2>
<p><a href="https://github.com/chiamingyen/pygrouf">https://github.com/chiamingyen/pygrouf</a>  為多人群組軟體, 使用者可以透過 Gmail 帳號登入, 以類似討論版的方式進行網際互動.</p>
<p>Pygrouf 採用 <a href="http://flask.pocoo.org/">Flask</a> 網際框架, <a href="https://github.com/coleifer/peewee">peewee</a> ORM, <a href="https://github.com/authomatic/authomatic">authomatic</a> (可能已經不再維護), <a href="http://www.makotemplates.org/">mako</a> (可能已經不再維護), <a href="https://github.com/PyMySQL/PyMySQL">PyMySQL</a>.</p>
<h2>Pyslvs 解析</h2>
<p><a href="https://github.com/KmolYuan/Pyslvs-PyQt5">https://github.com/KmolYuan/Pyslvs-PyQt5</a> </p>
<p>採用 PyQt5 建立, 核心 <a href="https://github.com/KmolYuan/pyslvs">https://github.com/KmolYuan/pyslvs</a> </p>
<p>演化運算模組: Adesign: <a href="https://github.com/KmolYuan/Adesign">https://github.com/KmolYuan/Adesign</a> </p>
<p>因為倉儲帶有子模組與子模組下的子模組, 因此必須利用 --recurse-submodules 取下倉儲檔案:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git clone --recurse-submodules https://github.com/KmolYuan/Pyslvs-PyQt5</pre>
<p>假如希望直接 git clone 特定分支, 例如: dev, 則使用下列指令:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git clone --recurse-submodules -b dev https://github.com/KmolYuan/Pyslvs-PyQt5</pre>
<p>編譯 Pyslvs 所需模組:</p>
<p>requests<br/>pyqt5&gt;=5.10<br/>pyqtchart&gt;=5.1<br/>ezdxf==0.8.8<br/>numpy<br/>cython<br/>openpyxl<br/>psutil<br/>peewee<br/>lark-parser<br/>networkx<br/>pydot<br/>pygments</p>
<p>以 </p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pip install -r requirements.txt</pre>
<p>安裝所需 Python 模組.</p>
<p>另外, 使用 Msys2 編譯前提必須設定:</p>
<p>y:\Python36\Lib\distutils\distutils.cfg</p>
<p>內容為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[build]
compiler=mingw32</pre>
<p>表示要使用 mingw32-make 執行編譯.</p>
<p>編譯指令:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">mingw32-make clean
mingw32-make</pre>
<h3>Pyslvs 範例</h3>
<p>python_solvespace 範例:</p>
<p>含動態程式庫範例檔案 <a href="/downloads/sgcs_2_1.7z">sgcs_2_1.7z</a></p>
<p>必須採用 moving reference frame 執行運算.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
python3 -m pip install matplotlib
Point1 (0, 0)
Point2(90, 0)
link1 length 35
link2 length 70
link3 length 70
triangle length 70, 40, 40
'''
from slvs import *
from math import *
import matplotlib.pyplot as plt

# variables
d0 = 90
n1 = 35
n2 = 70
t1 = 40
t2 = 40
t3 = 70

# use moving reference frame as p2 prime, increment angel is 5 degree
def crank_rocker(degree, p2x, p2y, p3x, p3y, p4x, p4y, p5x, p5y):
    sys = System()
    g = 1
    # origin Point zero
    p0 = sys.add_param(0.0)
    p1 = sys.add_param(0.0)
    p2 = sys.add_param(0.0)
    Point0 = Point3d(p0, p1, p2)

    # add normal vector
    qw, qx, qy, qz = Slvs_MakeQuaternion(1, 0, 0, 0, 1, 0)
    p3 = sys.add_param(qw)
    p4 = sys.add_param(qx)
    p5 = sys.add_param(qy)
    p6 = sys.add_param(qz)
    Normal1 = Normal3d(p3, p4, p5, p6)

    # add workplane
    Workplane1 = Workplane(Point0, Normal1)

    # convert 3D point to 2D point
    p7 = sys.add_param(0.0)
    p8 = sys.add_param(0.0)
    Point1 = Point2d(Workplane1, p7, p8)
    Constraint.dragged(Workplane1, Point1)

    #add Point2 and Line0
    p9 = sys.add_param(d0)
    p10 = sys.add_param(0.0)
    Point2 = Point2d(Workplane1, p9, p10)
    Constraint.dragged(Workplane1, Point2)
    
    p11 = sys.add_param(p2x)
    p12 = sys.add_param(p2y)
    moving2 = Point2d(Workplane1, p11, p12)
    Constraint.dragged(Workplane1, moving2)
    # Line0 depends on Point1 and moving2
    Line0 = LineSegment2d(Workplane1, Point1, moving2)

    # triangle Point4- Point3-Point5
    p13 = sys.add_param(p3x)
    p14 = sys.add_param(p3y)
    Point3 = Point2d(Workplane1, p13, p14)
    p15 = sys.add_param(p4x)
    p16 = sys.add_param(p4y)
    Point4 = Point2d(Workplane1, p15, p16)
    p17 = sys.add_param(p5x)
    p18 = sys.add_param(p5y)
    Point5 = Point2d(Workplane1, p17, p18)
    Constraint.distance(t1, Workplane1, Point4, Point3)
    Constraint.distance(t2, Workplane1, Point3, Point5)
    Constraint.distance(t3, Workplane1, Point4, Point5)

    # add Line1 and link length constraints
    Constraint.distance(n1, Workplane1, Point1, Point4)
    Constraint.distance(n2, Workplane1, Point2, Point5)
    Line1 = LineSegment2d(Workplane1, Point1, Point4)

    #add rotation angle constraint
    Constraint.angle(Workplane1, degree, Line1, Line0, False)

    #solve for results
    sys.calculateFaileds = 1;

    sys.solve()
    result = sys.result

    if(result == SLVS_RESULT_OKAY):

        # return coordinates of Point3
        return sys.get_param(13).val, sys.get_param(14).val, sys.get_param(15).val, sys.get_param(16).val, sys.get_param(17).val, sys.get_param(18).val

    elif (result == SLVS_RESULT_INCONSISTENT):
        print ("solve failed", degree)
        print ("SLVS_RESULT_INCONSISTENT")
        print ("%d DOF" % sys.dof)
    elif (result == SLVS_RESULT_DIDNT_CONVERGE):
        print ("solve failed")
        print ("SLVS_RESULT_DIDNT_CONVERGE")
        print ("%d DOF" % sys.dof)
    elif (result == SLVS_RESULT_TOO_MANY_UNKNOWNS):
        print ("solve failed")
        print ("SLVS_RESULT_TOO_MANY_UNKNOWNS")
        print ("%d DOF" % sys.dof)

# main program
Xval  = []
Yval  = []
inc = 5
# initially Point3, Point4, Point5 coordinate
p3x = 20
p3y = 20
p4x = 0
p4y = 10
p5x = 30
p5y = 20
for i in range(0, 360+inc*3, inc):
    # moving reference point
    p2x = d0*cos(i*pi/180)
    p2y = d0*sin(i*pi/180)
    try:
        p3x, p3y, p4x, p4y, p5x, p5y = crank_rocker(inc, p2x, p2y, p3x, p3y, p4x, p4y, p5x, p5y)
        Xval += [p3x]
        Yval += [p3y]
        print(i, ":", round(p3x, 4), round(p3y, 4))
    except:
        pass
print ("Solve Completed")

plt.plot(Xval, Yval)
plt.xlabel('x coordinate')
plt.ylabel('y coordinate')
plt.show()</pre>
<p>利用三角形符號式解四連桿運動模擬範例:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># triangle_fourbar_point_track.py
from math import pi, cos, sin, sqrt, acos
import matplotlib.pyplot as plt
 
radian = 180/pi
degree = pi/180
 
#PLAP
def plap(ax, ay, ac, bac, bx, by, pos):
    if pos == 0:
        cx= ac*cos(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    else:
        cx= ac*cos(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    return cx, cy
 
#PLLP
def pllp(ax, ay, ac, cb, bx, by, pos):
    if pos == 0:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 - sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(-ax + bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    else:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    return cx, cy

def crank_rocker(angle, p1x, p1y, p2x, p2y, len1, len2, len3, len4, len5):
    p4x, p4y = plap(p1x, p1y, len1, angle, p2x, p2y, 0)
    #print("cx=", cx, "cy=", cy)
    p5x, p5y = pllp(p4x, p4y, len2, len3, p2x, p2y, 0)
    #print("dx=", dx, "dy=", dy)
    p3x, p3y = pllp(p4x, p4y, len4, len5, p5x, p5y, 0)
    #print("ex=", ex, "ey=", ey)
    return p3x, p3y
    
#主程式
Xval  = []
Yval  = []
inc = 5

for i in range(0, 360+inc, inc):
    try:
        p3x, p3y = crank_rocker(i*degree, 0, 0, 90, 0, 35, 70, 70, 40, 40)
        Xval += [p3x]
        Yval += [p3y]
        print(i, ":", round(p3x, 4), round(p3y, 4))
    except:
        pass
print ("Solve Completed")

plt.plot(Xval, Yval)
plt.xlabel('x coordinate')
plt.ylabel('y coordinate')
#plt.title("Involute - "+str(degree)+" deg")
plt.show()</pre>
<h3>機構設計參考</h3>
<p><a href="/downloads/2014_nsysu_design_linkage_type_foot_exercise_machine.pdf">Computer Aided Design of Eight-bar Linkages.pdf</a> (2014)</p>
<p></p>
<h2>Pyquino 解析</h2>
<p><a href="https://github.com/kmolLin/Pyquino">https://github.com/kmolLin/Pyquino</a> </p>
<h2>Solvespace 解析</h2>
<p><a href="http://solvespace.com">http://solvespace.com</a> </p>
<h2>V-rep 解析</h2>
<p><a href="http://www.coppeliarobotics.com/">http://www.coppeliarobotics.com/</a> </p>
<p><a href="https://github.com/CoppeliaRobotics/v_rep">https://github.com/CoppeliaRobotics/v_rep</a> </p>
<h2>FreeCAD 解析</h2>
<p><a href="https://www.freecadweb.org/">https://www.freecadweb.org/</a> </p>
<h2>RigitBody library</h2>
<p>Rigit Body Dynamic Library</p>
<p><a href="https://rbdl.bitbucket.io">https://rbdl.bitbucket.io</a> </p>
<p><a href="https://bitbucket.org/rbdl/rbdl">https://bitbucket.org/rbdl/rbdl</a> </p>
<p>RBDL - an Efficient Rigid-Body Dynamics Library using Recursive Algorithms</p>
<p><a href="https://orb.iwr.uni-heidelberg.de/phpref/orb/pdf/Felis2016RBDLPreprint.pdf">https://orb.iwr.uni-heidelberg.de/phpref/orb/pdf/Felis2016RBDLPreprint.pdf</a>  or <a href="/downloads/RBDL%20- an Efficient Rigid-Body Dynamics Library using Recursive Algorithms.pdf">local</a></p>
<h2>FiniteElement library</h2>
<p><a href="http://mfem.org/">http://mfem.org/</a> </p>
<p><a href="https://fenicsproject.org/">https://fenicsproject.org/</a> </p>
<p><a href="https://github.com/ali7line/awesome-fem">https://github.com/ali7line/awesome-fem</a> </p>
<h2>網際平面連桿模擬</h2>
<p>Brython 程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;canvas id="plotarea" width="600" height="450"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document
import math
import time
from browser import timer

class Coord(object):
    def __init__(self,x,y):
        self.x = x
        self.y = y

    def __sub__(self,other):
        # This allows you to substract vectors
        return Coord(self.x-other.x,self.y-other.y)

    def __repr__(self):
        # Used to get human readable coordinates when printing
        return "Coord(%f,%f)"%(self.x,self.y)

    def length(self):
        # Returns the length of the vector
        return math.sqrt(self.x**2 + self.y**2)

    def angle(self):
        # Returns the vector's angle
        return math.atan2(self.y,self.x)

def normalize(coord):
    return Coord(
        coord.x/coord.length(),
        coord.y/coord.length()
        )

def perpendicular(coord):
    # Shifts the angle by pi/2 and calculate the coordinates
    # using the original vector length
    return Coord(
        coord.length()*math.cos(coord.angle()+math.pi/2),
        coord.length()*math.sin(coord.angle()+math.pi/2)
        )

# 點類別
class Point(object):
    # 起始方法
    def __init__(self, x, y):
        self.x = x
        self.y = y

    # 繪製方法
    def drawMe(self, g, r):
        self.g = g
        self.r = r
        self.g.save()
        self.g.moveTo(self.x,self.y)
        self.g.beginPath()
        # 根據 r 半徑繪製一個圓代表點的所在位置
        self.g.arc(self.x, self.y, self.r, 0, 2*math.pi, True)
        self.g.moveTo(self.x,self.y)
        self.g.lineTo(self.x+self.r, self.y)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x-self.r, self.y)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x, self.y+self.r)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x, self.y-self.r)
        self.g.restore()
        self.g.stroke()

    # 加入 Eq 方法
    def Eq(self, pt):
        self.x = pt.x
        self.y = pt.y

    # 加入 setPoint 方法
    def setPoint(self, px, py):
        self.x = px
        self.y = py

    # 加上 distance(pt) 方法, 計算點到 pt 的距離
    def distance(self, pt):
        self.pt = pt
        x = self.x - self.pt.x
        y = self.y - self.pt.y
        return math.sqrt(x * x + y * y)

    # 利用文字標示點的座標位置
    def tag(self, g):
        self.g = g
        self.g.beginPath()
        self.g.fillText("%d, %d"%(self.x, self.y),self.x, self.y)
        self.g.stroke()


# Line 類別物件
class Line(object):

    # 起始方法
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        # 直線的第一點, 設為線尾
        self.Tail = self.p1
        # 直線組成的第二點, 設為線頭
        self.Head = self.p2
        # 直線的長度屬性
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))

    # setPP 以指定頭尾座標點來定義直線
    def setPP(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.Tail = self.p1
        self.Head = self.p2
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))

    # setRT 方法 for Line, 應該已經確定 Tail 點, 然後以 r, t 作為設定 Head 的參考
    def setRT(self, r, t):
        self.r = r
        self.t = t
        x = self.r * math.cos(self.t)
        y = self.r * math.sin(self.t)
        self.Tail.Eq(self.p1)
        self.Head.setPoint(self.Tail.x + x,self.Tail.y + y)

    # getR 方法 for Line
    def getR(self):
        # x 分量與 y 分量
        x = self.p1.x - self.p2.x
        y = self.p1.y - self.p2.y
        return math.sqrt(x * x + y * y)

    # 根據定義 atan2(y,x), 表示 (x,y) 與 正 x 軸之間的夾角, 介於 pi 與 -pi 間
    def getT(self):
        x = self.p2.x - self.p1.x
        y = self.p2.y - self.p1.y
        if (math.fabs(x) &lt; math.pow(10,-100)):
            if(y &lt; 0.0):
                return (-math.pi/2)
            else:
                return (math.pi/2)
        else:
            return math.atan2(y, x)

    # setTail 方法 for Line
    def setTail(self, pt):
        self.pt = pt
        self.Tail.Eq(pt)
        self.Head.setPoint(self.pt.x + self.x, self.pt.y + self.y)

    # getHead 方法 for Line
    def getHead(self):
        return self.Head

    def getTail(self):
        return self.Tail

    def drawMe(self, g):
        self.g = g
        self.g.beginPath()
        self.g.moveTo(self.p1.x,self.p1.y)
        self.g.lineTo(self.p2.x,self.p2.y)
        self.g.stroke()

    def test(self):
        return ("this is pure test to Inherit")


class Link(Line):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.length = math.sqrt(math.pow((self.p2.x - self.p1.x), 2) + math.pow((self.p2.y - self.p1.y), 2))

    #g context
    def drawMe(self, g):
        self.g = g
        hole = 5
        radius = 10
        length = self.getR()
        # alert(length)
        # 儲存先前的繪圖狀態
        self.g.save()
        self.g.translate(self.p1.x,self.p1.y)
        #alert(str(self.p1.x)+","+str(self.p1.y))
        #self.g.rotate(-((math.pi/2)-self.getT()))
        self.g.rotate(-math.pi*0.5 + self.getT())
        #alert(str(self.getT()))
        #self.g.rotate(10*math.pi/180)
        #this.g.rotate(-(Math.PI/2-this.getT()));
        # 必須配合畫在 y 軸上的 Link, 進行座標轉換, 也可以改為畫在 x 軸上...
        self.g.beginPath()
        self.g.moveTo(0,0)
        self.g.arc(0, 0, hole, 0, 2*math.pi, True)
        self.g.stroke()
        self.g.moveTo(0,length)
        self.g.beginPath()
        self.g.arc(0,length, hole, 0, 2*math.pi, True)
        self.g.stroke()
        self.g.moveTo(0,0)
        self.g.beginPath()
        self.g.arc(0,0, radius, 0, math.pi, True)
        self.g.moveTo(0+radius,0)
        self.g.lineTo(0+radius,0+length)
        self.g.stroke()
        self.g.moveTo(0,0+length)
        self.g.beginPath()
        self.g.arc(0, 0+length, radius, math.pi, 0, True)
        self.g.moveTo(0-radius,0+length)
        self.g.lineTo(0-radius,0)
        self.g.stroke()
        self.g.restore()
        '''
        self.g.beginPath()
        self.g.fillStyle = "red"
        self.g.font = "bold 18px sans-serif"
        self.g.fillText("%d, %d"%(self.p2.x, self.p2.y),self.p2.x, self.p2.y)
        self.g.stroke()
        '''


class Triangle(object):
    def __init__(self, p1, p2, p3):
        self.p1 = p1
        self.p2 = p2
        self.p3 = p3

    def getLenp3(self):
        p1 = self.p1
        ret = p1.distance(self.p2)
        return ret

    def getLenp1(self):
        p2 = self.p2
        ret = p2.distance(self.p3)
        return ret

    def getLenp2(self):
        p1 = self.p1
        ret = p1.distance(self.p3)
        return ret

    # 角度
    def getAp1(self):
        ret = math.acos(((self.getLenp2() * self.getLenp2() + self.getLenp3() * self.getLenp3()) - self.getLenp1() * self.getLenp1()) / (2* self.getLenp2() * self.getLenp3()))
        return ret

    #
    def getAp2(self):
        ret =math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp3() * self.getLenp3()) - self.getLenp2() * self.getLenp2()) / (2* self.getLenp1() * self.getLenp3()))
        return ret

    def getAp3(self):
        ret = math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp2() * self.getLenp2()) - self.getLenp3() * self.getLenp3()) / (2* self.getLenp1() * self.getLenp2()))
        return ret

    def drawMe(self, g):
        self.g = g
        r = 5
        # 繪出三個頂點
        self.p1.drawMe(self.g,r)
        self.p2.drawMe(self.g,r)
        self.p3.drawMe(self.g,r)
        line1 = Line(self.p1,self.p2)
        line2 = Line(self.p1,self.p3)
        line3 = Line(self.p2,self.p3)
        # 繪出三邊線
        line1.drawMe(self.g)
        line2.drawMe(self.g)
        line3.drawMe(self.g)

    # ends Triangle def
    # 透過三個邊長定義三角形
    def setSSS(self, lenp3, lenp1, lenp2):
        self.lenp3 = lenmidpt = Point(0, 0)
        self.lenp1 = lenp1
        self.lenp2 = lenp2
        self.ap1 = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2* self.lenp2 * self.lenp3))
        self.ap2 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2* self.lenp1 * self.lenp3))
        self.ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2* self.lenp1 * self.lenp2))

    # 透過兩個邊長與夾角定義三角形
    def setSAS(self, lenp3, ap2, lenp1):
        self.lenp3 = lenp3
        self.ap2 = ap2
        self.lenp1 = lenp1
        self.lenp2 = math.sqrt((self.lenp3 * self.lenp3 + self.lenp1 * self.lenp1) - 2* self.lenp3 * self.lenp1 * math.cos(self.ap2))
        #等於 SSS(AB, BC, CA)

    def setSaSS(self, lenp2, lenp3, lenp1):
        self.lenp2 = lenp2
        self.lenp3 = lenp3
        self.lenp1 = lenp1
        if(self.lenp1 &gt; (self.lenp2 + self.lenp3)):
        #&lt;CAB 夾角為 180 度, 三點共線且 A 介於 BC 之間
            ret = math.pi
        else :
            # &lt;CAB 夾角為 0, 三點共線且 A 不在 BC 之間
            if((self.lenp1 &lt; (self.lenp2 - self.lenp3)) or (self.lenp1 &lt; (self.lenp3 - self.lenp2))):
                ret = 0.0
            else :
            # 透過餘絃定理求出夾角 &lt;CAB 
                ret = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2 * self.lenp2 * self.lenp3))
        return ret

    # 取得三角形的三個邊長值
    def getSSS(self):
        temp = []
        temp.append( self.getLenp1() )
        temp.append( self.getLenp2() )
        temp.append( self.getLenp3() )
        return temp

    # 取得三角形的三個角度值
    def getAAA(self):
        temp = []
        temp.append( self.getAp1() )
        temp.append( self.getAp2() )
        temp.append( self.getAp3() )
        return temp

    # 取得三角形的三個角度與三個邊長
    def getASASAS(self):
        temp = []
        temp.append(self.getAp1())
        temp.append(self.getLenp1())
        temp.append(self.getAp2())
        temp.append(self.getLenp2())
        temp.append(self.getAp3())
        temp.append(self.getLenp3())
        return temp
    #2P 2L return mid P
    def setPPSS(self, p1, p3, lenp1, lenp3):
        temp = []
        self.p1 = p1
        self.p3 = p3
        self.lenp1 = lenp1
        self.lenp3 = lenp3

        #bp3 is the angle beside p3 point, cp3 is the angle for line23, p2 is the output
        line31 = Line(p3, p1)
        self.lenp2 = line31.getR()
        #self.lenp2 = self.p3.distance(self.p1)
        #這裡是求角3
        ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2 * self.lenp1 * self.lenp2))
        #ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2 * self.lenp1 * self.lenp3))
        bp3 = line31.getT()
        cp3 = bp3 - ap3
        temp.append(p3.x + self.lenp1*math.cos(cp3))#p2.x
        temp.append(p3.y + self.lenp1*math.sin(cp3))#p2.y
        return temp

def tag(g, p):
    None

midpt = Point(0, 0)
tippt = Point(0, 0)
contour = []
# 執行繪圖流程, 注意 x, y 為 global variables
def draw():
    global theta, midpt, oldpt
    context.clearRect(0, 0, canvas.width, canvas.height)
    line1.drawMe(context)
    line2.drawMe(context)
    line3.drawMe(context)
    #triangle1.drawMe(context)
    #triangle2.drawMe(context)
    theta += dx
    p2.x = p1.x + line1.length*math.cos(theta*degree)
    p2.y = p1.y - line1.length*math.sin(theta*degree)
    p3.x, p3.y = triangle2.setPPSS(p2,p4,link2_len,link3_len)
    # 計算垂直單位向量
    a = Coord(p3.x, p3.y)
    b = Coord(p2.x, p2.y)
    normal = perpendicular(normalize(a-b))
    midpt.x = (p2.x + p3.x)/2
    midpt.y = (p2.y + p3.y)/2
    tippt.x = midpt.x + 150*normal.x
    tippt.y = midpt.y + 150*normal.y
    if theta &lt; 360:
        contour.append((tippt.x, tippt.y))
    context.beginPath()
    context.moveTo(midpt.x, midpt.y)
    context.lineTo(tippt.x, tippt.y)
    # 利用 fillRect 繪製一個長寬各 1 單位的正方形
    for i in range(len(contour)):
        context.fillRect(contour[i][0], contour[i][1], 1, 1)
    context.stroke()
    #p1.tag(context)


# 以上為相關函式物件的定義區
# 全域變數
# 幾何位置輸入變數
x=10
y=10
r=10

# 畫布與繪圖內容
# 其他輸入變數
theta = 0
degree = math.pi/180.0
dx = 2
dy = 4

#set p1.p2.p3.p4 position
lift = 10
p1 =  Point(150,100+lift)
p2 =  Point(150,200+lift)
p3 =  Point(300,300+lift)
p4 =  Point(350,100+lift)

#accord position create link
line1 =  Link(p1,p2)
line2 =  Link(p2,p3)
line3 =  Link(p3,p4)
line4 =  Link(p1,p4)
line5 =  Link(p2,p4)

link2_len = p2.distance(p3)
link3_len = p3.distance(p4)

#link2_len = line1.getR()
#link3_len = line3.getR()
#alert(str(link2_len)+','+str(link3_len))

triangle1 =  Triangle(p1,p2,p4)
triangle2 =  Triangle(p2,p3,p4)

# 視窗載入時執行內容
# 繪圖畫布設定

canvas = document["plotarea"]
context = canvas.getContext("2d")

# 座標轉換, 移動 canvas.height 並且 y 座標變號, 也就是將原點座標移到畫面左下角
context.translate(0,canvas.height)
context.scale(1,-1)

#以間隔 20 micro seconds 重複呼叫 draw()
timer.set_interval(draw,20)
#timer.set_interval(draw,10)
&lt;/script&gt;</pre>
<p>寫成 plt.py 模組:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math

class Coord(object):
    def __init__(self,x,y):
        self.x = x
        self.y = y

    def __sub__(self,other):
        # This allows you to substract vectors
        return Coord(self.x-other.x,self.y-other.y)

    def __repr__(self):
        # Used to get human readable coordinates when printing
        return "Coord(%f,%f)"%(self.x,self.y)

    def length(self):
        # Returns the length of the vector
        return math.sqrt(self.x**2 + self.y**2)

    def angle(self):
        # Returns the vector's angle
        return math.atan2(self.y,self.x)

def normalize(coord):
    return Coord(
        coord.x/coord.length(),
        coord.y/coord.length()
        )

def perpendicular(coord):
    # Shifts the angle by pi/2 and calculate the coordinates
    # using the original vector length
    return Coord(
        coord.length()*math.cos(coord.angle()+math.pi/2),
        coord.length()*math.sin(coord.angle()+math.pi/2)
        )

# 點類別
class Point(object):
    # 起始方法
    def __init__(self, x, y):
        self.x = x
        self.y = y

    # 繪製方法
    def drawMe(self, g, r):
        self.g = g
        self.r = r
        self.g.save()
        self.g.moveTo(self.x,self.y)
        self.g.beginPath()
        # 根據 r 半徑繪製一個圓代表點的所在位置
        self.g.arc(self.x, self.y, self.r, 0, 2*math.pi, True)
        self.g.moveTo(self.x,self.y)
        self.g.lineTo(self.x+self.r, self.y)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x-self.r, self.y)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x, self.y+self.r)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x, self.y-self.r)
        self.g.restore()
        self.g.stroke()

    # 加入 Eq 方法
    def Eq(self, pt):
        self.x = pt.x
        self.y = pt.y

    # 加入 setPoint 方法
    def setPoint(self, px, py):
        self.x = px
        self.y = py

    # 加上 distance(pt) 方法, 計算點到 pt 的距離
    def distance(self, pt):
        self.pt = pt
        x = self.x - self.pt.x
        y = self.y - self.pt.y
        return math.sqrt(x * x + y * y)

    # 利用文字標示點的座標位置
    def tag(self, g):
        self.g = g
        self.g.beginPath()
        self.g.fillText("%d, %d"%(self.x, self.y),self.x, self.y)
        self.g.stroke()


# Line 類別物件
class Line(object):

    # 起始方法
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        # 直線的第一點, 設為線尾
        self.Tail = self.p1
        # 直線組成的第二點, 設為線頭
        self.Head = self.p2
        # 直線的長度屬性
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))

    # setPP 以指定頭尾座標點來定義直線
    def setPP(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.Tail = self.p1
        self.Head = self.p2
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))

    # setRT 方法 for Line, 應該已經確定 Tail 點, 然後以 r, t 作為設定 Head 的參考
    def setRT(self, r, t):
        self.r = r
        self.t = t
        x = self.r * math.cos(self.t)
        y = self.r * math.sin(self.t)
        self.Tail.Eq(self.p1)
        self.Head.setPoint(self.Tail.x + x,self.Tail.y + y)

    # getR 方法 for Line
    def getR(self):
        # x 分量與 y 分量
        x = self.p1.x - self.p2.x
        y = self.p1.y - self.p2.y
        return math.sqrt(x * x + y * y)

    # 根據定義 atan2(y,x), 表示 (x,y) 與 正 x 軸之間的夾角, 介於 pi 與 -pi 間
    def getT(self):
        x = self.p2.x - self.p1.x
        y = self.p2.y - self.p1.y
        if (math.fabs(x) &lt; math.pow(10,-100)):
            if(y &lt; 0.0):
                return (-math.pi/2)
            else:
                return (math.pi/2)
        else:
            return math.atan2(y, x)

    # setTail 方法 for Line
    def setTail(self, pt):
        self.pt = pt
        self.Tail.Eq(pt)
        self.Head.setPoint(self.pt.x + self.x, self.pt.y + self.y)

    # getHead 方法 for Line
    def getHead(self):
        return self.Head

    def getTail(self):
        return self.Tail

    def drawMe(self, g):
        self.g = g
        self.g.beginPath()
        self.g.moveTo(self.p1.x,self.p1.y)
        self.g.lineTo(self.p2.x,self.p2.y)
        self.g.stroke()

    def test(self):
        return ("this is pure test to Inherit")


class Link(Line):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.length = math.sqrt(math.pow((self.p2.x - self.p1.x), 2) + math.pow((self.p2.y - self.p1.y), 2))

    #g context
    def drawMe(self, g):
        self.g = g
        hole = 5
        radius = 10
        length = self.getR()
        # alert(length)
        # 儲存先前的繪圖狀態
        self.g.save()
        self.g.translate(self.p1.x,self.p1.y)
        #alert(str(self.p1.x)+","+str(self.p1.y))
        #self.g.rotate(-((math.pi/2)-self.getT()))
        self.g.rotate(-math.pi*0.5 + self.getT())
        #alert(str(self.getT()))
        #self.g.rotate(10*math.pi/180)
        #this.g.rotate(-(Math.PI/2-this.getT()));
        # 必須配合畫在 y 軸上的 Link, 進行座標轉換, 也可以改為畫在 x 軸上...
        self.g.beginPath()
        self.g.moveTo(0,0)
        self.g.arc(0, 0, hole, 0, 2*math.pi, True)
        self.g.stroke()
        self.g.moveTo(0,length)
        self.g.beginPath()
        self.g.arc(0,length, hole, 0, 2*math.pi, True)
        self.g.stroke()
        self.g.moveTo(0,0)
        self.g.beginPath()
        self.g.arc(0,0, radius, 0, math.pi, True)
        self.g.moveTo(0+radius,0)
        self.g.lineTo(0+radius,0+length)
        self.g.stroke()
        self.g.moveTo(0,0+length)
        self.g.beginPath()
        self.g.arc(0, 0+length, radius, math.pi, 0, True)
        self.g.moveTo(0-radius,0+length)
        self.g.lineTo(0-radius,0)
        self.g.stroke()
        self.g.restore()
        '''
        self.g.beginPath()
        self.g.fillStyle = "red"
        self.g.font = "bold 18px sans-serif"
        self.g.fillText("%d, %d"%(self.p2.x, self.p2.y),self.p2.x, self.p2.y)
        self.g.stroke()
        '''


class Triangle(object):
    def __init__(self, p1, p2, p3):
        self.p1 = p1
        self.p2 = p2
        self.p3 = p3

    def getLenp3(self):
        p1 = self.p1
        ret = p1.distance(self.p2)
        return ret

    def getLenp1(self):
        p2 = self.p2
        ret = p2.distance(self.p3)
        return ret

    def getLenp2(self):
        p1 = self.p1
        ret = p1.distance(self.p3)
        return ret

    # 角度
    def getAp1(self):
        ret = math.acos(((self.getLenp2() * self.getLenp2() + self.getLenp3() * self.getLenp3()) - self.getLenp1() * self.getLenp1()) / (2* self.getLenp2() * self.getLenp3()))
        return ret

    #
    def getAp2(self):
        ret =math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp3() * self.getLenp3()) - self.getLenp2() * self.getLenp2()) / (2* self.getLenp1() * self.getLenp3()))
        return ret

    def getAp3(self):
        ret = math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp2() * self.getLenp2()) - self.getLenp3() * self.getLenp3()) / (2* self.getLenp1() * self.getLenp2()))
        return ret

    def drawMe(self, g):
        self.g = g
        r = 5
        # 繪出三個頂點
        self.p1.drawMe(self.g,r)
        self.p2.drawMe(self.g,r)
        self.p3.drawMe(self.g,r)
        line1 = Line(self.p1,self.p2)
        line2 = Line(self.p1,self.p3)
        line3 = Line(self.p2,self.p3)
        # 繪出三邊線
        line1.drawMe(self.g)
        line2.drawMe(self.g)
        line3.drawMe(self.g)

    # ends Triangle def
    # 透過三個邊長定義三角形
    def setSSS(self, lenp3, lenp1, lenp2):
        self.lenp3 = lenp3
        self.lenp1 = lenp1
        self.lenp2 = lenp2
        self.ap1 = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2* self.lenp2 * self.lenp3))
        self.ap2 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2* self.lenp1 * self.lenp3))
        self.ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2* self.lenp1 * self.lenp2))

    # 透過兩個邊長與夾角定義三角形
    def setSAS(self, lenp3, ap2, lenp1):
        self.lenp3 = lenp3
        self.ap2 = ap2
        self.lenp1 = lenp1
        self.lenp2 = math.sqrt((self.lenp3 * self.lenp3 + self.lenp1 * self.lenp1) - 2* self.lenp3 * self.lenp1 * math.cos(self.ap2))
        #等於 SSS(AB, BC, CA)

    def setSaSS(self, lenp2, lenp3, lenp1):
        self.lenp2 = lenp2
        self.lenp3 = lenp3
        self.lenp1 = lenp1
        if(self.lenp1 &gt; (self.lenp2 + self.lenp3)):
        #&lt;CAB 夾角為 180 度, 三點共線且 A 介於 BC 之間
            ret = math.pi
        else :
            # &lt;CAB 夾角為 0, 三點共線且 A 不在 BC 之間
            if((self.lenp1 &lt; (self.lenp2 - self.lenp3)) or (self.lenp1 &lt; (self.lenp3 - self.lenp2))):
                ret = 0.0
            else :
            # 透過餘絃定理求出夾角 &lt;CAB 
                ret = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2 * self.lenp2 * self.lenp3))
        return ret

    # 取得三角形的三個邊長值
    def getSSS(self):
        temp = []
        temp.append( self.getLenp1() )
        temp.append( self.getLenp2() )
        temp.append( self.getLenp3() )
        return temp

    # 取得三角形的三個角度值
    def getAAA(self):
        temp = []
        temp.append( self.getAp1() )
        temp.append( self.getAp2() )
        temp.append( self.getAp3() )
        return temp

    # 取得三角形的三個角度與三個邊長
    def getASASAS(self):
        temp = []
        temp.append(self.getAp1())
        temp.append(self.getLenp1())
        temp.append(self.getAp2())
        temp.append(self.getLenp2())
        temp.append(self.getAp3())
        temp.append(self.getLenp3())
        return temp
    #2P 2L return mid P
    def setPPSS(self, p1, p3, lenp1, lenp3):
        temp = []
        self.p1 = p1
        self.p3 = p3
        self.lenp1 = lenp1
        self.lenp3 = lenp3

        #bp3 is the angle beside p3 point, cp3 is the angle for line23, p2 is the output
        line31 = Line(p3, p1)
        self.lenp2 = line31.getR()
        #self.lenp2 = self.p3.distance(self.p1)
        #這裡是求角3
        ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2 * self.lenp1 * self.lenp2))
        #ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2 * self.lenp1 * self.lenp3))
        bp3 = line31.getT()
        cp3 = bp3 - ap3
        temp.append(p3.x + self.lenp1*math.cos(cp3))#p2.x
        temp.append(p3.y + self.lenp1*math.sin(cp3))#p2.y
        return temp</pre>
<p>導入上述 plt.py 後執行平面四連桿運動模擬:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;p&gt;將四連桿模擬程式庫存在 ./../data/py 子目錄, 然後以 import 導入方式執行運算:&lt;/p&gt;
&lt;canvas id="plotarea2" width="600" height="450"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# import point-line-triangle module
import plt
import math
from browser import document
from browser import timer

midpt = plt.Point(0, 0)
tippt = plt.Point(0, 0)
contour = []
# 執行繪圖流程, 注意 x, y 為 global variables
def draw():
    global theta, midpt, oldpt
    context.clearRect(0, 0, canvas.width, canvas.height)
    line1.drawMe(context)
    line2.drawMe(context)
    line3.drawMe(context)
    line4.drawMe(context)
    #triangle1.drawMe(context)
    #triangle2.drawMe(context)
    theta += dx
    #PLAP
    p2.x = p1.x + line1.length*math.cos(theta*degree)
    p2.y = p1.y - line1.length*math.sin(theta*degree)
    #PLLP
    p3.x, p3.y = triangle2.setPPSS(p2,p4,line2.length,line3.length)
    # 計算垂直單位向量
    a = plt.Coord(p3.x, p3.y)
    b = plt.Coord(p2.x, p2.y)
    normal = plt.perpendicular(plt.normalize(a-b))
    midpt.x = (p2.x + p3.x)/2
    midpt.y = (p2.y + p3.y)/2
    tippt.x = midpt.x + 150*normal.x
    tippt.y = midpt.y + 150*normal.y
    if theta &lt; 360:
        contour.append((tippt.x, tippt.y))
    context.beginPath()
    context.moveTo(midpt.x, midpt.y)
    context.lineTo(tippt.x, tippt.y)
    # 利用 fillRect 繪製一個長寬各 1 單位的正方形
    for i in range(len(contour)):
        context.fillRect(contour[i][0], contour[i][1], 1, 1)
    context.stroke()
    #p1.tag(context)


# 以上為相關函式物件的定義區
# 全域變數
# 幾何位置輸入變數
x=10
y=10
r=10

# 畫布與繪圖內容
# 其他輸入變數
theta = 0
degree = math.pi/180.0
dx = 2
dy = 4

#set p1.p2.p3.p4 position
lift = 10
# 各起始座標點必須精確
p1 =  plt.Point(150,100+lift)
p2 =  plt.Point(150,200+lift)
p3 =  plt.Point(300,300+lift)
p4 =  plt.Point(350,100+lift)
#共有五條線
line1 =  plt.Link(p1,p2)
line2 =  plt.Link(p2,p3)
line3 =  plt.Link(p3,p4)
line4 =  plt.Link(p1,p4)
line5 =  plt.Link(p2,p4)

#link2_len = p2.distance(p3)
#link3_len = p3.distance(p4)

#link2_len = line1.getR()
#link3_len = line3.getR()
#alert(str(link2_len)+','+str(link3_len))

triangle1 =  plt.Triangle(p1,p2,p4)
triangle2 =  plt.Triangle(p2,p3,p4)

# 視窗載入時執行內容
# 繪圖畫布設定

canvas = document["plotarea2"]
context = canvas.getContext("2d")

# 座標轉換, 移動 canvas.height 並且 y 座標變號, 也就是將原點座標移到畫面左下角
context.translate(0,canvas.height)
context.scale(1,-1)

#以間隔 20 micro seconds 重複呼叫 draw()
timer.set_interval(draw,20)
&lt;/script&gt;</pre>
<h1>可攜系統</h1>
<p>初階 <a href="https://drive.google.com/file/d/1Pkkjg8RX3pkZkjWEBlQBggw11u5YSn5i/view?usp=sharing">p37.7z</a> 約 240MB, 解開後容量約 1GB, 可以執行基本 Python3, ANSI C, 與 Lua 程式, 並且內含 git, Fossil SCM 與 gnuplot.</p>
<p><span>完整 </span><span><a href="https://drive.google.com/file/d/12BLN4daAPlO1KjCTDFi1kqJZ6f5k7Y5k/view?usp=sharing">Qt 可攜系統 .7z</a> 約 8GB, 送到 disk1 AT gk 約需 30 分鐘, 製解壓縮需要 2.5 小時, 解開後容量約 21 GB.</span></p>
<p>或從 <a href="http://wcmg3.kmol.info/downloads/Qt_20180714.7z">http://wcmg3.kmol.info/downloads/Qt_20180714.7z</a> 下載.</p>
<p>自行安裝模組:</p>
<p>python -m pip install sympy</p>
<p>python -m pip install kivy Pillow</p>
<p>python -m pip install pygame kivy.deps.sdl2 kivy.deps.glew</p>
<p>python -m pip install comtypes</p>
<p>python -m pip install kivy.deps.gstreamer (not needed for pse)</p>
<hr/>
<p>p37 額外安裝模組:</p>
<p>python -m pip install flake8 <a href="https://drive.google.com/file/d/161sbTVFRiyjsJohSa4q95oGCYq5Wt35v/view?usp=sharing">可攜 Vivaldi 瀏覽器.7z</a> (under mdecourse At Gmail)</p><h2>帳號整合</h2>
<p>目前用於 oauth2 開發用的 https://localhost:6443 以<span> 2016springwcm 郵件帳號登記憑證</span></p>
<p><span>coggle 心智圖則以 scrum1 AT mde 登記</span></p>
<p><span>上課 github 則以 mdecourse 登記</span></p>
<p><span>部分網誌文章與倉儲則又以 kmolab At github 登錄</span></p>
<p><span>p37 下載使用的 drive 則以 disk1 At goodkym 登錄</span></p>
<p><span>Qt 下載則又以 mdecourse 登錄</span></p>
<p><span>以上相關帳號與附屬資源, 必須統一整合</span></p>
<h2>代理主機</h2>
<p>在 Windows 64 位元操作系統, 以 Virtualbox , 使用 Ubuntu 18.04 Server 版建立 Squid 代理主機,  然後透過 <a href="http://vboxvmservice.sourceforge.net/">http://vboxvmservice.sourceforge.net/</a> 讓虛擬代理主機隨 Windows 開機啟動.</p>
<p>執行步驟 :</p>
<ol>
<li>下載 Ubuntu 18.04 Server 版 iso</li>
<li>在 Windows 64 位元操作系統中安裝 Virtubox</li>
<li>利用 Virtualbox 安裝 Ubuntu 18.04 Server</li>
<li>在 Ubuntu Server 中安裝 Squid</li>
<li>設定 Squid 令其雙支援 IPv4 與 IPv6 協定</li>
<li>設定 Squid 在 Ubuntu 開機時啟動</li>
<li>設定 Virtualbox 中的 Ubuntu 在 Windows 開機時啟動</li>
<li>若要轉移已經設定完成的 Virtualbox 主機, 以 File-&gt;Export Appliance 進行</li>
<li>若要轉進已經設定完成的 Virtualbox 主機, 以 File-&gt;Import Applicance 進行</li>
<li>轉進虛擬主機後, 必須針對實際環境加以修改相關設定</li>
</ol>
<p>squid.conf 設定檔案:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">acl cad_lab src 140.130.17.0/24
acl cad_lab src 2001:288:6004:17::/64
 
acl SSL_ports port 443
acl Safe_ports port 80 # http
acl Safe_ports port 88
 
#acl Safe_ports port 21 # ftp
acl SSL_ports port 8443
acl Safe_ports port 8443
 
acl SSL_ports port 9443
acl Safe_ports port 9443
 
acl SSL_ports port 22
acl Safe_ports port 22
 
acl Safe_ports port 443 # https
acl Safe_ports port 1025-65535 # unregistered ports
acl Safe_ports port 280 # http-mgmt
acl Safe_ports port 488 # gss-http
acl Safe_ports port 591 # filemaker
acl Safe_ports port 777 # multiling http
acl CONNECT method CONNECT
 
# Deny requests to certain unsafe ports
http_access deny !Safe_ports
 
# Deny CONNECT to other than secure SSL ports
http_access deny CONNECT !SSL_ports
 
http_access allow cad_lab
http_access deny all
# Only allow cachemgr access from localhost
http_access allow localhost manager
http_access deny manager
 
#http_access allow localnet
http_access allow localhost
 
# And finally deny all other access to this proxy
http_access deny all
 
# Squid normally listens to port 3128
http_port 3128
 
#cache_dir ufs /var/spool/squid 100 16 256
icp_port 3130
icp_access allow all
 
cache_dir ufs /var/spool/squid 2000 16 256
cache_peer 140.130.17.17 sibling 3128 3130
cache_peer 140.130.17.4 sibling 3128 3130
cache_peer 140.130.17.9 sibling 3128 3130
cache_peer 140.130.17.53 sibling 3128 3130
cache_peer 140.130.17.42 sibling 3128 3130
 
#
# Add any of your own refresh_pattern entries above these.
#
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880
refresh_pattern . 0 20% 4320</pre>
<p>安裝 squid</p>
<p>sudo apt install squid</p>
<p>sudo gedit /etc/squid/squid.conf</p>
<p>sudo service squid restart</p>
<p><span></span>netplan YAML 設定範例:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">network:
    ethernets:
        enp0s3:
            addresses: 
                - 2001:288:6004:17:0811::cccc/64
            gateway6: 2001:288:6004:17::254
            nameservers:
                addresses:
                    - 2001:b000:168::1
 
    version: 2</pre>
<p>Ubuntu 操作指令:</p>
<p>刪除 history: </p>
<p>cat /dev/null &gt; ~/.bash_history &amp;&amp; history -c &amp;&amp; exit</p>
<pre class="lang-bsh prettyprint prettyprinted"><code><span class="pln"></span></code></pre>